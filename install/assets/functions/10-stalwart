#!/command/with-contenv bash

array_tools() {
    local action
    local seperator
    local output
    local variable
    action=$1

    case "${action}" in
        doublequote)
            case "${2}" in
                comma )
                    seperator=","
                    shift 2
                ;;
                plus )
                    seperator="+"
                    shift 2
                ;;
                * )
                    seperator=","
                    shift 2
                ;;
            esac

            if [ -v "${@}" ] ; then
                for value in "$(set -o posix ; set | grep ^$@ | cut -d = -f 2- | tr ${seperator} "\n" | uniq )" ; do
                    if [ "${value}" != "" ] ; then
                        value="$(echo "${value}" | sed "s/^/\"/" | sed "s/$/\",/")"
                        output+="${value}"
                    fi
                done

               echo "${output//$'\n'/}" | sed 's/,*\r*$//'
            fi
        ;;

        noquote)
            case "${2}" in
                comma )
                    seperator=","
                    shift 2
                ;;
                plus )
                    seperator="+"
                    shift 2
                ;;
                * )
                    seperator=","
                    shift 2
                ;;
            esac

            if [ -v "${@}" ] ; then
                for value in "$(set -o posix ; set | grep ^$@ | cut -d = -f 2- | tr ${seperator} "\n" | uniq )" ; do
                    if [ "${value}" != "" ] ; then
                        value="$(echo "${value}" | sed "s/$/,/")"
                        output+="${value}"
                    fi
                done

               echo "${output//$'\n'/}" | sed "s|'| |g" | sed 's/,*\r*$//'
            fi
        ;;
        quote)
            case "${2}" in
                comma )
                    seperator=","
                    shift 2
                ;;
                plus )
                    seperator="+"
                    shift 2
                ;;
                * )
                    seperator=","
                    shift 2
                ;;
            esac

            if [ -v "${@}" ] ; then
                for value in "$(set -o posix ; set | grep ^$@ | cut -d = -f 2- | tr ${seperator} "\n" | uniq )" ; do
                    if [ "${value}" != "" ] ; then
                        value="$(echo "${value}" | sed "s/^/'/" | sed "s/$/',/")"
                        output+="${value}"
                    fi
                done

               echo "${output//$'\n'/}" | sed 's/,*\r*$//'
            fi
        ;;

        verify )
            shift 1
            local _transform
            if [ "${1,,}" = "transform" ] ; then
                _transform=true
                shift 1
            fi
            if [ -v "${1}" ] ; then
                variable="$1"
                output="$(set -o posix ; set | grep ^$1 | cut -d = -f 2- | tr "," "\n" | uniq )"
                for value in $output ; do
                    if [[ "${value}" =~ ^file:\/\/.* ]] ; then
                        if [ ! -f "$(echo ${value} | sed "s|^file.*://||g" )" ]; then
                            if [ -f "$2/$(basename "${value}")" ]; then
                                if var_true "${_transform}" ; then
                                    output=$(echo "${output}" | sed "s#$(echo "${value}" | sed "s#^file.*://##g")#$2$(basename "${value}")#g")
                                    export "$1"="$(echo "${output}" | tr "\n" ",")"
                                else
                                    if [ ! -d "$(basename "$(echo "${value}" | sed "s|^file.*//||g")")" ]; then
                                        mkdir -p "$(basename "$(echo "${value}" | sed "s|^file.*//||g")")"
                                        chown "${SERVER_USER}":"${SERVER_GROUP}" "$(basename "$(echo "${value}" | sed "s|^file.*//||g")")"
                                    fi
                                    sudo -u "${SERVER_USER}" cp -aR "${2}"/"$(basename "${value}")" "$(echo "${value}" | sed "s|^file.*://||g")"
                                fi
                            else
                                output="$(echo "${output}" | sed "\#${value}#d")"
                                export "$1"="$(echo "${output}" | tr "\n" ",")"
                            fi
                        fi
                    fi
                done
            fi
        ;;

    esac
}

bootstrap_filesystem() {

    if [ ! -d "${CONFIG_PATH}" ]; then mkdir -p "${CONFIG_PATH}"; fi
    if [ "$(stat -c %U "${CONFIG_PATH}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${CONFIG_PATH}" ; fi

    if [ ! -d "${DATA_PATH}" ]; then mkdir -p "${DATA_PATH}"; fi
    if [ "$(stat -c %U "${DATA_PATH}")" != "${SERVER_USER}" ] ; then chown "${SERVER_USER}":"${SERVER_GROUP}" "${DATA_PATH}" ; fi

    if [ ! -d "${LOG_PATH}" ]; then mkdir -p "${LOG_PATH}" ; fi
    if [ "$(stat -c %U "${LOG_PATH}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${LOG_PATH}" ; fi

    case "${LOG_TYPE,,}" in
        file )
            create_logrotate stalwart "${LOG_PATH}"/"${LOG_FILE}" "${SERVER_USER}" "${SERVER_GROUP}"
        ;;
    esac
}

certificates() {
    TLS_CA_NAME=${TLS_CA_NAME:-"ca-selfsigned-stalwart"}
    TLS_CA_SUBJECT=${TLS_CA_SUBJECT:-"/C=ca/ST=tiredofit/L=docker/O=stalwart/CN="}
    TLS_CA_CERT_SUBJECT=${TLS_CA_CERT_SUBJECT:-${TLS_CA_SUBJECT}${TLS_CA_NAME}}
    TLS_CA_CERT_FILE=${TLS_CA_CERT_FILE:-"/certs/${TLS_CA_NAME}/${TLS_CA_NAME}.crt"}
    TLS_CA_KEY_FILE=${TLS_CA_KEY_FILE:-"$(dirname "${TLS_CA_CERT_FILE}")/${TLS_CA_NAME}.key"}
    TLS_CREATE_CA=${TLS_CREATE_CA:-"TRUE"}

    create_certificate_authority() {
        if [ ! -f "${TLS_CA_CERT_FILE}" ] ; then

            print_debug "[certificates | create_certificate_authority] Creating Self Signed Certificate Authority"
            mkdir -p "$(dirname "${TLS_CA_CERT_FILE}")"
            echo "000a" > "$(dirname "${TLS_CA_CERT_FILE}")"/serial
            touch "$(dirname "${TLS_CA_CERT_FILE}")"/certindex

            silent eval "${ssl_exec} req \
                  -newkey rsa:4096 -keyout ${TLS_CA_KEY_FILE} \
                  -x509 -days 3650 -nodes -out ${TLS_CA_CERT_FILE} \
                  -subj \"${TLS_CA_CERT_SUBJECT}\""

            cat > "$(dirname "${TLS_CA_CERT_FILE}")"/"${TLS_CA_NAME}".conf << EOF
            [ ca ]
            default_ca = ${TLS_CA_NAME}

            [ ${TLS_CA_NAME} ]
            unique_subject = no
            new_certs_dir = .
            certificate = ${TLS_CA_CERT_FILE}
            database = "$(dirname "${TLS_CA_CERT_FILE}")"/certindex
            private_key = ${TLS_CA_KEY_FILE}
            serial = "$(dirname "${TLS_CA_CERT_FILE}")"/serial
            default_days = 3650
            default_md = default
            policy = ${TLS_CA_NAME}_policy
            x509_extensions = ${TLS_CA_NAME}_extensions

            [ ${TLS_CA_NAME}_policy ]
            commonName = supplied
            stateOrProvinceName = supplied
            countryName = supplied
            emailAddress = optional
            organizationName = supplied
            organizationalUnitName = optional

            [ ${TLS_CA_NAME}_extensions ]
            basicConstraints = CA:false
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always
            keyUsage = digitalSignature,keyEncipherment
            extendedKeyUsage = serverAuth,clientAuth

            [ req ]
            default_bits = 2048

            [default_conf]
            ssl_conf = ssl_sect

            [ssl_sect]
            system_default = system_default_sect

            [system_default_sect]
            MinProtocol = TLSv1.2
            MaxProtocol = TLSv1.3
            CipherString = DEFAULT
EOF
        else
            print_debug "[certificates | create_certificate_authority] CA Already Exists"
        fi
    }

    create_certificate() {
        if [ "$1" != "" ] ; then
            if var_true "${TLS_CREATE_CA}" ; then
                if [ ! -f "${TLS_CA_CERT_FILE}" ] || [ ! -f "${TLS_CA_KEY_FILE}" ] ; then
                    print_debug "[certificates | create_certificate] No CA Found - Creating before generating certificates"
                    create_certificate_authority
                fi
            fi
            TLS_CERT_SUBJECT="${TLS_CA_SUBJECT}$(basename "${1%%.*}")"

            if var_true "${TLS_CREATE_CA}" ; then
                if [ ! -f "${1%%.*}".key ] ; then
                    print_debug "[certificates | create_certificate] Creating Certificate: ${1}"
                    silent eval "${ssl_exec} req \
                          -newkey rsa:2048 -keyout ${1%%.*}.key \
                          -nodes -out ${1%%.*}.csr \
                          -subj \"${TLS_CERT_SUBJECT}\""
                fi
            else
                if [ ! -f "${1%%.*}".key ] ; then
                    print_debug "[certificates | create_certificate] Creating Certificate: ${1}"
                    silent eval "${ssl_exec} req \
                          -new -x509 -nodes -days 3650
                          -config /tmp/openssl.cnf
                          -out ${1%%.*}.crt \
                          -keyout ${1%%.*}.key"
                fi
            fi

            if var_true "${TLS_CREATE_CA}" ; then
                if [ ! -f "${1%%.*}".crt ] ; then
                    print_debug "[certificates | create_certificate] Signing Certificate: ${1}"
                    silent eval "${ssl_exec} ca -batch -config $(dirname "${TLS_CA_CERT_FILE}")/${TLS_CA_NAME}.conf -notext -in ${1%%.*}.csr -out ${1%%.*}.crt"
                    rm -rf "$(tail -n 1 "$(dirname "${TLS_CA_CERT_FILE}")"/certindex | awk '{print $3}').pem"
                    rm -rf "${1%%.*}".csr
                fi
            fi

            if [ -f "${1%%.*}".crt ] && [ -f "${1%%.*}".key ] ; then
                print_debug "[certificates | create_certificate] Merging Certificate and Key for: ${1}"
                   cat "${1%%.*}".crt "${1%%.*}".key > "${1%%.*}".pem
            fi

            if [ ! -f "${1%%.*}"-public.pem ] ; then
                print_debug "[certificates | create_certificate] Creating Public Key for: ${1}"
                silent ${ssl_exec} rsa -in "${1%%.*}".pem -out "${1%%.*}"-public.pem -outform PEM -pubout
            fi
        fi
    }

    check_permissions() {
        if sudo -u ${SERVER_USER} [ ! -r "${1}" ] ; then
            print_debug "[certificates | check_permissions] Setting Read Permissions on ${1}"
            chmod 444 "${1}"
        fi
    }

    check_certificates() {
        print_debug "[certificates | check_certificates] Checking Existence of ${1}"
        if [ ! -f "${1}" ] ; then
                mkdir -p "$(dirname "${1}")"
                create_certificate "${1}"
        fi
    }

    check_dhparam() {
        print_debug "[certificates | check_dhparam] Checking Existence of ${TLS_SERVER_DH_PARAM_FILE}"
        if [ ! -f "${TLS_SERVER_DH_PARAM_FILE}" ] ; then
                create_dhparam
        fi
    }

    create_dhparam() {
        print_notice "[certificates | create_dhparam] Creating ${TLS_SERVER_DH_PARAM_FILE}"
        mkdir -p "$(dirname "${TLS_SERVER_DH_PARAM_FILE}")"
        silent ${ssl_exec} dhparam -out "${TLS_SERVER_DH_PARAM_FILE}" "${TLS_SERVER_DH_PARAM_KEYSIZE}"
    }

    trust_ca() {
        if var_true "${TLS_CREATE_CA}" ; then
            if [ -f "${TLS_CA_CERT_FILE}" ]; then
                if [ ! -f /usr/local/share/ca-certificates/"$(basename "${TLS_CA_CERT_FILE}")" ] ; then
                    print_debug "[certificates | trust_ca] Trusting CA ${TLS_CA_NAME}"
                    ln -sf "${TLS_CA_CERT_FILE}" /usr/local/share/ca-certificates/
                    silent update-ca-certificates
                fi
            fi
        fi
    }

    if ! command -v openssl &> /dev/null && ! command -v libressl &> /dev/null ; then
        print_error "[certificates] Can't find a suitable SSL engine - Exiting.."
        exit 1
    fi

    if command -v libressl &> /dev/null ; then
        ssl_exec="libressl"
    fi

    if command -v openssl &> /dev/null ; then
        ssl_exec="openssl"
    fi

    if command -v openssl &> /dev/null &&  command -v libressl &> /dev/null ; then
        ssl_exec="openssl"
    fi

    case "${1,,}" in
        "dhparam" )
            check_dhparam
        ;;
        *)
            check_certificates "${1}"
            check_permissions "${1}"
            trust_ca
        ;;
    esac
}

configure_common() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/common"
    if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
    if [ "$(stat -c %U "${config_dir}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${config_dir}" ; fi

    if [ "${SETUP_TYPE,,}" = "auto" ]; then sudo -u "${SERVER_USER}" mkdir -p "${config_dir}" ; fi

    common_configure_server() {
        config_file="server.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi

            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add server hostname quotes "${SERVER_NAME}"
            toml_block add server max-connections "${SERVER_MAX_CONNECTIONS}"

            toml_block add server.proxy trusted-networks  {"$(array_tools doublequote comma SERVER_PROXY_TRUSTED_NETWORKS)"}

            toml_block add server.run-as user quotes "${SERVER_USER}"
            toml_block add server.run-as group quotes "${SERVER_GROUP}"

            toml_block add server.security blocked-networks "$(array_tools doublequote comma SERVER_SECURITY_BLOCKED_NETWORKS)"}
            toml_block add server.security fail2ban quotes "${SERVER_SECURITY_FAIL2BAN}"

            toml_block add server.socket nodelay "${SERVER_SOCKET_NODELAY,,}"
            toml_block add server.socket reuse-addr "${SERVER_SOCKET_REUSE_ADDR,,}"
            toml_block add server.socket reuse-port "${SERVER_SOCKET_REUSE_PORT,,}"
            toml_block add server.socket backlog "${SERVER_SOCKET_BACKLOG}"
            toml_block add server.socket ttl "${SERVER_SOCKET_TTL}"
            toml_block add server.socket send-buffer-size "${SERVER_SOCKET_SEND_BUFFER_SIZE}"
            toml_block add server.socket recv-buffer-size "${SERVER_SOCKET_RECV_BUFFER_SIZE}"
            toml_block add server.socket linger "${SERVER_SOCKET_LINGER}"
            toml_block add server.socket tos "${SERVER_SOCKET_TOS}"

            toml_block add global shared-map "${SERVER_GLOBAL_SHARED_MAP}"
            toml_block add global thread-pool "${SERVER_GLOBAL_THREAD_POOL}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail Server configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_server}")

$(toml_block show "${block_server_proxy}")

$(toml_block show "${block_server_run_as}")

$(toml_block show "${block_server_security}")

$(toml_block show "${block_server_socket}")

$(toml_block show "${block_global}")

EOF
            sed -i 'N;/^\n$/D;P;D;' "${config_dir}"/"${config_file}"
        else
            :
        fi
    }

    common_configure_sieve() {
        config_file="sieve.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
            toml_block add sieve.untrusted disable-capabilities array "$(array_tools quote comma SIEVE_UNTRUSTED_DISABLE_CAPABILITIES)"
            toml_block add sieve.untrusted notification-uris array "$(array_tools quote comma SIEVE_UNTRUSTED_NOTIFICATION_URIS)"
            toml_block add sieve.untrusted protected-headers array "$(array_tools quote comma SIEVE_UNTRUSTED_PROTECTED_HEADERS)"

            toml_block add sieve.untrusted.limits name-length "${SIEVE_UNTRUSTED_LIMITS_NAME_LENGTH}"
            toml_block add sieve.untrusted.limits max-scripts "${SIEVE_UNTRUSTED_LIMITS_MAX_SCRIPTS}"
            toml_block add sieve.untrusted.limits script-size "${SIEVE_UNTRUSTED_LIMITS_SCRIPT_SIZE}"
            toml_block add sieve.untrusted.limits string-length "${SIEVE_UNTRUSTED_LIMITS_STRING_LENGTH}"
            toml_block add sieve.untrusted.limits variable-name-length "${SIEVE_UNTRUSTED_LIMITS_VARIABLE_NAME_LENGTH}"
            toml_block add sieve.untrusted.limits variable-size "${SIEVE_UNTRUSTED_LIMITS_VARIABLE_SIZE}"
            toml_block add sieve.untrusted.limits nested-blocks "${SIEVE_UNTRUSTED_LIMITS_NESTED_BLOCKS}"
            toml_block add sieve.untrusted.limits nested-tests "${SIEVE_UNTRUSTED_LIMITS_NESTED_TESTS}"
            toml_block add sieve.untrusted.limits nested-foreverypart "${SIEVE_UNTRUSTED_LIMITS_NESTED_FOREVERYPART}"
            toml_block add sieve.untrusted.limits match-variables "${SIEVE_UNTRUSTED_LIMITS_MATCH_VARIABLES}"
            toml_block add sieve.untrusted.limits local-variables "${SIEVE_UNTRUSTED_LIMITS_LOCAL_VARIABLES}"
            toml_block add sieve.untrusted.limits header-size "${SIEVE_UNTRUSTED_LIMITS_HEADER_SIZE}"
            toml_block add sieve.untrusted.limits includes "${SIEVE_UNTRUSTED_LIMITS_INCLUDES}"
            toml_block add sieve.untrusted.limits nested-includes "${SIEVE_UNTRUSTED_LIMITS_NESTED_INCLUDES}"
            toml_block add sieve.untrusted.limits cpu "${SIEVE_UNTRUSTED_LIMITS_CPU}"
            toml_block add sieve.untrusted.limits redirects "${SIEVE_UNTRUSTED_LIMITS_REDIRECTS}"
            toml_block add sieve.untrusted.limits received-headers "${SIEVE_UNTRUSTED_LIMITS_RECEIVED_HEADERS}"
            toml_block add sieve.untrusted.limits outgoing-messages "${SIEVE_UNTRUSTED_LIMITS_OUTGOING_MESSAGES}"

            toml_block add sieve.untrusted.vacation default-subject quotes "${SIEVE_UNTRUSTED_VACATION_DEFAULT_SUBJECT}"
            toml_block add sieve.untrusted.vacation subject-prefix quotes "${SIEVE_UNTRUSTED_VACATION_SUBJECT_PREFIX}"

            toml_block add sieve.untrusted.default-expiry vacation quotes "${SIEVE_UNTRUSTED_DEFAULT_EXPIRY_VACATION}"
            toml_block add sieve.untrusted.default-expiry duplicate quotes "${SIEVE_UNTRUSTED_DEFAULT_EXPIRY_DUPLICATE}"

            toml_block add sieve.trusted from-name quotes "${SIEVE_TRUSTED_FROM_NAME}"
            toml_block add sieve.trusted from-addr quotes "${SIEVE_TRUSTED_FROM_ADDR}"
            toml_block add sieve.trusted return-path quotes "${SIEVE_TRUSTED_RETURN_PATH}"
            toml_block add sieve.trusted hostname quotes "${SIEVE_TRUSTED_HOSTNAME}"
            toml_block add sieve.trusted no-capability-check "${SIEVE_TRUSTED_NO_CAPABILITY_CHECK,,}"
            SIEVE_TRUSTED_SIGN=$(echo "${SIEVE_TRUSTED_SIGN/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add sieve.trusted sign array "$(array_tools quote comma SIEVE_TRUSTED_SIGN)"

            toml_block add sieve.trusted.limits redirects "${SIEVE_TRUSTED_LIMITS_REDIRECTS}"
            toml_block add sieve.trusted.limits out-messages "${SIEVE_TRUSTED_LIMITS_OUT_MESSAGES}"
            toml_block add sieve.trusted.limits received-headers "${SIEVE_TRUSTED_LIMITS_RECEIVED_HEADERS}"
            toml_block add sieve.trusted.limits cpu "${SIEVE_TRUSTED_LIMITS_CPU}"
            toml_block add sieve.trusted.limits nested-includes "${SIEVE_TRUSTED_LIMITS_NESTED_INCLUDES}"
            toml_block add sieve.trusted.limits duplicate-expiry quotes "${SIEVE_TRUSTED_LIMITS_DUPLICATE_EXPIRY}"

            toml_block add sieve.trusted.scripts connect triple "${SIEVE_TRUSTED_SCRIPTS_CONNECT}"
            toml_block add sieve.trusted.scripts ehlo triple "${SIEVE_TRUSTED_SCRIPTS_EHLO}"
            toml_block add sieve.trusted.scripts mail triple "${SIEVE_TRUSTED_SCRIPTS_MAIL}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail Sieve configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

#############################################
# Sieve untrusted runtime configuration
#############################################

$(toml_block show "${block_sieve_untrusted}")

$(toml_block show "${block_sieve_untrusted_limits}")

$(toml_block show "${block_sieve_untrusted_vacation}")

$(toml_block show "${block_sieve_untrusted_default_expiry}")

#############################################
# Sieve trusted runtime configuration
#############################################

$(toml_block show "${block_sieve_trusted}")

$(toml_block show "${block_sieve_trusted_limits}")

$(toml_block show "${block_sieve_trusted_scripts}")

EOF
        else
            :
        fi
    }

    common_configure_store() {
        config_file="sieve.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
            toml_block add storage data quotes "${STORAGE_DATA}"
            toml_block add storage fts quotes "${STORAGE_FTS}"
            toml_block add storage blob quotes "${STORAGE_BLOB}"
            toml_block add storage lookup quotes "${STORAGE_LOOKUP}"
            toml_block add storage directory quotes "${STORAGE_DIRECTORY}"

            toml_block add storage.encryption enable "${STORAGE_ENCRYPTION_ENABLE,,}"
            toml_block add storage.encryption append "${STORAGE_ENCRYPTION_APPEND,,}"

            toml_block add storage.spam header quotes "${STORAGE_SPAM_HEADER}"

            toml_block add storage.fts default-language quotes "${STORAGE_FTS_DEFAULT_LANGUAGE}"

            toml_block add storage.cluster node-id "${STORAGE_CLUSTER_NODE_ID}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail Store configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_storage}")

$(toml_block show "${block_storage_encryption}")

$(toml_block show "${block_storage_spam}")

$(toml_block show "${block_storage_fts}")

$(toml_block show "${block_storage_cluster}")

EOF

        else
            :
        fi
    }
    common_configure_tls() {
        if var_true "${ENABLE_TLS}" ; then
            if [ "${SETUP_TYPE,,}" = "auto" ]; then
                tls_cert_instances=$(set -o posix ; set | grep -P "^TLS_CERTIFICATE([0-9]+)_.*_CERT_FILE=" | sort -u | wc -l)

                if [ "${tls_cert_instances}" -eq 0 ]; then
                    TLS_CERTIFICATE01_DEFAULT_CERT_FILE="${TLS_CERTIFICATE_DEFAULT_CERT_FILE}"
                    TLS_CERTIFICATE01_DEFAULT_KEY_FILE="${TLS_CERTIFICATE_DEFAULT_KEY_FILE}"
                    tls_cert_instances=1
                fi

                for (( tls_cert_instance = 01; tls_cert_instance <= tls_cert_instances; tls_cert_instance++ )); do
                    tls_cert_instance=$(printf "%02d" $tls_cert_instance)
                    tls_cert_name=$(set -o posix ; set | grep -P "^TLS_CERTIFICATE${tls_cert_instance,,}_.*_CERT_FILE=" |  sort -u | cut -d _ -f 3)

                    config_file="tls_cert_${tls_cert_name,,}.toml"
                    config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

                    populate_variable() {
                        if [ -v "TLS_CERTIFICATE${tls_cert_instance,,}_${tls_cert_name}_${1^^}" ]; then
                            export tls_certificate_${1,,}="$(set -o posix ; set | grep "^TLS_CERTIFICATE${tls_cert_instance,,}_${tls_cert_name^^}_${1^^}=" | cut -d = -f2-)"
                        fi
                    }
                    if [ ! -f "$(set -o posix ; set | sort | grep -P "^TLS_CERTIFICATE${tls_cert_instance,,}_${tls_cert_name^^}_CERT_FILE=" | cut -d = -f 2)" ] || [ ! -f "$(set -o posix ; set | sort | grep -P "^TLS_CERTIFICATE${tls_cert_instance,,}_${tls_cert_name^^}_KEY_FILE=" | cut -d = -f 2)" ]; then
                        certificates "$(set -o posix ; set | sort | grep -P "^TLS_CERTIFICATE${tls_cert_instance,,}_${tls_cert_name^^}_CERT_FILE=" | cut -d = -f 2)"
                        chown "${SERVER_USER}":"${SERVER_GROUP}" "$(set -o posix ; set | sort | grep -P "^TLS_CERTIFICATE${tls_cert_instance,,}_${tls_cert_name^^}_CERT_FILE=" | cut -d = -f 2)"
                        chown "${SERVER_USER}":"${SERVER_GROUP}" "$(set -o posix ; set | sort | grep -P "^TLS_CERTIFICATE${tls_cert_instance,,}_${tls_cert_name^^}_KEY_FILE=" | cut -d = -f 2)"
                    fi

                    populate_variable cert_file
                    populate_variable key_file

                    toml_block add certificate.dynamic "${tls_cert_name,,}" cert quotes "file://${tls_certificate_cert_file}"
                    toml_block add certificate.dynamic "${tls_cert_name,,}" private-key quotes "file://${tls_certificate_key_file}"
                    block_certificate="block_certificate_${tls_cert_name,,}"
                    cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
################################################################################################
# TLS Certificate name '${tls_cert_name}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
################################################################################################

$(toml_block show "${!block_certificate}")

EOF
                done

                config_file="tls.toml"
                config_files=$(echo "${config_files}" ; echo "${config_dir}/${config_file},")

                toml_block add server.tls enable "${TLS_ENABLE,,}"
                toml_block add server.tls implicit "${TLS_IMPLICIT,,}"
                toml_block add server.tls timeout quotes "${TLS_TIMEOUT}"

                acme_instances=$(set -o posix ; set | sort | grep -P "^TLS_ACME_([A-Z0-9]+)_DIRECTORY=" | wc -l)
                if [ "${acme_instances}" -eq 1 ]; then
                    TLS_ACME=${TLS_ACME:-"$(set -o posix ; set | sort | grep -P "^TLS_ACME_([A-Z0-9]+)_DIRECTORY=" | cut -d _ -f3 | tr '[A-Z]' '[a-z]')"}
                else
                    if [ -z "${TLS_ACME}" ] && [ "${acme_instances}" -ge 2 ]; then
                        print_error "Multiple ACME configurations detected - Set TLS_ACME environment variable"
                        exit 9
                    fi
                fi

                #if [ "${acme_instances}" -ge 1 ]; then
                #    for acme_instance in $(set -o posix; set | sort -u | grep -P "^TLS_ACME_([A-Z0-9]+)_DIRECTORY=") ; do
                #        acme_name="$(echo "${acme_instance}" | cut -d _ -f3)"
                #        acme_directory="$(echo "${acme_instance}" | cut -d = -f2)"
#
                #        populate_variable() {
                #            if [ -v "TLS_ACME_${acme_name^^}_${1^^}" ]; then
                #                export acme_${1,,}="$(set -o posix ; set | grep "^TLS_ACME_${acme_name^^}_${1^^}=" | cut -d = -f2-)"
                #            else
                #                export acme_${1,,}="$(set -o posix ; set | grep "^TLS_ACME_DEFAULT_${1^^}=" | cut -d = -f2-)"
                #            fi
                #        }
#
                #        ## TODO - 0.5.3 and up
                #        toml_block add server.tls acme quotes "${TLS_ACME}"
#
                #        populate_variable acme_directory
                #        populate_variable acme_contact
                #        populate_variable acme_cache
                #        populate_variable acme_port
                #        populate_variable acme_renew_before
#
                #        toml_block acme.dynamic "${acme_name,,}" directory quotes "${acme_directory}"
                #        toml_block acme.dynamic "${acme_name,,}" contact quotes "${acme_contact}"
                #        ## TODO Make sure path exists
                #        toml_block acme.dynamic "${acme_name,,}" cache quotes "${acme_cache}"
                #        toml_block acme.dynamic "${acme_name,,}" port "${acme_port}"
                #        toml_block acme.dynamic "${acme_name,,}" renew-before quotes "${acme_renew_before}"
#
                #        block_acme="block_acme_${acme_name,,}"
                #    done
                #fi

                if [ "${tls_cert_instances}" -eq 1 ]; then
                    TLS_CERTIFICATE=${TLS_CERTIFICATE:-"$(set -o posix ; set | sort | grep -P "^TLS_CERTIFICATE([0-9]+)_.*_CERT_FILE=" | cut -d _ -f 3 | tr '[A-Z]' '[a-z]')"}
                else
                    if [ -z "${TLS_CERTIFICATE}" ]; then
                        sanity_var TLS_CERTIFICATE "need to select certificate to use"
                    fi
                fi

                toml_block add server.tls certificate quotes "${TLS_CERTIFICATE}"
                toml_block add server.tls ignore-client-order "${TLS_IGNORE_CLIENT_ORDER,,}"

                cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# TLS configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_server_tls}")

$(toml block show "${!block_acme}")

EOF

            else
                :
            fi
        fi
    }

    common_configure_tracing() {
        config_file="tracing.toml"
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            case "${LOG_TYPE,,}" in
                "console" )
                    toml_block add global.tracing method quotes stdout
                    toml_block add global.tracing level quotes ${LOG_LEVEL,,}
                ;;
                "file" )
                    toml_block add global.tracing method log
                    toml_block add global.tracing path quotes "${LOG_PATH}"
                    toml_block add global.tracing prefix quotes "${LOG_FILE}"
                    toml_block add global.tracing level quotes "${LOG_LEVEL,,}"
                    toml_block add global.tracing rotate quotes "never"
                    toml_block add global.tracing ansi false
                ;;
            esac
            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail Logging and Tracing configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_global_tracing}")

EOF
        else
            :
        fi
    }

    common_configure_server
    if var_true "${ENABLE_TLS}" ; then common_configure_tls; fi
    common_configure_tracing
    if var_true "${ENABLE_SIEVE}" ; then common_configure_sieve; fi
    common_configure_store

}

configure_directory() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/directory"
    if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
    if [ "$(stat -c %U "${config_dir}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${config_dir}" ; fi

    directory_configure_instances() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            directory_instances=$(set -o posix ; set | grep -P "^DIRECTORY_([A-Z0-9]+)_TYPE=" |  sort -u | wc -l)
            if [ "${directory_instances}" -eq 1 ]; then
                DEFAULT_DIRECTORY=${DEFAULT_DIRECTORY:-"$(set -o posix ; set | sort | grep -P "^DIRECTORY_([A-Z0-9]+)_TYPE=" | cut -d _ -f2 | tr '[A-Z]' '[a-z]')"}
            elif [ "${directory_instances}" -lt 1 ]; then
                print_error "No Directories Found! - Setup some DIRECTORY_ variables"
                exit 9
            else
                if [ -z "${DEFAULT_DIRECTORY}" ]; then
                    print_error "Multiple directories detected - Set DEFAULT_DIRECTORY environment variable"
                    exit 9
                fi
            fi
            for directory_instance in $(set -o posix; set | sort -u | grep -P "^DIRECTORY_([A-Z0-9]+)_TYPE=") ; do
                directory_name="$(echo "${directory_instance}" | cut -d _ -f2)"
                directory_type="$(echo "${directory_instance}" | cut -d = -f2)"

                populate_variable() {
                    if [ -v "DIRECTORY_${directory_name^^}_${1^^}" ]; then
                        export directory_${1,,}="$(printenv | grep "^DIRECTORY_${directory_name^^}_${1^^}=" | cut -d = -f2-)"
                    else
                        export directory_${1,,}="$(printenv | grep "^DIRECTORY_DEFAULT_${directory_type^^}_${1^^}=" | cut -d = -f2-)"
                    fi
                }

                config_file="${directory_type,,}_${directory_name,,}.toml"
                config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

                case "${directory_type,,}" in
                    imap )
                        populate_variable imap_address
                        populate_variable imap_cache_entries
                        populate_variable imap_cache_ttl
                        populate_variable imap_lookup_domains
                        populate_variable imap_pool_connect_timeout
                        populate_variable imap_pool_idle_timeout
                        populate_variable imap_pool_max_connections
                        populate_variable imap_pool_max_lifetime
                        populate_variable imap_pool_min_connections
                        populate_variable imap_port
                        populate_variable imap_tls_allow_invalid_certs
                        populate_variable imap_tls_implicit

                        toml_block add directory.dynamic ${directory_name,,} type quotes "imap"
                        toml_block add directory.dynamic ${directory_name,,} address quotes "${directory_imap_address}"
                        toml_block add directory.dynamic ${directory_name,,} port "${directory_imap_port}"

                        toml_block add directory.dynamic.pool ${directory_name,,} max-connections "${directory_imap_pool_max_connections}"
                        toml_block add directory.dynamic.pool ${directory_name,,} min-connections "${directory_imap_pool_min_connections}"
                        toml_block add directory.dynamic.pool ${directory_name,,} max-lifetime quotes "${directory_imap_pool_max_lifetime}"
                        toml_block add directory.dynamic.pool ${directory_name,,} idle-timeout quotes "${directory_imap_pool_idle_timeout}"
                        toml_block add directory.dynamic.pool ${directory_name,,} connect-timeout quotes "${directory_imap_pool_connect_timeout}"

                        toml_block add directory.dynamic.tls ${directory_name,,} implicit "${directory_imap_tls_implicit,,}"
                        toml_block add directory.dynamic.tls ${directory_name,,} allow-invalid-certs "${directory_imap_tls_allow_invalid_certs,,}"

                        toml_block add directory.dynamic.cache ${directory_name,,} entries "${directory_imap_cache_entries}"
                        toml_block add directory.dynamic.cache ${directory_name,,} ttl "${directory_imap_cache_ttl}"

                        toml_block add directory.dynamic.lookup ${directory_name,,} domains array "$(array_tools quote comma directory_imap_lookup_domains)"

                        block_directory_imap="block_directory_${directory_name,,}"
                        block_directory_imap_pool="block_directory_${directory_name,,}_pool"
                        block_directory_imap_tls="block_directory_${directory_name,,}_tls"
                        block_directory_imap_cache="block_directory_${directory_name,,}_cache"
                        block_directory_imap_lookup="block_directory_${directory_name,,}_lookup"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Directory '${directory_name,,}' Type '${directory_type}' Configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_directory_imap}")

$(toml_block show "${!block_directory_imap_pool}")

$(toml_block show "${!block_directory_imap_tls}")

$(toml_block show "${!block_directory_imap_cache}")

$(toml_block show "${!block_directory_imap_lookup}")

EOF

                    ;;
                    internal )
                        populate_variable internal_store
                        populate_variable internal_disable

                        populate_variable internal_options_catch_all
                        populate_variable internal_options_subaddressing
                        populate_variable internal_cache_entries
                        populate_variable internal_cache_ttl

                        toml_block add directory.dynamic ${directory_name,,} type quotes "internal"
                        toml_block add directory.dynamic ${directory_name,,} store quotes "${directory_internal_store}"
                        toml_block add directory.dynamic ${directory_name,,} disable "${directory_internal_disable,,}"

                        toml_block add directory.dynamic.options ${directory_name,,} catch-all "${directory_internal_options_catch_all}"
                        toml_block add directory.dynamic.options ${directory_name,,} subaddressing "${directory_internal_options_subaddressing}"

                        toml_block add directory.dynamic.cache ${directory_name,,} entries "${directory_internal_cache_entries}"
                        toml_block add directory.dynamic.cache ${directory_name,,} ttl "${directory_internal_cache_ttl}"

                        block_directory_internal="block_directory_${directory_name,,}"
                        block_directory_internal_options="block_directory_${directory_name,,}_options"
                        block_directory_internal_cache="block_directory_${directory_name,,}_cache"
                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Directory '${directory_name,,}' Type '${directory_type}' Configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_directory_internal}")

$(toml_block show "${!block_directory_internal_options}")

$(toml_block show "${!block_directory_internal_cache}")

EOF
                    ;;
                    ldap )
                        populate_variable ldap_address
                        populate_variable ldap_attributes_description
                        populate_variable ldap_attributes_email
                        populate_variable ldap_attributes_email_alias
                        populate_variable ldap_attributes_groups
                        populate_variable ldap_attributes_name
                        populate_variable ldap_attributes_quota
                        populate_variable ldap_attributes_pass
                        populate_variable ldap_attributes_type
                        populate_variable ldap_base_dn
                        populate_variable ldap_bind_dn
                        populate_variable ldap_bind_pass
                        populate_variable ldap_cache_entries
                        populate_variable ldap_cache_ttl
                        populate_variable ldap_filter_domains
                        populate_variable ldap_filter_email
                        populate_variable ldap_filter_expand
                        populate_variable ldap_filter_name
                        populate_variable ldap_filter_verify
                        populate_variable ldap_objectclasses_group
                        populate_variable ldap_objectclasses_user
                        populate_variable ldap_options_catch_all
                        populate_variable ldap_options_subaddressing
                        populate_variable ldap_pool_connect_timeout
                        populate_variable ldap_pool_idle_timeout
                        populate_variable ldap_pool_max_connections
                        populate_variable ldap_pool_max_lifetime
                        populate_variable ldap_pool_min_connections

                        toml_block add directory.dynamic ${directory_name,,} type quotes "ldap"
                        toml_block add directory.dynamic ${directory_name,,} address quotes "${directory_ldap_address}"
                        sanity_var directory_ldap_base_dn "LDAP Base DN"
                        toml_block add directory.dynamic ${directory_name,,} base-dn quotes "${directory_ldap_base_dn}"

                        sanity_var directory_ldap_bind_dn "LDAP Bind DN"
                        toml_block add directory.dynamic.bind ${directory_name,,} dn quotes "${directory_ldap_bind_dn}"
                        sanity_var directory_ldap_bind_pass "LDAP Bind Password"

                        toml_block add directory.dynamic.bind ${directory_name,,} secret quotes "${directory_ldap_bind_pass}"

                        toml_block add directory.dynamic.cache ${directory_name,,} entries "${directory_ldap_cache_entries}"
                        toml_block add directory.dynamic.cache ${directory_name,,} ttl "${directory_ldap_cache_ttl}"

                        toml_block add directory.dynamic.filter ${directory_name,,} name quotes "${directory_ldap_filter_name}"
                        toml_block add directory.dynamic.filter ${directory_name,,} email quotes "${directory_ldap_filter_email}"
                        toml_block add directory.dynamic.filter ${directory_name,,} verify quotes "${directory_ldap_filter_verify}"
                        toml_block add directory.dynamic.filter ${directory_name,,} expand quotes "${directory_ldap_filter_expand}"
                        toml_block add directory.dynamic.filter ${directory_name,,} domains quotes "${directory_ldap_filter_domains}"

                        toml_block add directory.dynamic.options ${directory_name,,} catch-all "${directory_ldap_options_catch_all,,}"
                        toml_block add directory.dynamic.options ${directory_name,,} subaddressing "${directory_ldap_options_subaddressing,,}"

                        toml_block add directory.dynamic.pool ${directory_name,,} max-connections ${directory_ldap_pool_max_connections}
                        toml_block add directory.dynamic.pool ${directory_name,,} min-connections ${directory_ldap_pool_min_connections}
                        toml_block add directory.dynamic.pool ${directory_name,,} max-lifetime quotes "${directory_ldap_pool_max_lifetime}"
                        toml_block add directory.dynamic.pool ${directory_name,,} idle-timeout quotes "${directory_ldap_pool_idle_timeout}"
                        toml_block add directory.dynamic.pool ${directory_name,,} connect-timeout quotes "${directory_ldap_pool_connect_timeout}"

                        toml_block add directory.dynamic.object-classes ${directory_name,,} user quotes "${directory_ldap_objectclasses_user}"
                        toml_block add directory.dynamic.object-classes ${directory_name,,} group quotes "${directory_ldap_objectclasses_group}"

                        toml_block add directory.dynamic.attributes ${directory_name,,} name quotes "${directory_ldap_attributes_name}"
                        toml_block add directory.dynamic.attributes ${directory_name,,} description array "$(array_tools quote comma directory_ldap_attributes_description)"
                        toml_block add directory.dynamic.attributes ${directory_name,,} secret quotes "${directory_ldap_attributes_pass}"
                        toml_block add directory.dynamic.attributes ${directory_name,,} groups array "$(array_tools quote comma directory_ldap_attributes_groups)"
                        toml_block add directory.dynamic.attributes ${directory_name,,} email quotes "${directory_ldap_attributes_email}"
                        toml_block add directory.dynamic.attributes ${directory_name,,} email-alias quotes "${directory_ldap_attributes_email_alias}"
                        toml_block add directory.dynamic.attributes ${directory_name,,} quota quotes "${directory_ldap_attributes_quota}"
                        toml_block add directory.dynamic.attributes ${directory_name,,} type quotes "${directory_ldap_attributes_type}"

                        block_directory_ldap="block_directory_${directory_name,,}"
                        block_directory_ldap_bind="block_directory_${directory_name,,}_bind"
                        block_directory_ldap_cache="block_directory_${directory_name,,}_cache"
                        block_directory_ldap_options="block_directory_${directory_name,,}_options"
                        block_directory_ldap_pool="block_directory_${directory_name,,}_pool"
                        block_directory_ldap_filter="block_directory_${directory_name,,}_filter"
                        block_directory_ldap_object_classes="block_directory_${directory_name,,}_object_classes"
                        block_directory_ldap_attributes="block_directory_${directory_name,,}_attributes"

                        cat <<EOF > "${config_dir}"/"${config_file,,}"
##########################################################################
# Directory${directory_name,,} ${directory_type^^} configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_directory_ldap}")

$(toml_block show "${!block_directory_ldap_bind}")

$(toml_block show "${!block_directory_ldap_cache}")

$(toml_block show "${!block_directory_ldap_options}")

$(toml_block show "${!block_directory_ldap_pool}")

$(toml_block show "${!block_directory_ldap_filter}")

$(toml_block show "${!block_directory_ldap_object_classes}")

$(toml_block show "${!block_directory_ldap_attributes}")

EOF
                    ;;
                    lmtp )
                        populate_variable lmtp_address
                        populate_variable lmtp_cache_entries
                        populate_variable lmtp_cache_ttl
                        populate_variable lmtp_limits_auth_errors
                        populate_variable lmtp_limits_rcpt
                        populate_variable lmtp_lookup_domains
                        populate_variable lmtp_pool_connect_timeout
                        populate_variable lmtp_pool_idle_timeout
                        populate_variable lmtp_pool_max_connections
                        populate_variable lmtp_pool_max_lifetime
                        populate_variable lmtp_pool_min_connections
                        populate_variable lmtp_port
                        populate_variable lmtp_tls_allow_invalid_certs
                        populate_variable lmtp_tls_implicit

                        toml_block add directory.dynamic ${directory_name,,} type quotes "lmtp"
                        toml_block add directory.dynamic ${directory_name,,} address quotes "${directory_lmtp_address}"
                        toml_block add directory.dynamic ${directory_name,,} port "${directory_lmtp_port}"

                        toml_block add directory.dynamic.limits ${directory_name,,} auth-errors "${directory_lmtp_limits_auth_errors}"
                        toml_block add directory.dynamic.limits ${directory_name,,} rcpt "${directory_lmtp_limits_rcpt}"

                        toml_block add directory.dynamic.pool ${directory_name,,} max-connections "${directory_lmtp_pool_max_connections}"
                        toml_block add directory.dynamic.pool ${directory_name,,} min-connections "${directory_lmtp_pool_min_connections}"
                        toml_block add directory.dynamic.pool ${directory_name,,} max-lifetime quotes "${directory_lmtp_pool_max_lifetime}"
                        toml_block add directory.dynamic.pool ${directory_name,,} idle-timeout quotes "${directory_lmtp_pool_idle_timeout}"
                        toml_block add directory.dynamic.pool ${directory_name,,} connect-timeout quotes "${directory_lmtp_pool_connect_timeout}"

                        toml_block add directory.dynamic.tls ${directory_name,,} implicit "${directory_lmtp_tls_implicit,,}"
                        toml_block add directory.dynamic.tls ${directory_name,,} allow-invalid-certs "${directory_lmtp_tls_allow_invalid_certs,,}"

                        toml_block add directory.dynamic.cache ${directory_name,,} entries "${directory_lmtp_cache_entries}"
                        toml_block add directory.dynamic.cache ${directory_name,,} ttl "${directory_lmtp_cache_ttl}"

                        toml_block add directory.dynamic.options ${directory_name,,} catch-all "${directory_lmtp_options_catch_all,,}"
                        toml_block add directory.dynamic.options ${directory_name,,} subaddressing "${directory_lmtp_options_subaddressing,,}"

                        toml_block add directory.dynamic.lookup ${directory_name,,} domains array "$(array_tools quote comma directory_lmtp_lookup_domains)"

                        block_directory_lmtp="block_directory_${directory_name,,}"
                        block_directory_lmtp_limits="block_directory_${directory_name,,}_limits"
                        block_directory_lmtp_pool="block_directory_${directory_name,,}_pool"
                        block_directory_lmtp_tls="block_directory_${directory_name,,}_tls"
                        block_directory_lmtp_cache="block_directory_${directory_name,,}_cache"
                        block_directory_lmtp_options="block_directory_${directory_name,,}_options"
                        block_directory_lmtp_lookup="block_directory_${directory_name,,}_lookup"

                        cat <<EOF > "${config_dir}"/"${config_file,,}"
##########################################################################
# Directory '${directory_name,,}' Type '${directory_type}' Configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_directory_lmtp}")

$(toml_block show "${!block_directory_lmtp_limits}")

$(toml_block show "${!block_directory_lmtp_pool}")

$(toml_block show "${!block_directory_lmtp_tls}")

$(toml_block show "${!block_directory_lmtp_cache}")

$(toml_block show "${!block_directory_lmtp_options}")

$(toml_block show "${!block_directory_lmtp_lookup}")
EOF
                    ;;
                    memory )
                        populate_variable memory_groups_description
                        populate_variable memory_groups_name
                        populate_variable memory_lookup_domains
                        populate_variable memory_options_catch_all
                        populate_variable memory_options_subaddressing
                        populate_variable memory_users_description
                        populate_variable memory_users_email
                        populate_variable memory_users_email_list
                        populate_variable memory_users_memberof
                        populate_variable memory_users_name
                        populate_variable memory_users_quota
                        populate_variable memory_users_pass
                        populate_variable memory_users_type

                        toml_block add directory.dynamic ${directory_name,,} type "memory"

                        toml_block add directory.dynamic.options ${directory_name,,} catch-all "${directory_memory_options_catch_all,,}"
                        toml_block add directory.dynamic.options ${directory_name,,} subaddressing "${directory_memory_options_subaddressing,,}"

                        memory_user_instances=$(set -o posix ; set | grep -P "^DIRECTORY_${directory_name,,}_MEMORY_USER([0-9]+)_.*=" | sort -u | wc -l)
                        for (( memory_user_instance = 01; memory_user_instance <= memory_user_instances; memory_user_instance++ )); do
                            memory_user_instance=$(printf "%02d" $memory_user_instance)

                            populate_variable() {
                                if [ -v "^DIRECTORY_${directory_name^^}_MEMORY_USER([0-9]+)_${1^^}" ]; then
                                    export directory_memory_user_${1,,}="$(printenv | grep "^DIRECTORY_${directory_name,,}_MEMORY_USER([0-9]+)_${1^^}=" | cut -d = -f2-)"
                                fi
                            }

                            export block_directory_memory_user_${memory_user_instance}="$(cat <<EOF
[[directory."${directory_name,,}".users]]
$(if [ -n "${directory_memory_user_name}" ]; then echo "name = \"${directory_memory_user_name}\""; fi)
$(if [ -n "${directory_memory_user_description}" ]; then echo "description = \"${directory_memory_user_description}\""; fi)
$(if [ -n "${directory_memory_user_type}" ]; then echo "type = \"${directory_memory_user_type}\""; fi)
$(if [ -n "${directory_memory_user_pass}" ]; then echo "secret = \"${directory_memory_user_pass}\""; fi)
$(if [ -n "${directory_memory_user_email}" ]; then echo "email = $(array_tools quote comma directory_memory_user_email)"; fi)
$(if [ -n "${directory_memory_user_user_email_list}" ]; then echo "email-list = $(array_tools quote comma directory_memory_user_email_list)"; fi)
$(if [ -n "${directory_memory_user_quota}" ]; then echo "quota = ${directory_memory_user_name}"; fi)
$(if [ -n "${directory_memory_user_memberof}" ]; then echo "member-of = $(array_tools quote comma directory_memory_user_memberof)"; fi)
EOF
                                                                                        )"
                            ## TODO Cleanup blank lines

                            #toml_block add directory.dynamic.users ${directory_name,,} name quotes "${directory_memory_user_name}"
                            #toml_block add directory.dynamic.users ${directory_name,,} description quotes "${directory_memory_user_description}"
                            #toml_block add directory.dynamic.users ${directory_name,,} secret quotes "${directory_memory_user_pass}"
                            #toml_block add directory.dynamic.users ${directory_name,,} email quotes "${directory_memory_user_email}"
                            #toml_block add directory.dynamic.users ${directory_name,,} email-list quotes "${directory_memory_user_email_list}"
                            #toml_block add directory.dynamic.users ${directory_name,,} quota quotes "${directory_memory_user_quota}"
                            #toml_block add directory.dynamic.users ${directory_name,,} member-of quotes "${directory_memory_user_memberof}"
                        done

                    memory_user_groups=$(set -o posix ; set | grep -P "^DIRECTORY_${directory_name,,}_MEMORY_GROUP([0-9]+)_.*=" | sort -u | wc -l)
                        for (( memory_group_instance = 01; memory_group_instance <= memory_user_instances; memory_group_instance++ )); do
                            memory_group_instance=$(printf "%02d" $memory_group_instance)

                            populate_variable() {
                                if [ -v "^DIRECTORY_${directory_name^^}_MEMORY_GROUP([0-9]+)_${1^^}" ]; then
                                    export directory_memory_group_${1,,}="$(printenv | grep "^DIRECTORY_${directory_name,,}_MEMORY_GROUP([0-9]+)_${1^^}=" | cut -d = -f2-)"
                                fi
                            }

                            export block_directory_memory_group_${memory_group_instance}="$(cat <<EOF
[[directory."${directory_name,,}".users]]
$(if [ -n "${directory_memory_group_name}" ]; then echo "name = \"${directory_memory_group_name}\""; fi)
$(if [ -n "${directory_memory_group_description}" ]; then echo "description = \"${directory_memory_ugroup_description}\""; fi)
EOF

                            ## TODO Cleanup blank lines
                                                                                            )"
                            #toml_block add directory.dynamic.groups ${directory_name,,} name quotes "${directory_memory_group_name}"
                            #toml_block add directory.dynamic.groups ${directory_name,,} description quotes "${directory_memory_group_description}"

                        done

                        toml_block add directory.dynamic.lookup ${directory_name,,} domains array "$(array_tools quote comma directory_memory_lookup_domains)"

                        block_directory_memory="block_directory_${directory_name,,}"
                        #block_directory_memory_users="block_directory_${directory_name,,}_users"
                        #block_directory_memory_groups="block_directory_${directory_name,,}_groups"
                        block_directory_memory_lookup="block_directory_${directory_name,,}_lookup"

                        cat <<EOF > "${config_dir}"/"${config_file,,}"
##########################################################################
# Directory '${directory_name,,}' Type '${directory_type}' Configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_directory_memory}")

$(for block_user in $(set -o posix ; set | sort | grep -P "^block_directory_memory_user_.*="); do echo "${block_user}" ; done)
\#$(toml_block show "${!block_directory_memory_users}")

$(for block_group in $(set -o posix ; set | sort | grep -P "^block_directory_memory_group_.*="); do echo "${block_group}" ; done)
\#$(toml_block show "${!block_directory_memory_groups}")

$(toml_block show "${!block_directory_memory_lookup}")

EOF
                    ;;
                    sql )
                        populate_variable sql_address
                        populate_variable sql_cache_entries
                        populate_variable sql_cache_ttl
                        populate_variable sql_columns_description
                        populate_variable sql_columns_email
                        populate_variable sql_columns_name
                        populate_variable sql_columns_quota
                        populate_variable sql_columns_pass
                        populate_variable sql_columns_type
                        populate_variable sql_options_catch_all
                        populate_variable sql_options_subaddressing
                        populate_variable sql_pool_max_connections
                        populate_variable sql_pool_min_connections

                        ## TODO this actually needs to be in stores
                        populate_variable sql_type

                        if [ -z "${directory_sql_type}" ]; then
                            print_error "You need to set SQL Type for the directory!"
                            exit 9
                        fi

                        case "${directory_sql_type,,}" in
                            maria | mysql )
                                directory_sql_type=mysql
                            ;;
                            pgsql | postgres* )
                                directory_sql_type=postgres
                            ;;
                            sqlite* )
                                directory_sql_type=sqlite
                            ;;
                            * )
                                print_error "[configure_directory] [sql] I don't know SQL type '${directory_sql_type,,}'"
                                exit 9
                            ;;
                        esac

                        populate_variable_sql() {
                            if [ -v "^DIRECTORY_${directory_name^^}_SQL_${1^^}" ]; then
                                export directory_sql_${1,,}="$(set -o posix ; set | grep -P "^DIRECTORY_${directory_name^^}_SQL_${1^^}=" | cut -d = -f2-)"
                            else
                                export directory_sql_${1,,}="$(set -o posix; set | grep -P "^DIRECTORY_DEFAULT_SQL_${directory_sql_type^^}_${1^^}=" | cut -d = -f2-)"
                            fi
                        }

                        populate_variable_sql query_domains
                        populate_variable_sql query_emails
                        populate_variable_sql query_expand
                        populate_variable_sql query_members
                        populate_variable_sql query_name
                        populate_variable_sql query_recipients
                        populate_variable_sql query_verify

                        toml_block add directory.dynamic ${directory_name,,} type quotes "sql"
                        toml_block add directory.dynamic ${directory_name,,} address quotes "${directory_sql_address}"

                        toml_block add directory.dynamic.options ${directory_name,,} catch-all "${directory_sql_options_catch_all,,}"
                        toml_block add directory.dynamic.options ${directory_name,,} subaddressing "${directory_sql_options_subaddressing,,}"

                        toml_block add directory.dynamic.pool ${directory_name,,} max-connections "${directory_sql_pool_max_connections}"
                        toml_block add directory.dynamic.pool ${directory_name,,} min-connections "${directory_sql_pool_min_connections}"
                        toml_block add directory.dynamic.pool ${directory_name,,} idle-timeout quotes "${directory_sql_idle_timeout}"

                        toml_block add directory.dynamic.cache ${directory_name,,} entries "${directory_sql_cache_entries}"
                        toml_block add directory.dynamic.cache ${directory_name,,} ttl "${directory_sql_cache_ttl}"

                        toml_block add directory.dynamic.query ${directory_name,,} name "${directory_sql_query_name}"
                        toml_block add directory.dynamic.query ${directory_name,,} members "${directory_sql_query_members}"
                        toml_block add directory.dynamic.query ${directory_name,,} recipients "${directory_sql_query_recipients}"
                        toml_block add directory.dynamic.query ${directory_name,,} emails "${directory_sql_query_emails}"
                        toml_block add directory.dynamic.query ${directory_name,,} verify "${directory_sql_query_verify}"
                        toml_block add directory.dynamic.query ${directory_name,,} expand "${directory_sql_query_expand}"
                        toml_block add directory.dynamic.query ${directory_name,,} domains "${directory_sql_query_domains}"

                        toml_block add directory.dynamic.columns ${directory_name,,} name "${directory_sql_columns_name}"
                        toml_block add directory.dynamic.columns ${directory_name,,} description "${directory_sql_columns_description}"
                        toml_block add directory.dynamic.columns ${directory_name,,} secret "${directory_sql_columns_pass}"
                        toml_block add directory.dynamic.columns ${directory_name,,} email "${directory_sql_columns_email}"
                        toml_block add directory.dynamic.columns ${directory_name,,} quota "${directory_sql_columns_quota}"
                        toml_block add directory.dynamic.columns ${directory_name,,} type "${directory_sql_columns_type}"

                        block_directory_sql="block_directory_${directory_name,,}"
                        block_directory_sql_options="block_directory_${directory_name,,}_options"
                        block_directory_sql_pool="block_directory_${directory_name,,}_pool"
                        block_directory_sql_cache="block_directory_${directory_name,,}_cache"
                        block_directory_sql_query="block_directory_${directory_name,,}_query"
                        block_directory_sql_columns="block_directory_${directory_name,,}_columns"

                        cat <<EOF > "${config_dir}"/"${config_file,,}"
##########################################################################
# Directory '${directory_name,,}' Type '${directory_type}' Configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_directory_sql}")

$(toml_block show "${!block_directory_sql_options}")

$(toml_block show "${!block_directory_sql_pool}")

$(toml_block show "${!block_directory_sql_cache}")

$(toml_block show "${!block_directory_sql_query}")

$(toml_block show "${!block_directory_sql_columns}")

EOF
                    ;;
                esac
            done
        fi
    }

    directory_configure_instances
}

configure_imap() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/imap"
    if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
    if [ "$(stat -c %U "${config_dir}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${config_dir}" ; fi

    imap_configure_listener() {
        config_file="listener.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            if var_true "${IMAP_ENABLE_IMAP}"; then
                toml_block add server.listener.dynamic imap bind array "$(array_tools quote comma IMAP_LISTENER_IMAP_BIND)"
                toml_block add server.listener.dynamic imap protocol quotes "imap"
            fi

            if var_true "${IMAP_ENABLE_IMAPS}"; then
                toml_block add server.listener.dynamic imaps bind array "$(array_tools quote comma IMAP_LISTENER_IMAPS_BIND)"
                toml_block add server.listener.dynamic imaps tls.implicit "${IMAP_LISTENER_IMAPS_TLS_IMPLICIT}"
                toml_block add server.listener.dynamic imaps protocol quotes "imap"
            fi

            if var_true "${IMAP_ENABLE_SIEVE}"; then
                toml_block add server.listener.dynamic sieve bind array "$(array_tools quote comma IMAP_LISTENER_SIEVE_BIND)"
                toml_block add server.listener.dynamic sieve tls.implicit "${IMAP_LISTENER_SIEVE_TLS_IMPLICIT}"
                toml_block add server.listener.dynamic sieve protocol quotes "managesieve"
            fi

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# IMAP listener configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_server_listener_imap}")

$(toml_block show "${block_server_listener_imaps}")

$(toml_block show "${block_server_listener_sieve}")

EOF

        else
            :
        fi
    }

    imap_configure_settings() {
        config_file="settings.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add imap.request max-size "${IMAP_REQUEST_MAX_SIZE}"

            toml_block add imap.auth max-failures "${IMAP_AUTH_MAX_FAILURES}"
            toml_block add imap.auth allow-plain-text "${IMAP_AUTH_ALLOW_PLAIN_TEXT,,}"

            toml_block add imap.folders.name shared "${IMAP_FOLDERSNAME_SHARED}"
            toml_block add imap.folders.name all "${IMAP_FOLDERSNAME_ALL}"

            toml_block add imap.timeout authenticated "${IMAP_TIMEOUT_AUTHENTICATED}"
            toml_block add imap.timeout anonymous "${IMAP_TIMEOUT_ANONYMOUS}"
            toml_block add imap.timeout idle "${IMAP_TIMEOUT_IDLE}"

            toml_block add imap.rate-limit requests "${IMAP_RATELIMIT_REQUESTS}"
            toml_block add imap.rate-limit concurrent "${IMAP_RATELIMIT_CONCURRENT}"


            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# IMAP settingsconfiguration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_imap_request}")

$(toml_block show "${block_imap_auth}")

$(toml_block show "${block_imap_folders_name}")

$(toml_block show "${block_imap_timeout}")

$(toml_block show "${block_imap_rate_limit}")

EOF

        else
            :
        fi
    }

    if var_true "${IMAP_ENABLE_LISTENER}" ; then imap_configure_listener ; fi
    if var_true "${IMAP_ENABLE_SETTINGS}" ; then imap_configure_settings; fi
}

configure_jmap() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/jmap"
    if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
    if [ "$(stat -c %U "${config_dir}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${config_dir}" ; fi

    jmap_configure_auth() {
        config_file="auth.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add jmap.session.cache ttl quotes "${JMAP_SESSION_CACHE_TTL}"
            toml_block add jmap.session.cache size "${JMAP_SESSION_CACHE_SIZE}"

            toml_block add jmap.session.purge frequency quotes "${JMAP_SESSION_PURGE_FREQUENCY}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# JMAP authentication & session configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_jmap_session_cache}")

$(toml_block show "${block_jmap_session_purge}")

EOF

        else
            :
        fi
    }

    jmap_configure_listener() {
        config_file="listener.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add server.listener.dynamic jmap bind array "$(array_tools quote comma JMAP_LISTENER_JMAP_BIND)"
            toml_block add server.listener.dynamic jmap url quotes "${JMAP_LISTENER_JMAP_URL}"
            toml_block add server.listener.dynamic jmap protocol quotes "jmap"

            toml_block add server.listener.dynamic.tls implicit "${JMAP_LISTENER_TLS_IMPLICIT,,}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# JMAP configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_server_listener_jmap}")

$(toml_block show "${block_server_listener_jmap_tls}")
EOF

        else
            :
        fi
    }

    jmap_configure_oauth() {
        config_file="oauth.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            if [ -z "${JMAP_OAUTH_KEY}" ]; then
                print_warn "No JMAP_OAUTH_KEY detected - Auto generating. You should set a permanent one!"
                jmap_oauth_key="$(openssl rand -base64 64 | tr -d '\n')"
            else
                jmap_oauth_key=${JMAP_OAUTH_KEY}
            fi
            toml_block add oauth key quotes "${jmap_oauth_key}"
            toml_block add oauth.auth max-attempts "${JMAP_OAUTH_AUTH_MAX_ATTEMPTS}"

            toml_block add oauth.expiry user-code quotes "${JMAP_OAUTH_EXPIRY_USER_CODE}"
            toml_block add oauth.expiry auth-code quotes "${JMAP_OAUTH_EXPIRY_AUTH_CODE}"
            toml_block add oauth.expiry token quotes "${JMAP_OAUTH_EXPIEY_TOKEN}"
            toml_block add oauth.expiry refresh-token quotes "${JMAP_OAUTH_EXPIRY_REFRESH_TOKEN}"
            toml_block add oauth.expiry refresh-token-renew quotes "${JMAP_OAUTH_EXPIRY_REFRESH_TOKEN_RENEW}"

            toml_block add oauth.cache size "${JMAP_OAUTH_CACHE_SIZE}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# JMAP configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_oauth}")

$(toml_block show "${block_oauth_auth}")

$(toml_block show "${block_oauth_expiry}")

$(toml_block show "${block_oauth_cache}")

EOF

        else
            :
        fi
    }

    jmap_configure_protocol() {
        config_file="protocol.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add jmap.protocol.get max-objects "${JMAP_PROTOCOL_GET_MAX_OBJECTS}"

            toml_block add jmap.protocol.set max-objects "${JMAP_PROTOCOL_MAX_OBJECTS}"

            toml_block add jmap.protocol.request max-concurrent "${JMAP_PROTOCOL_REQUEST_MAX_CONRUEENT_}"
            toml_block add jmap.protocol.request max-size "${JMAP_PROTOCOL_REQUEST_MAX_SIZE}"
            toml_block add jmap.protocol.request max-calls "${JMAP_PROTOCOL_REQUEST_MAX_CALLS}"

            toml_block add jmap.protocol.query max-results "${JMAP_PROTOCOL_QUERY_MAX_RESULTS}"

            toml_block add jmap.protocol.upload max-size "${JMAP_PROTOCOL_UPLOAD_MAX_SIZE}"
            toml_block add jmap.protocol.upload max-concurrent "${JMAP_PROTOCOL_UPLOAD_MAX_CONCURRENT}"
            toml_block add jmap.protocol.upload ttl "${JMAP_PROTOCOL_UPLOAD_TTL}"

            toml_block add jmap.protocol.upload.quota files "${JMAP_PROTOCOL_UPLOAD_QUOTA_FILES}"
            toml_block add jmap.protocol.upload.quota size "${JMAP_PROTOCOL_UPLOAD_QUOTA_SIZE}"

            toml_block add jmap.protocol.changes "${JMAP_PROTOCOL_CHANGES_MAX_RESULTS}"

            toml_block add jmap.mailbox max-depth "${JMAP_MAILBOX_MAX_DEPTH}"
            toml_block add jmap.mailbox max-name-length "${JMAP_PROTOCOL_MAX_NAME_LENGTH}"

            toml_block add jmap.email "${JMAP_EMAIL_MAX_ATTACHMENT_SIZE}"
            toml_block add jmap.email "${JMAP_EMAIL_MAX_SIZE}"

            toml_block add jmap.email.parse max-items "${JMAP_PROTOCOL_EMAIL_PARSE_MAX_ITEMS}"

            toml_block add jmap.principal allow-lookups "${JMAP_PRINCIPAL_ALLOW_LOOKUPS,,}"

            toml_block add jmap.http headers array "$(array_tools quote comma JMAP_HTTP_HEADERS)"


            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# JMAP protocol configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_jmap_protocol_get}")

$(toml_block show "${block_jmap_protocol_set}")

$(toml_block show "${block_jmap_protocol_request}")

$(toml_block show "${block_jmap_protocol_query}")

$(toml_block show "${block_jmap_protocol_upload}")

$(toml_block show "${block_jmap_protocol_upload_quota}")

$(toml_block show "${block_jmap_protocol_changes}")

$(toml_block show "${block_jmap_mailbox}")

$(toml_block show "${block_jmap_email}")

$(toml_block show "${block_jmap_email_parse}")

$(toml_block show "${block_jmap_principal}")

$(toml_block show "${block_jmap_http}")

EOF

        else
            :
        fi
    }

    jmap_configure_push() {
        config_file="push.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add jmap.push.max-total quotes "${JMAP_PUSH_MAX_TOTAL}"
            toml_block add jmap.push.throttle quotes "${JMAP_PUSH_THROTTLE}"

            toml_block add jmap.push.attempts interval quotes "${JMAP_PUSH_ATTEMPTS_INTERVAL}"
            toml_block add jmap.push.attempts max "${JMAP_PUSH_ATTEMPTS_MAX}"

            toml_block add jmap.push.retry interval quotes "${JMAP_PUSH_RETRY_INTERVAL}"

            toml_block add jmap.push.timeout request quotes "${JMAP_PUSH_TIMEOUT_REQUEST}"
            toml_block add jmap.push.timeout verify quotes "${JMAP_PUSH_TIMEOUT_VERIFY}"

            toml_block add jmap.event-source throttle quotes "${JMAP_EVENT_SOURCE_THROTTLE}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# JMAP push and event source configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_jmap_push}")

$(toml_block show "${block_jmap_push_attempts}")

$(toml_block show "${block_jmap_push_retry}")

$(toml_block show "${block_jmap_push_timeout}")

$(toml_block show "${block_jmap_event_source}")

EOF

        else
            :
        fi
    }

    jmap_configure_ratelimit() {
        config_file="ratelimit.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add jmap.rate-limit account quotes "${JMAP_RATELIMIT_}"
            toml_block add jmap.rate-limit authentication quotes "${JMAP_RATELIMIT_}"
            toml_block add jmap.rate-limit anonymous quotes "${JMAP_RATELIMIT_}"
            toml_block add jmap.rate-limit use-forwarded "${JMAP_RATELIMIT_}"

            toml_block add jmap.rate-limit.cache "${JMAP_RATELIMIT_}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# JMAP server rate limiter configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_jmap_rate_limit}")

$(toml_block show "${block_jmap_rate_limit_cache}")

EOF

        else
            :
        fi
    }

    jmap_configure_websockets() {
        config_file="websockets.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add jmap.web-sockets throttle quotes "${JMAP_WEBSOCKETS_THROTTLE}"
            toml_block add jmap.web-sockets timeout quotes "${JMAP_WEBSOCKETS_TIMEOUT}"
            toml_block add jmap.web-sockets heartbeat quotes "${JMAP_WEBSOCKETS_HEARTBEAT}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# JMAP websockets configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_jmap_web_sockets}")

EOF

        else
            :
        fi
    }

    if var_true "${JMAP_ENABLE_AUTH}" ; then jmap_configure_auth ; fi
    if var_true "${JMAP_ENABLE_LISTENER}" ; then jmap_configure_listener ; fi
    if var_true "${JMAP_ENABLE_OAUTH}" ; then jmap_configure_oauth ; fi
    if var_true "${JMAP_ENABLE_PROTOCOL}" ; then jmap_configure_protocol ; fi
    if var_true "${JMAP_ENABLE_PUSH}" ; then jmap_configure_push ; fi
    if var_true "${JMAP_ENABLE_RATELIMIT}" ; then jmap_configure_ratelimit ; fi
    if var_true "${JMAP_ENABLE_WEBSOCKETS}" ; then jmap_configure_websockets ; fi
}

configure_server() {
   local config_dir
   local config_file
   config_dir="${CONFIG_PATH}"

    if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
    if [ "$(stat -c %U "${config_dir}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${config_dir}" ; fi

    if [ -n "${CONFIG_CUSTOM_FILE}" ]; then
        config_files=$(echo ${config_files} ; echo "${CONFIG_CUSTOM_PATH}/${CONFIG_CUSTOM_FILE},")
    fi

    config_file="${CONFIG_FILE}"

    if [ "${SETUP_TYPE,,}" = "auto" ]; then
        ## TODO Check to see if newer files override older files configuration
        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##################################################
# Stalwart Mail configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##################################################

[include]
files = [
$(for config_file in $(echo ${config_files} | tr "," "\",\n") ; do echo "          \"${config_file/\/\//\/}," ; done)
        ]

EOF
    else
        :
    fi
}

configure_smtp() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/smtp"
    if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
    if [ "$(stat -c %U "${config_dir}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${config_dir}" ; fi

    smtp_configure_auth() {
        config_file="auth.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            ## TODO Add ENABLE switches
            toml_block add auth.iprev verify array "$(array_tools noquote plus SMTP_AUTH_IPREV_VERIFY)"

            toml_block add auth.dkim verify quotes "${SMTP_AUTH_DKIM_VERIFY}"
            SMTP_AUTH_ARC_SIGN=$(echo "${SMTP_AUTH_ARC_SIGN/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add auth.dkim sign array "$(array_tools noquote plus SMTP_AUTH_DKIM_SIGN)"

            toml_block add auth.spf.verify ehlo array "$(array_tools noquote plus SMTP_AUTH_SPF_VERIFY_EHLO)"
            toml_block add auth.spf.verify mail-from array "$(array_tools noquote plus SMTP_AUTH_SPF_VERIFY_MAIL_FROM)"

            toml_block add auth.arc verify quotes "${SMTP_AUTH_ARC_VERIFY}"
            SMTP_AUTH_ARC_SEAL=$(echo "${SMTP_AUTH_ARC_SEAL/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add auth.arc seal array "$(array_tools quote comma SMTP_AUTH_ARC_SEAL)"

            toml_block add auth.dmarc verify array "$(array_tools noquote plus SMTP_AUTH_DMARC_VERIFY)"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail SMTP configuration '${config_file}'
# DMARC, DKIM, SPF, ARC & IpRev
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_auth_iprev}")

$(toml_block show "${block_auth_dkim}")

$(toml_block show "${block_auth_spf_verify}")

$(toml_block show "${block_auth_arc}")

$(toml_block show "${block_auth_dmarc}")

EOF
        else
            :
        fi
    }

    smtp_configure_dkim() {
        config_file="dkim.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            print_debug "Configuring DKIM"

            dkim_domains=$(set -o posix ; set | sort | grep -c "^DKIM.*_DOMAIN=")
            for (( dkim_pair = 01; dkim_pair <= dkim_domains; dkim_pair++ )); do
                dkim_domain=DKIM${dkim_pair}_DOMAIN
                dkim_selector=DKIM${dkim_pair}_SELECTOR
                dkim_type=DKIM${dkim_pair}_TYPE
                dkim_keysize=DKIM${dkim_pair}_KEY_SIZE
                dkim generate "${!dkim_selector}" "${!dkim_domain}" "${!dkim_type}" ${!dkim_keysize}
            done

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail SMTP configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

EOF
        else
            :
        fi
    }

    smtp_configure_listener() {
        config_file="listener.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            if var_true "${SMTP_ENABLE_SMTP}" ; then
                toml_block add server.listener.dynamic smtp bind array "$(array_tools quote comma SMTP_LISTENER_SMTP_BIND)"
                SMTP_LISTENER_SMTP_GREETING=${SMTP_LISTENER_SMTP_GREETING:-"${SMTP_LISTENER_GREETING}"}
                toml_block add server.listener.dynamic smtp greeting quotes "${SMTP_LISTENER_SMTP_GREETING}"
                toml_block add server.listener.dynamic smtp protocol quotes "${SMTP_LISTENER_SMTP_PROTOCOL}"
            fi

            if var_true "${SMTP_ENABLE_SUBMISSION}" ; then
                toml_block add server.listener.dynamic submission bind array "$(array_tools quote comma SMTP_LISTENER_SUBMISSION_BIND)"
                SMTP_LISTENER_SUBMISSION_GREETING=${SMTP_LISTENER_SUBMISSION_GREETING:-"${SMTP_LISTENER_GREETING}"}
                toml_block add server.listener.dynamic submission greeting quotes "${SMTP_LISTENER_SUBMISSION_GREETING}"
                toml_block add server.listener.dynamic submission protocol quotes "${SMTP_LISTENER_SUBMISSION_PROTOCOL}"
            fi

            if var_true "${SMTP_ENABLE_SUBMISSIONS}" ; then
                toml_block add server.listener.dynamic submissions bind array "$(array_tools quote comma SMTP_LISTENER_SUBMISSIONS_BIND)"
                SMTP_LISTENER_SUBMISSIONS_GREETING=${SMTP_LISTENER_SUBMISSIONS_GREETING:-"${SMTP_LISTENER_GREETING}"}
                toml_block add server.listener.dynamic submissions greeting quotes "${SMTP_LISTENER_SUBMISSIONS_GREETING}"
                toml_block add server.listener.dynamic submissions protocol quotes "${SMTP_LISTENER_SUBMISSIONS_PROTOCOL,,}"
                toml_block add server.listener.dynamic submissions tls.implicit "${SMTP_LISTENER_SUBMISSIONS_TLS_IMPLICIT,,}"
            fi

            if var_true "${SMTP_ENABLE_MANAGEMENT}" ; then
                toml_block add server.listener.dynamic management bind array "$(array_tools quote comma SMTP_LISTENER_MANAGEMENT_BIND)"
                toml_block add server.listener.dynamic management protocol quotes "${SMTP_LISTENER_MANAGEMENT_PROTOCOL,,}"
            fi

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail SMTP listener configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_server_listener_smtp}")

$(toml_block show "${block_server_listener_submission}")

$(toml_block show "${block_server_listener_submissions}")

$(toml_block show "${block_server_listener_management}")

EOF
        else
            :
        fi
    }

    smtp_configure_milter() {
        config_file="milter.toml"
        if [ "${SETUP_TYPE,,}" = "auto" ]; then

            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            if var_true "${SMTP_MILTER_ENABLE_RSPAMD}"; then
                toml_block add session.data.milter.dynamic rspamd enable array "$(array_tools quote comma SMTP_SESSION_DATA_MILTER_RSPAMD_ENABLE)"
                toml_block add session.data.milter.dynamic rspamd hostname quotes "${SMTP_SESSION_DATA_MILTER_RSPAMD_HOSTNAME}"
                toml_block add session.data.milter.dynamic rspamd port "${SMTP_SESSION_DATA_MILTER_RSPAMD_PORT}"
                toml_block add session.data.milter.dynamic rspamd tls "${SMTP_SESSION_DATA_MILTER_RSPAMD_TLS}"
                toml_block add session.data.milter.dynamic rspamd allow-invalid-certs "${SMTP_SESSION_DATA_MILTER_RSPAMD_ALLOW_INVALID_CERTS,,}"

                toml_block add session.data.milter.dynamic.timeout rspamd connect quotes "${SMTP_SESSION_DATA_MILTER_RSPAMD_TIMEOUT_CONNECT}"
                toml_block add session.data.milter.dynamic.timeout rspamd command quotes"${SMTP_SESSION_DATA_MILTER_RSPAMD_TIMEOUT_COMMAND}"
                toml_block add session.data.milter.dynamic.timeout rspamd data quotes "${SMTP_SESSION_DATA_MILTER_RSPAMD_TIMEOUT_DATA}"

                toml_block add session.data.milter.dynamic.options rspamd tempfail-on-error "${SMTP_SESSION_DATA_MILTER_RSPAMD_TEMPFAIL_ON_ERROR}"
                toml_block add session.data.milter.dynamic.options rspamd max-response-size "${SMTP_SESSION_DATA_MILTER_RSPAMD_MAX_RESPONSE_SIZE}"
                toml_block add session.data.milter.dynamic.options rspamd version "${SMTP_SESSION_DATA_MILTER_RSPAMD_VERSION}"
            fi

            if var_true "${SMTP_MILTER_ENABLE_SPAMASSASSIN}" ; then
                toml_block add session.data.pipe.dynamic spam-assassin command quotes "${SMTP_SESSION_PIPE_SPAM_ASSASSIN_COMMAND}"
                toml_block add session.data.pipe.dynamic spam-assassin arguments array "$(array_tools quote comma SMTP_SESSION_PIPE_SPAM_ASSASSIN_ARGUMENTS)"
                toml_block add session.data.pipe.dynamic spam-assassin timeout quotes "${SMTP_SESSION_PIPE_SPAM_ASSASSIN_TIMEOUT}"
            fi

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail SMTP inbound milter configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_data_milter_rspamd}")

$(toml_block show "${block_data_milter_rspamd_timeout}")

$(toml_block show "${block_data_milter_rspamd_options}")

$(toml_block show "${block_data_pipe_spam_assassin}")


EOF
        else
            :
        fi
    }

    smtp_configure_queue() {
        config_file="queue.toml"

        if [ ! -d "${SMTP_QUEUE_PATH}" ]; then mkdir -p "${SMTP_QUEUE_PATH}" ; fi
        if [ "$(stat -c %U "${SMTP_QUEUE_PATH}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${SMTP_QUEUE_PATH}" ; fi

         if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add queue path quotes "${SMTP_QUEUE_PATH}"
            toml_block add queue hash "${SMTP_QUEUE_HASH}"

            toml_block add queue.schedule retry array "$(array_tools quote comma SMTP_QUEUE_SCHEDULE_RETRY)"
            toml_block add queue.schedule notify array "$(array_tools quote comma SMTP_QUEUE_SCHEDULE_NOTIFY)"
            toml_block add queue.schedule expire quotes "${SMTP_QUEUE_SCHEDULE_EXPIRE}"

            toml_block add queue.outbound hostname quotes "${SMTP_QUEUE_OUTBOUND_HOSTNAME}"

            SMTP_QUEUE_OUTBOUND_NEXT_HOP=$(echo "${SMTP_QUEUE_OUTBOUND_NEXT_HOP}" | sed "s|default|${DEFAULT_DIRECTORY,,}|g")
            case "${SMTP_MODE,,}" in
                "forward" )
                    SMTP_QUEUE_OUTBOUND_NEXT_HOP=$(echo "${SMTP_QUEUE_OUTBOUND_NEXT_HOP}" | sed "s|local|${smtp_remote_name,,}|g")
                ;;
            esac
            smtp_queue_outbound_next_hop="${SMTP_QUEUE_OUTBOUND_NEXT_HOP}"

            toml_block add queue.outbound next-hop array "$(array_tools noquote plus smtp_queue_outbound_next_hop)"
            toml_block add queue.outbound ip-strategy quotes "${SMTP_QUEUE_OUTBOUND_IP_STRATEGY}"

            toml_block add queue.outbound.tls dane quotes "${SMTP_QUEUE_OUTBOUND_TLS_DANE,,}"
            toml_block add queue.outbound.tls mta-sts quotes "${SMTP_QUEUE_OUTBOUND_TLS_MTA_STS,,}"
            toml_block add queue.outbound.tls starttls quotes "${SMTP_QUEUE_OUTBOUND_TLS_STARTTLS,,}"
            toml_block add queue.outbound.tls allow-invalid-certs "${SMTP_QUEUE_OUTBOUND_TLS_ALLOW_INVALID_CERTS,,}"

            toml_block add queue.outbound.source-ip v4 array "$(array_tools quote comma SMTP_QUEUE_OUTBOUND_SOURCE_IP_V4)"
            toml_block add queue.outbound.source-ip v6 array "$(array_tools quote comma SMTP_QUEUE_OUTBOUND_SOURCE_IP_V6)"

            toml_block add queue.outbound.limits mx "${SMTP_QUEUE_OUTBOUND_LIMITS_MX}"
            toml_block add queue.outbound.limits multihomed "${SMTP_QUEUE_OUTBOUND_LIMITS_MULTIHOMED}"

            toml_block add queue.outbound.timeouts connect quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_CONNECT}"
            toml_block add queue.outbound.timeouts greeting quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_GREETING}"
            toml_block add queue.outbound.timeouts tls quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_TLS}"
            toml_block add queue.outbound.timeouts ehlo quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_EHLO}"
            toml_block add queue.outbound.timeouts mail-from quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_MAIL_FROM}"
            toml_block add queue.outbound.timeouts rcpt-to quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_RCPT_TO}"
            toml_block add queue.outbound.timeouts data quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_DATA}"
            toml_block add queue.outbound.timeouts mta-sts quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_MTA_STS}"

            ## TODO DOUBLE BRACKETS
            toml_block add queue.quota match "${SMTP_QUEUE_QUOTA_MATCH}"
            toml_block add queue.quota key array "$(array_tools quote comma SMTP_QUEUE_QUOTA_KEY)"
            toml_block add queue.quota messages "${SMTP_QUEUE_QUOTA_MESSAGES}"
            toml_block add queue.quota size "${SMTP_QUEUE_QUOTA_SIZE}"

            toml_block add queue.throttle key array "$(array_tools quote comma SMTP_QUEUE_QUOTA_)"
            toml_block add queue.throttle rate quotes "${SMTP_QUEUE_QUOTA_RATE}"
            toml_block add queue.throttle concurrency "${SMTP_QUEUE_QUOTA_CONCURRENCY}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail SMTP server queue configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_queue}")

$(toml_block show "${block_queue_schedule}")

$(toml_block show "${block_queue_outbound}")

$(toml_block show "${block_queue_outbound_tls}")

$(toml_block show "${block_queue_outbound_source_ip}")

$(toml_block show "${block_queue_outbound_limits}")

$(toml_block show "${block_queue_outbound_timeouts}")

### TODO Double Brackets
#\$(toml_block show "#\${block_queue_quota}")

### TODO Double Brackets
#\$(toml_block show "#\${block_queue_throttle}")

[[queue.quota]]
##match = {if = "sender-domain", eq = "foobar.org"}
##key = ["rcpt"]
messages = 100000
size = 10737418240 # 10gb

[[queue.throttle]]
#key = ["rcpt-domain"]
#rate = "100/1h"
concurrency = 5

EOF
        else
            :
        fi
    }

    smtp_configure_remote() {
        case "${SMTP_MODE,,}" in
            "forward" )
                config_file="remote.toml"

                if [ "${SETUP_TYPE,,}" = "auto" ]; then
                    config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
                    smtp_remote_instances=$(set -o posix ; set | sort | grep -P "^SMTP_REMOTE_.*_ADDRESS=" | wc -l)
                    if [ "${smtp_remote_instances}" -eq 1 ]; then
                        smtp_remote_name=$(set -o posix ; set | sort | grep -P "^SMTP_REMOTE_.*_ADDRESS=" | cut -d _ -f 3)
                    elif [ "${smtp_remote_instances}" -lt 1 ]; then
                        print_error "No SMTP Remote configuration found found! - Setup some SMTP_REMOTE_ variables"
                        exit 9
                    else
                        smtp_remote_name=$(set -o posix ; set | sort | grep -P "^SMTP_REMOTE_.*_ADDRESS=" | grep -Pve "^SMTP_REMOTE_LMTP_ADDRESS=" | cut -d _ -f 3)
                    fi

                    populate_variable() {
                        if [ -v "SMTP_REMOTE_${smtp_remote_name^^}_${1^^}" ]; then
                            export smtp_remote_${1,,}="$(printenv | grep "^SMTP_REMOTE_${smtp_remote_name^^}_${1^^}=" | cut -d = -f2-)"
                        else
                            export smtp_remote_${1,,}="$(printenv | grep "^SMTP_REMOTE_LMTP_${1^^}=" | cut -d = -f2-)"
                        fi
                    }

                    populate_variable address
                    populate_variable port
                    populate_variable protocol
                    populate_variable concurrency
                    populate_variable timeout
                    populate_variable tls_implicit
                    populate_variable tls_allow_invalid_certs
                    populate_variable auth_username
                    populate_variable auth_pass

                    toml_block add remote.dynamic ${smtp_remote_name,,} address quotes "${smtp_remote_address}"
                    toml_block add remote.dynamic ${smtp_remote_name,,} port "${smtp_remote_port}"
                    toml_block add remote.dynamic ${smtp_remote_name,,} protocol quotes "${smtp_remote_protocol}"
                    toml_block add remote.dynamic ${smtp_remote_name,,} concurrency "${smtp_remote_concurrency}"
                    toml_block add remote.dynamic ${smtp_remote_name,,} timeout quotes "${smtp_remote_timeout}"

                    toml_block add remote.dynamic.tls ${smtp_remote_name,,} implicit "${smtp_remote_tls_implicit,,}"
                    toml_block add remote.dynamic.tls ${smtp_remote_name,,} allow-invalid-certs "${smtp_remote_tls_allow_invalid_certs,,}"

                    toml_block add remote.dynamic.auth ${smtp_remote_name,,} username quotes "${smtp_remote_auth_username}"
                    toml_block add remote.dynamic.auth ${smtp_remote_name,,} secret quotes "${smtp_remote_auth_pass}"

                    block_smtp_remote="block_remote_${smtp_remote_name,,}"
                    block_smtp_remote_tls="block_remote_${smtp_remote_name,,}_tls"
                    block_smtp_remote_auth="block_remote_${smtp_remote_name,,}_auth"

                    cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
#########################################################
# Stalwart Mail SMTP remote servers configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_smtp_remote}")

$(toml_block show "${!block_smtp_remote_tls}")

$(toml_block show "${!block_smtp_remote_auth}")

EOF
                else
                    :
                fi

            ;;
        esac
    }

    smtp_configure_report() {
        config_file="report.toml"

        if [ ! -d "${REPORTS_PATH}" ]; then mkdir -p "${REPORTS_PATH}" ; fi
        if [ "$(stat -c %U "${REPORTS_PATH}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${REPORTS_PATH}" ; fi

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add report path quotes "${REPORTS_PATH}"
            toml_block add report hash ${REPORTS_HASH}
            toml_block add report submitter "${REPORTS_SUBMITTER}"

            toml_block add report.analysis addresses array "$(array_tools quote comma SMTP_REPORT_ANALYSIS_ADDRESSES)"
            toml_block add report.analysis forward "${SMTP_REPORT_ANALYSIS_FORWARD,,}"
            if [ ! -d "${SMTP_REPORT_ANALYSIS_STORE}" ]; then mkdir -p "${SMTP_REPORT_ANALYSIS_STORE}" ; fi
            if [ "$(stat -c %U "${SMTP_REPORT_ANALYSIS_STORE}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${SMTP_REPORT_ANALYSIS_STORE}" ; fi
            toml_block add report.analysis store quotes "${SMTP_REPORT_ANALYSIS_STORE}"

            toml_block add report.dsn from-name quotes "${SMTP_REPORT_DSN_FROM_NAME}"
            toml_block add report.dsn from-address quotes "${SMTP_REPORT_DSN_FROM_ADDRESS}"
            SMTP_REPORT_DSN_SIGN=$(echo "${SMTP_REPORT_DSN_SIGN/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add report.dsn sign array "$(array_tools quote comma SMTP_REPORT_DSN_SIGN)"

            toml_block add report.dkim from-name quotes "${SMTP_REPORT_DKIM_FROM_NAME}"
            toml_block add report.dkim from-address quotes "${SMTP_REPORT_DKIM_FROM_ADDRESS}"
            toml_block add report.dkim subject quotes "${SMTP_REPORT_DKIM_SUBJECT}"
            toml_block add report.dkim send quotes "${SMTP_REPORT_DKIM_SEND}"
            SMTP_REPORT_DKIM_SIGN=$(echo "${SMTP_REPORT_DKIM_SIGN/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add report.dkim sign array "$(array_tools quote comma SMTP_REPORT_DKIM_SIGN)"

            toml_block add report.spf from-name quotes "${SMTP_REPORT_SPF_FROM_NAME}"
            toml_block add report.spf from-address quotes "${SMTP_REPORT_SPF_FROM_ADDRESS}"
            toml_block add report.spf subject quotes "${SMTP_REPORT_SPF_SUBJECT}"
            toml_block add report.spf send quotes "${SMTP_REPORT_SPF_SEND}"
            SMTP_REPORT_SPF_SIGN=$(echo "${SMTP_REPORT_SPF_SIGN/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add report.spf sign array "$(array_tools quote comma SMTP_REPORT_SPF_SIGN)"

            toml_block add report.dmarc from-name quotes "${SMTP_REPORT_DMARC_FROM_NAME}"
            toml_block add report.dmarc from-address quotes "${SMTP_REPORT_DMARC_FROM_ADDRESS}"
            toml_block add report.dmarc subject quotes "${SMTP_REPORT_DMARC_SUBJECT}"
            toml_block add report.dmarc send quotes "${SMTP_REPORT_DMARC_SEND}"
            SMTP_REPORT_DMARC_SIGN=$(echo "${SMTP_REPORT_DMARC_SIGN/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add report.dmarc sign array "$(array_tools quote comma SMTP_REPORT_DMARC_SIGN)"

            toml_block add report.dmarc.aggregate from-name quotes "${SMTP_REPORT_DMARC_AGGREGATE_FROM_NAME}"
            toml_block add report.dmarc.aggregate from-address quotes "${SMTP_REPORT_DMARC_AGGREGATE_FROM_ADDRESS}"
            toml_block add report.dmarc.aggregate subject quotes "${SMTP_REPORT_DMARC_AGGREGATE}"
            toml_block add report.dmarc.aggregate contact-info quotes "${SMTP_REPORT_DMARC_AGGREGATE_CONTACT_INFO}"
            toml_block add report.dmarc.aggregate send quotes "${SMTP_REPORT_DMARC_AGGREGATE_SEND}"
            toml_block add report.dmarc.aggregate max-size "${SMTP_REPORT_DMARC_AGGREGATE_MAX_SIZE}"
            SMTP_REPORT_DMARC_AGGREGATE_SIGN=$(echo "${SMTP_REPORT_DMARC_AGGREGATE_SIGN/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add report.dmarc.aggregate sign array "$(array_tools quote comma SMTP_REPORT_DMARC_AGGREGATE_SIGN)"

            toml_block add report.tls.aggregate from-name quotes "${SMTP_REPORT_TLS_AGGREGATE_FROM_NAME}"
            toml_block add report.tls.aggregate from-address quotes "${SMTP_REPORT_TLS_AGGREGATE_FROM_ADDRESS}"
            toml_block add report.tls.aggregate org-name quotes "${SMTP_REPORT_TLS_AGGREGATE}"
            toml_block add report.tls.aggregate contact-info quotes "${SMTP_REPORT_TLS_AGGREGATE_CONTACT_INFO}"
            toml_block add report.tls.aggregate send quotes "${SMTP_REPORT_TLS_AGGREGATE_SEND}"
            toml_block add report.tls.aggregate max-size "${SMTP_REPORT_TLS_AGGREGATE_MAX_SIZE}"
            SMTP_REPORT_TLS_AGGREGATE_SIGN=$(echo "${SMTP_REPORT_TLS_AGGREGATE_SIGN/DEFAULT_SMTP_SIGNATURE/${DEFAULT_SIGNATURE,,}}")
            toml_block add report.tls.aggregate sign array "$(array_tools quote comma SMTP_REPORT_TLS_AGGREGATE_SIGN)"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail SMTP Reporting configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_report}")

$(toml_block show "${block_report_analysis}")

$(toml_block show "${block_report_dsn}")

$(toml_block show "${block_report_dkim}")

$(toml_block show "${block_report_spf}")

$(toml_block show "${block_report_dmarc}")

$(toml_block show "${block_report_dmarc_aggregate}")

$(toml_block show "${block_report_tls_aggregate}")

EOF
        else
            :
        fi
    }

    smtp_configure_resolver() {
        config_file="resolver.toml"
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add resolver type quotes "${SMTP_RESOLVER_TYPE}"
            toml_block add resolver preserve-intermediates "${SMTP_RESOLVER_PRESERVE_INTERMEDIATES,,}"
            toml_block add resolver concurrency "${SMTP_RESOLVER_CONCURRENCY}"
            toml_block add resolver timeout quotes "${SMTP_RESOLVER_TIMEOUT}"
            toml_block add resolver attempts "${SMTP_RESOLVER_ATTEMPTS}"
            toml_block add resolver try-tcp-on-error "${SMTP_RESOLVER_TRY_TCP_ON_ERROR,,}"
            array_tools verify transform SMTP_RESOLVER_PUBLIC_SUFFIX /assets/stalwart/config/spamfilter/maps/
            toml_block add resolver public-suffix array "$(array_tools quote comma SMTP_RESOLVER_PUBLIC_SUFFIX)"
            toml_block add resolver.cache txt "${SMTP_RESOLVER_CACHE_TXT}"
            toml_block add resolver.cache mx "${SMTP_RESOLVER_CACHE_MX}"
            toml_block add resolver.cache ipv4 "${SMTP_RESOLVER_CACHE_IPV4}"
            toml_block add resolver.cache ipv6 "${SMTP_RESOLVER_CACHE_IPV6}"
            toml_block add resolver.cache ptr "${SMTP_RESOLVER_CACHE_PTR}"
            toml_block add resolver.cache tlsa "${SMTP_RESOLVER_CACHE_TLSA}"
            toml_block add resolver.cache mta-sts "${SMTP_RESOLVER_CACHE_MTA_STS}"

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail SMTP Resolver configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_resolver}")

$(toml_block show "${block_resolver_cache}")

EOF
        else
            :
        fi
    }

    smtp_configure_session() {
        config_file="session.toml"
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add session timeout quotes "${SMTP_SESSION_TIMEOUT}"
            toml_block add session transfer-limit "${SMTP_SESSION_TRANSFER_LIMIT}"
            toml_block add session duration quotes "${SMTP_SESSION_DURATION}"

            toml_block add session.connect script quotes "${SMTP_SESSION_CONNECT_SCRIPT}"

            toml_block add session.ehlo require "${SMTP_SESSION_EHLO_REQUIRE,,}"
            toml_block add session.ehlo reject-non-fqdn array "$(array_tools noquote plus SMTP_SESSION_EHLO_REJECT_NON_FQDN)"
            toml_block add session.ehlo script quotes "${SMTP_SESSION_EHLO_SCRIPT}"

            toml_block add session.extensions pipelining "${SMTP_SESSION_EXTENSIONS_PIPELINING,,}"
            toml_block add session.extensions chunking "${SMTP_SESSION_EXTENSIONS_CHUNKING,,}"
            toml_block add session.extensions requiretls "${SMTP_SESSION_EXTENSIONS_REQUIRETLS,,}"
            toml_block add session.extensions nosoliciting quotes "${SMTP_SESSION_EXTENSIONS_NO_SOLICITING}"
            toml_block add session.extensions dsn array "$(array_tools noquote plus SMTP_SESSION_EXTENSIONS_DSN)"
            toml_block add session.extensions expn array "$(array_tools noquote plus SMTP_SESSION_EXTENSIONS_EXPN)"
            toml_block add session.extensions vrfy array "$(array_tools noquote plus SMTP_SESSION_EXTENSIONS_VRFY)"
            toml_block add session.extensions future-release array "$(array_tools noquote plus SMTP_SESSION_EXTENSIONS_FUTURE_RELEASE)"
            toml_block add session.extensions delivery-by array "$(array_tools noquote plus SMTP_SESSION_EXTENSIONS_DELIVER_BY)"
            toml_block add session.extensions mt-priority array "$(array_tools noquote plus SMTP_SESSION_EXTENSIONS_MT_PRIORITY)"

            toml_block add session.auth mechanisms array "$(array_tools noquote plus SMTP_SESSION_AUTH_MECHANISMS)"
            smtp_session_auth_directory=$(echo "${SMTP_SESSION_AUTH_DIRECTORY}" | sed "s|default|${DEFAULT_DIRECTORY,,}|g")
            toml_block add session.auth directory array "$(array_tools noquote plus smtp_session_auth_directory)"
            toml_block add session.auth require array "$(array_tools noquote plus SMTP_SESSION_AUTH_REQUIRE)"
            toml_block add session.auth allow-plain-text "${SMTP_SESSION_AUTH_ALLOW_PLAIN_TEXT,,}"
            toml_block add session.auth must-match-sender "${SMTP_SESSION_AUTH_MUST_MATCH_SENDER,,}"

            toml_block add session.auth.errors total "${SMTP_SESSION_AUTH_ERRORS_TOTAL}"
            toml_block add session.auth.errors wait quotes "${SMTP_SESSION_AUTH_ERRORS_WAIT}"

            toml_block add session.mail script quotes "${SMTP_SESSION_MAIL_SCRIPT}"
            toml_block add session.mail rewrite "${SMTP_SESSION_MAIL_REWRITE}"

            toml_block add session.rcpt script quotes "${SMTP_SESSION_RCPT_SCRIPT}"
            toml_block add session.rcpt relay array "$(array_tools noquote plus SMTP_SESSION_RCPT_RELAY)"
            toml_block add session.rcpt rewrite "${SMTP_SESSION_RCPT_REWRITE}"
            toml_block add session.rcpt max-recipients "${SMTP_SESSION_RCPT_MAX_RECIPIENTS}"

            smtp_session_rcpt_directory=${SMTP_SESSION_RCPT_DIRECTORY:-"${DEFAULT_DIRECTORY,,}"}
            toml_block add session.rcpt directory quotes "${smtp_session_rcpt_directory}"

            toml_block add session.rcpt.errors total "${SMTP_SESSION_RCPT_ERRORS_TOTAL}"
            toml_block add session.rcpt.errors wait quotes "${SMTP_SESSION_RCPT_ERRORS_WAIT}"

            toml_block add session.data script array "$(array_tools noquote comma SMTP_SESSION_DATA_SCRIPT)"

            toml_block add session.data.limits messages "${SMTP_SESSION_DATA_LIMITS_MESSAGES}"
            toml_block add session.data.limits size "${SMTP_SESSION_DATA_LIMITS_SIZE}"
            toml_block add session.data.limits received-headers "${SMTP_SESSION_DATA_LIMITS_RECEIVED_HEADERS}"

            toml_block add session.data.add-headers received array "$(array_tools noquote plus SMTP_SESSION_DATA_ADDHEADERS_RECEIVED)"
            toml_block add session.data.add-headers received-spf array "$(array_tools noquote plus SMTP_SESSION_DATA_ADDHEADERS_RECEIVED_SPF)"
            toml_block add session.data.add-headers auth-results array "$(array_tools noquote plus SMTP_SESSION_DATA_ADDHEADERS_AUTH_RESULTS)"
            toml_block add session.data.add-headers message-id array "$(array_tools noquote plus SMTP_SESSION_DATA_ADDHEADERS_MESSAGE_ID)"
            toml_block add session.data.add-headers date array "$(array_tools noquote plus SMTP_SESSION_DATA_ADDHEADERS_DATE)"
            toml_block add session.data.add-headers return-path "${SMTP_SESSION_DATA_ADDHEADERS_RETURN_PATH,,}"

            ## TODO Need to support multiple blocks with same name
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"


            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail SMTP configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

#############################################
# Stalwart Mail SMTP inbound session configuration
#############################################

$(toml_block show "${block_session}")

$(toml_block show "${block_session_connect}")

$(toml_block show "${block_session_ehlo}")

$(toml_block show "${block_session_extensions}")

$(toml_block show "${block_session_auth}")

$(toml_block show "${block_session_auth_errors}")

$(toml_block show "${block_session_mail}")

$(toml_block show "${block_session_rcpt}")

$(toml_block show "${block_session_rcpt_errors}")

$(toml_block show "${block_session_data}")

$(toml_block show "${block_session_data_limits}")

$(toml_block show "${block_session_data_add_headers}")

## TODO Support multiple blocks
[[session.throttle]]
#match = {if = "remote-ip", eq = "10.0.0.1"}
key = ["remote-ip"]
concurrency = 5
#rate = "5/1h"

[[session.throttle]]
key = ["sender-domain", "rcpt"]
rate = "25/1h"

EOF
        else
            :
        fi
    }

    smtp_configure_signature() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            local smtp_configure_signature_default

            smtp_signature_instances=$(set -o posix ; set | sort -u | grep -P "^SMTP_SIGNATURE_([A-Z0-9]+)_SELECTOR=" | grep -Pve "^SMTP_SIGNATURE_DEFAULT_SELECTOR="| wc -l)
            if [ "${smtp_signature_instances}" -eq 1 ]; then
                smtp_signature_name=$(set -o posix ; set | sort | grep -P "^SMTP_SIGNATURE_.*_SELECTOR=" | grep -Pve "^SMTP_SIGNATURE_DEFAULT_SELECTOR=" | cut -d _ -f 3)
                DEFAULT_SIGNATURE="${SMTP_SIGNATURE_NAME^^}"
                smtp_configure_signature_default=false
            elif [ "${smtp_signature_instances}" -lt 1 ]; then
                DEFAULT_SIGNATURE="DEFAULT"
                smtp_configure_signature_default=true
            else
                if [ -z "${DEFAULT_SIGNATURE}" ]; then
                    print_error "[smtp_configure_signature] Multiple SMTP signatures detected - Set DEFAULT_SIGNATURE environment variable"
                    exit 9
                fi
                DEFAULT_SIGNATURE="${DEFAULT_SIGNATURE^^}"
                smtp_configure_signature_default=false
            fi

            for signature_instance in $(set -o posix; set | sort -u | grep -P "^SMTP_SIGNATURE_([A-Z0-9]+)_SELECTOR=") ; do
                signature_name="$(echo "${signature_instance}" | cut -d _ -f3)"

                populate_variable() {
                    if [ -v "SMTP_SIGNATURE_${signature_name^^}_${1^^}" ]; then
                        export signature_${1,,}="$(printenv | grep "^SMTP_SIGNATURE_${signature_name^^}_${1^^}=" | cut -d = -f2-)"
                    else
                        export signature_${1,,}="$(printenv | grep "^SMTP_SIGNATURE_DEFAULT_${1^^}=" | cut -d = -f2-)"
                    fi
                }

                if var_false "${smtp_configure_signature_default}" && [ "${signature_name^^}" = "DEFAULT" ] ; then
                    print_debug "[smtp_configure_signature] Skipping building default signature configuration"
                else
                    config_file="signature_${signature_name,,}.toml"
                    config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

                    populate_variable public_key
                    populate_variable private_key
                    populate_variable domain
                    populate_variable selector
                    populate_variable headers
                    populate_variable key_type
                    populate_variable key_size
                    populate_variable algorithm
                    populate_variable canonicalization
                    populate_variable expire
                    populate_variable third_party
                    populate_variable third_party_algo
                    populate_variable auid
                    populate_variable set_body_length
                    populate_variable report

                    dkim generate "${smtp_signature_selector}" "${smtp_signature_domain}" "${smtp_signature_key_type}" "${smtp_signature_key_size}"

                    toml_block add signature.dynamic ${smtp_signature_name,,} public-key quotes "${smtp_signature_public_key}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} private-key quotes "${smtp_signature_private_key}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} domain quotes "${smtp_signature_domain}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} selector quotes "${smtp_signature_selector}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} headers array "$(array_tools quote comma smtp_signature_headers)"
                    toml_block add signature.dynamic ${smtp_signature_name,,} algorithm quotes "${smtp_signature_algorithm}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} canonicalization quotes "${smtp_signature_canonicalization}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} expire quotes "${smtp_signature_expire}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} third-party quotes "${third_party}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} third-party-algo quotes "${smtp_signature_third_party_algo}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} auid quotes "${smtp_signature_auid}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} set-body-length "${smtp_signature_set_body_length,,}"
                    toml_block add signature.dynamic ${smtp_signature_name,,} report "${smtp_signature_report,,}"

                    block_smtp_signature="block_signature_${smtp_signature_name,,}"

                    cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail DKIM & ARC signature '${signature_name}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_smtp_signature}")

EOF
                fi
            done
        else
            :
        fi
    }

    smtp_configure_spamfilter() {
        config_file="spamfilter.toml"
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
            chown "${SERVER_USER}":"${SERVER_GROUP}" "${DATA_PATH}"/spamfilter

            toml_block add store.dynamic spam/free-domains type quotes "${SPAMFILTER_STORE_FREEDOMAINS_TYPE}"
            toml_block add store.dynamic spam/free-domains format quotes "${SPAMFILTER_STORE_FREEDOMAINS_FORMAT}"
            toml_block add store.dynamic spam/free-domains comment quotes "${SPAMFILTER_STORE_FREEDOMAINS_COMMENT}"
            array_tools verify transform SPAMFILTER_STORE_FREEDOMAINS_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/free-domains values array "$(array_tools quote comma SPAMFILTER_STORE_FREEDOMAINS_VALUES)"

            toml_block add store.dynamic spam/disposable-domains type quotes "${SPAMFILTER_STORE_DISPOSABLEDOMAINS_TYPE}"
            toml_block add store.dynamic spam/disposable-domains format quotes "${SPAMFILTER_STORE_DISPOSABLEDOMAINS_FORMAT}"
            toml_block add store.dynamic spam/disposable-domains comment quotes "${SPAMFILTER_STORE_DISPOSABLEDOMAINS_COMMENT}"
            array_tools verify transform SPAMFILTER_STORE_DISPOSABLEDOMAINS_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/disposable-domains values array "$(array_tools quote comma SPAMFILTER_STORE_DISPOSABLEDOMAINS_VALUES)"

            toml_block add store.dynamic spam/redirectors type quotes "${SPAMFILTER_STORE_REDIRECTORS_TYPE}"
            toml_block add store.dynamic spam/redirectors format quotes "${SPAMFILTER_STORE_REDIRECTORS_FORMAT}"
            toml_block add store.dynamic spam/redirectors comment quotes "${SPAMFILTER_STORE_REDIRECTORS_COMMENT}"
            array_tools verify transform SPAMFILTER_STORE_REDIRECTORS_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/redirectors values array "$(array_tools quote comma SPAMFILTER_STORE_REDIRECTORS_VALUES)"

            toml_block add store.dynamic spam/domains-allow type quotes "${SPAMFILTER_STORE_DOMAINSALLOW_TYPE}"
            toml_block add store.dynamic spam/domains-allow format quotes "${SPAMFILTER_STORE_DOMAINSALLOW_FORMAT}"
            toml_block add store.dynamic spam/domains-allow comment quotes "${SPAMFILTER_STORE_DOMAINSALLOW_COMMENT}"
            array_tools verify transform SPAMFILTER_STORE_DOMAINSALLOW_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/domains-allow values array "$(array_tools quote comma SPAMFILTER_STORE_DOMAINSALLOW_VALUES)"

            toml_block add store.dynamic spam/dmarc-allow type quotes "${SPAMFILTER_STORE_DMARCALLOW_TYPE}"
            toml_block add store.dynamic spam/dmarc-allow format quotes "${SPAMFILTER_STORE_DMARCALLOW_FORMAT}"
            toml_block add store.dynamic spam/dmarc-allow comment quotes "${SPAMFILTER_STORE_DMARCALLOW_COMMENT}"
            array_tools verify transform SPAMFILTER_STORE_DMARCALLOW_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/dmarc-allow values array "$(array_tools quote comma SPAMFILTER_STORE_DMARCALLOW_VALUES)"

            toml_block add store.dynamic spam/spf-dkim-allow type quotes "${SPAMFILTER_STORE_SPFDKIMALLOW_TYPE}"
            toml_block add store.dynamic spam/spf-dkim-allow format quotes "${SPAMFILTER_STORE_SPFDKIMALLOW_FORMAT}"
            toml_block add store.dynamic spam/spf-dkim-allow comment quotes "${SPAMFILTER_STORE_SPFDKIMALLOW_COMMENT}"
            array_tools verify transform SPAMFILTER_STORE_SPFDKIMALLOW_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/spf-dkim-allow values array "$(array_tools quote comma SPAMFILTER_STORE_SPFDKIMALLOW_VALUES)"

            toml_block add store.dynamic spam/mime-types type quotes "${SPAMFILTER_STORE_MIMETYPES_TYPE}"
            toml_block add store.dynamic spam/mime-types format quotes "${SPAMFILTER_STORE_MIMETYPES_FORMAT}"
            toml_block add store.dynamic spam/mime-types comment quotes "${SPAMFILTER_STORE_MIMETYPES_COMMENT}"
            array_tools verify transform SPAMFILTER_STORE_MIMETYPES_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/mime-types values array "$(array_tools quote comma SPAMFILTER_STORE_MIMETYPES_VALUES)"

            toml_block add store.dynamic spam/trap-address type quotes "${SPAMFILTER_STORE_TRAPADDRESS_TYPE}"
            toml_block add store.dynamic spam/trap-address format quotes "${SPAMFILTER_STORE_TRAPADDRESS_FORMAT}"
            toml_block add store.dynamic spam/trap-address comment quotes "${SPAMFILTER_STORE_TRAPADDRESS_COMMENT}"
            array_tools verify transform SPAMFILTER_STORE_TRAPADDRESS_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/trap-address values array "$(array_tools quote comma SPAMFILTER_STORE_TRAPADDRESS_VALUES)"

            toml_block add store.dynamic spam/scores type quotes "${SPAMFILTER_STORE_SCORES_TYPE}"
            toml_block add store.dynamic spam/scores format quotes "${SPAMFILTER_STORE_SCORES_FORMAT}"
            array_tools verify transform SPAMFILTER_STORE_SCORES_VALUES /assets/stalwart/config/spamfilter/maps/
            toml_block add store.dynamic spam/scores values array "$(array_tools quote comma SPAMFILTER_STORE_SCORES_VALUES)"

            local block_sieve_trusted_scripts
            if var_true "${ENABLE_SIEVE}" ; then
                array_tools verify transform SPAMFILTER_SCRIPTS_FILTER /assets/stalwart/config/spamfilter/scripts/
                toml_block add sieve.trusted.scripts spam-filter array "$(array_tools quote comma SPAMFILTER_SCRIPTS_FILTER)"
                array_tools verify transform SPAMFILTER_SCRIPTS_TRACK_REPLIES /assets/stalwart/config/spamfilter/scripts/
                toml_block add sieve.trusted.scripts track-replies array "$(array_tools quote comma SPAMFILTER_SCRIPTS_TRACK_REPLIES)"
                array_tools verify transform SPAMFILTER_SCRIPTS_GREYLIST /assets/stalwart/config/spamfilter/scripts/
                toml_block add sieve.trusted.scripts greylist array "$(array_tools quote comma SPAMFILTER_SCRIPTS_GREYLIST)"
            fi

            cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Stalwart Mail Spam and Phishing configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${block_store_free_domains}")

$(toml_block show "${block_store_disposable_domains}")

$(toml_block show "${block_store_redirectors}")

$(toml_block show "${block_store_domains_allow}")

$(toml_block show "${block_store_dmarc_allow}")

$(toml_block show "${block_store_spf_dkim_allow}")

$(toml_block show "${block_store_mime_types}")

$(toml_block show "${block_store_trap_address}")

$(toml_block show "${block_store_scores}")

$(toml_block show "${block_sieve_trusted_scripts}")

EOF

            unset block_sieve_trusted_scripts

            update_spam_config() {
                sudo -u "${SERVER_USER}" sed -i "s|\"$1\" \".*\"|\"$1\" \"$2\"|g" $3
            }

            if [ -f "${DATA_PATH}"/spamfilter/scripts/config.sieve ] ; then
                spamfilter_config_file="${DATA_PATH}/spamfilter/scripts/config.sieve"
            elif [ -f "/assets/stalwart/config/spamfilter/scripts/config.sieve" ]; then
                spamfilter_config_file="/assets/stalwart/config/spamfilter/scripts/config.sieve"
            else
                print_error "Can't configure SPAM Filter as I don't know what the config file is"
            fi

            update_spam_config ADD_HEADER_SPAM "${SPAMFILTER_ADD_X_SPAM_STATUS_HEADER,,}" "${spamfilter_config_file}"
            update_spam_config ADD_HEADER_SPAM_RESULT "${SPAMFILTER_ADD_X_SPAM_RESULT_HEADER,,}" "${spamfilter_config_file}"
            update_spam_config AUTOLEARN_REPLIES_HAM "${SPAMFILTER_AUTOLEARN_REPLIES_HAM,,}" "${spamfilter_config_file}"
            update_spam_config AUTOLEARN_ENABLE "${SPAMFILTER_ENABLE_AUTOLEARN,,}" "${spamfilter_config_file}"
            update_spam_config AUTOLEARN_HAM_THRESHOLD "${SPAMFILTER_AUTOLEARN_THRESHOLD_HAM}" "${spamfilter_config_file}"
            update_spam_config AUTOLEARN_SPAM_THRESHOLD "${SPAMFILTER_AUTOLEARN_THRESHOLD_SPAM}" "${spamfilter_config_file}"
            update_spam_config AUTOLEARN_SPAM_HAM_BALANCE "${SPAMFILTER_AUTOLEARN_DIFFERENCE_SPAM_HAM}" "${spamfilter_config_file}"
            update_spam_config SCORE_SPAM_THRESHOLD "${SPAMFILTER_THRESHOLD_SPAM}" "${spamfilter_config_file}"
            update_spam_config SCORE_DISCARD_THRESHOLD "${SPAMFILTER_THRESHOLD_DISCARD}" "${spamfilter_config_file}"
            update_spam_config SCORE_REJECT_THRESHOLD "${SPAMFILTER_THRESHOLD_REJECT}" "${spamfilter_config_file}"
            update_spam_config DOMAIN_DIRECTORY "${SPAMFILTER_DIRECTORY}" "${spamfilter_config_file}"
            update_spam_config SPAM_DB "${SPAMFILTER_STORE_BAYESIAN}" "${spamfilter_config_file}"
            if var_true "${SPAMFILTER_ENABLE_GREYLISTING}" ; then SMTP_SESSION_RCPT_SCRIPT="greylist" ; fi

            ## AllowDMARC domains
            if [ -n "${SPAMFILTER_ALLOW_DMARC}" ]; then
                for allowdmarc_entry in $(echo "${SPAMFILTER_ALLOW_DMARC}" | tr ',' '\n') ; do
                    allowdmarc_value=$(echo "${allowdmarc_entry}" | awk '{ print $1 }')

                    if [ -f "${DATA_PATH}"/spamfilter/maps/allow_dmarc.list ] ; then
                        spamfilter_allowdmarc_file="${DATA_PATH}/spamfilter/maps/allow_dmarc.list"
                    elif [ -f "/assets/stalwart/config/spamfilter/maps/allow_dmarc.list" ]; then
                        spamfilter_allowdmarc_file="/assets/stalwart/config/spamfilter/maps/allow_dmarc.list"
                    else
                        print_error "Can't configure SPAM Filter Allow DMARC as I don't know what the Allow DMARC file is"
                    fi

                    if [[ "${allowdmarc_value,,}" == -* ]]; then
                        print_debug "[spamfilter] [allowdmarc] Removing '${allowdmarc_value}' from '${spamfilter_allowdmarc_file}'"
                        sudo -u "${SERVER_USER}" sed -i "/^${allowdmarc_value}/d" "${spamfilter_allowdmarc_file}"
                    else
                        if ! grep -Pq "^${allowdmarc_value}" "${spamfilter_allowdmarc_file}"; then
                            print_debug "[spamfilter] [allowdmarc] '${allowdmarc_value}' already exists in '${spamfilter_allowdmarc_file}'"
                        else
                            print_debug "[spamfilter] [allowdmarc] Adding '${allowdmarc_value}' to '${spamfilter_allowdmarc_file}'"
                            sudo -u "${SERVER_USER}" sed -i "$a${allowdmarc_value}" "${spamfilter_allowdmarc_file}"
                        fi
                    fi
                done
                sudo -u "${SERVER_USER}" sort -d -u "${spamfilter_allowdmarc_file}" -o "${spamfilter_allowdmarc_file}"
            fi

            if [ -n "${SPAMFILTER_ALLOW_DOMAINS}" ]; then
                ## Allow domains
                for allowdomains_entry in $(echo "${SPAMFILTER_ALLOW_DOMAINS}" | tr ',' '\n') ; do
                    allowdomains_value=$(echo "${allowdomains_entry}" | awk '{ print $1 }')

                    if [ -f "${DATA_PATH}"/spamfilter/maps/allow_domains.list ] ; then
                        spamfilter_allowdomains_file="${DATA_PATH}/spamfilter/maps/allow_domains.list"
                    elif [ -f "/assets/stalwart/config/spamfilter/maps/allow_domains.list" ]; then
                        spamfilter_allowdomains_file="/assets/stalwart/config/spamfilter/maps/allow_domains.list"
                    else
                        print_error "Can't configure SPAM Filter Allow Domains as I don't know what the Allow Domains file is"
                    fi

                    if [[ "${allowdomains_value,,}" == -* ]]; then
                        print_debug "[spamfilter] [allowdomains] Removing '${allowdomains_value}' from '${spamfilter_allowdomains_file}'"
                        sudo -u "${SERVER_USER}" sed -i "/^${allowdomains_value}/d" "${spamfilter_allowdomains_file}"
                    else
                        if ! grep -Pq "^${allowdmarc_value}" "${spamfilter_allowdomains_file}"; then
                            print_debug "[spamfilter] [allowdomains] '${allowdomains_value}' already exists in '${spamfilter_allowdomains_file}'"
                        else
                            print_debug "[spamfilter] [allowdomains] Adding '${allowdmarc_value}' to '${spamfilter_allowdomains_file}'"
                            sudo -u "${SERVER_USER}" sed -i "$a${allowdomains_value}" "${spamfilter_allowdomains_file}"
                        fi
                    fi
                done
                sudo -u "${SERVER_USER}" sort -d -u "${spamfilter_allowdomains_file}" -o "${spamfilter_allowdomains_file}"
            fi

            if [ -n "${SPAMFILTER_ALLOW_PHISHING}" ]; then
                ## Allowphishing domains
                for allowphishing_entry in $(echo "${SPAMFILTER_ALLOW_PHISHING}" | tr ',' '\n') ; do
                    allowphishing_value=$(echo "${allowphishing_entry}" | awk '{ print $1 }')

                    if [ -f "${DATA_PATH}"/spamfilter/maps/allow_phishing.list ] ; then
                        spamfilter_allowphishing_file="${DATA_PATH}/spamfilter/maps/allow_phishing.list"
                    elif [ -f "/assets/stalwart/config/spamfilter/maps/allow_phishing.list" ]; then
                        spamfilter_allowphishing_file="/assets/stalwart/config/spamfilter/maps/allow_phishing.list"
                    else
                        print_error "Can't configure SPAM Filter Allow phishing as I don't know what the Allow phishing file is"
                    fi

                    if [[ "${allowphishing_value,,}" == -* ]]; then
                        print_debug "[spamfilter] [allowphishing] Removing '${allowphishing_value}' from '${spamfilter_allowphishing_file}'"
                        sudo -u "${SERVER_USER}" sed -i "/^${allowphishing_value}/d" "${spamfilter_allowphishing_file}"
                    else
                        if ! grep -Pq "^${allowphishing_value}" "${spamfilter_allowphishing_file}"; then
                            print_debug "[spamfilter] [allowphishing] '${allowphishing_value}' already exists in '${spamfilter_allowphishing_file}'"
                        else
                            print_debug "[spamfilter] [allowphishing] Adding '${allowphishing_value}' to '${spamfilter_allowphishing_file}'"
                            sudo -u "${SERVER_USER}" sed -i "$a${allowphishing_value}" "${spamfilter_allowphishing_file}"
                        fi
                    fi
                done
                sudo -u "${SERVER_USER}" sort -d -u "${spamfilter_allowphishing_file}" -o "${spamfilter_allowphishing_file}"
            fi

            if [ -n "${SPAMFILTER_ALLOW_SPFDKIM}" ]; then
                ## Allow SPF DKIM domains
                for allowspfdkim_entry in $(echo "${SPAMFILTER_ALLOW_SPFDKIM}" | tr ',' '\n') ; do
                    allowspfdkim_value=$(echo "${allowspfdkim_entry}" | awk '{ print $1 }')

                    if [ -f "${DATA_PATH}"/spamfilter/maps/allow_spf_dkim.list ] ; then
                        spamfilter_allowspfdkim_file="${DATA_PATH}/spamfilter/maps/allow_spf_dkim.list"
                    elif [ -f "/assets/stalwart/config/spamfilter/maps/allow_spf_dkim.list" ]; then
                        spamfilter_allowspfdkim_file="/assets/stalwart/config/spamfilter/maps/allow_spf_dkim.list"
                    else
                        print_error "Can't configure SPAM Filter Allow spfdkim as I don't know what the Allow spfdkim file is"
                    fi

                    if [[ "${allowspfdkim_value,,}" == -* ]]; then
                        print_debug "[spamfilter] [allowspfdkim] Removing '${allowspfdkim_value}' from '${spamfilter_allowspfdkim_file}'"
                        sudo -u "${SERVER_USER}" sed -i "/^${allowspfdkim_value}/d" "${spamfilter_allowspfdkim_file}"
                    else
                        if ! grep -Pq "^${allowspfdkim_value}" "${spamfilter_allowspfdkim_file}"; then
                            print_debug "[spamfilter] [allowspfdkim] '${allowspfdkim_value}' already exists in '${spamfilter_allowspfdkim_file}'"
                        else
                            print_debug "[spamfilter] [allowspfdkim] Adding '${allowspfdkim_value}' to '${spamfilter_allowspfdkim_file}'"
                            sudo -u "${SERVER_USER}" sed -i "$a${allowspfdkim_value}" "${spamfilter_allowspfdkim_file}"
                        fi
                    fi
                done
                sudo -u "${SERVER_USER}" sort -d -u "${spamfilter_allowspfdkim_file}" -o "${spamfilter_allowspfdkim_file}"
            fi

            if [ -n "${SPAMFILTER_MIMETYPE}" ]; then
                ## MIME Types
                for mime_entry in $(echo "${SPAMFILTER_MIMETYPE}" | tr ',' '\n') ; do
                    mime_type=$(echo "${mime_entry}" | awk '{ print $1 }')
                    mime_value=$(echo "${mime_entry}" | awk '{ print $1 }')

                    if [ -f "${DATA_PATH}"/spamfilter/maps/mime_types.map ] ; then
                        spamfilter_mimetypes_file="${DATA_PATH}/spamfilter/maps/mime_types.map"
                    elif [ -f "/assets/stalwart/config/spamfilter/maps/mime_types.map" ]; then
                        spamfilter_mimetypes_file="/assets/stalwart/config/spamfilter/maps/mimetypes.map"
                    else
                        print_error "Can't configure SPAM Filter MIME Types as I don't know what the mimetypes file is"
                    fi

                    case "${mime_value,,}" in
                        null )
                            print_debug "[spamfilter] [mimetypes] Removing ${mime_type} from file entirely"
                            sudo -u "${SERVER_USER}" sed -i "/^${mime_type}/d" "${spamfilter_mimetypes_file}"
                        ;;
                        * )
                            if grep -Pq "^${mime_type}" "${spamfilter_mimetypes_file}"; then
                                print_debug "[spamfilter] [mimetypes] Adjusting '${mime_type}' to '${mime_value}'"
                                sudo -u "${SERVER_USER}" sed -i "s|^${mime_type} .*|${mime_type} ${mime_value}|g" "${spamfilter_mimetypes_file}"
                            else
                                print_debug "[spamfilter] [mimetypes] Adding '${mime_type}' with '${mime_value}'"
                                sudo -u "${SERVER_USER}" sed -i "$a${mime_type} ${mime_value}" "${spamfilter_mimetypes_file}"
                            fi
                        ;;
                    esac
                done
                sudo -u "${SERVER_USER}" sort -d -u "${spamfilter_mimetypes_file}" -o "${spamfilter_mimetypes_file}"
            fi

            if [ "$(set -o posix ; set | sort | uniq | grep -cP "^SPAMFILTER_SCORE_.*=")" -gt 1 ]; then
                ## Scores
                for score_entry in $(set -o posix ; set ; sort | uniq | grep -P "^SPAMFILTER_SCORE_.*=") ; do
                    score_type=$(echo "${score_entry}" | cut -d = -f1)
                    score_value=$(echo "${score_entry}" | cut -d = -f2)

                    if [ -f "${DATA_PATH}"/spamfilter/maps/scores.map ] ; then
                        spamfilter_score_file="${DATA_PATH}/spamfilter/maps/scores.map"
                    elif [ -f "/assets/stalwart/config/spamfilter/maps/scores.map" ]; then
                        spamfilter_score_file="/assets/stalwart/config/spamfilter/maps/scores.map"
                    else
                        print_error "Can't configure SPAM Filter scores as I don't know what the score file is"
                    fi

                    case "${score_value,,}" in
                        null )
                            print_debug "[spamfilter] [scores] Removing ${score_type} from file entirely"
                            sudo -u "${SERVER_USER}" sed -i "/^${score_type}/d" "${spamfilter_score_file}"
                        ;;
                        * )
                            if grep -Pq "^${score_type}" "${spamfilter_score_file}"; then
                                print_debug "[spamfilter] [scores] Adjusting '${score_type}' to '${score_value}'"
                                sudo -u "${SERVER_USER}" sed -i "s|^${score_type} .*|${score_type} ${score_value}|g" "${spamfilter_score_file}"
                            else
                                print_debug "[spamfilter] [scores] Adding '${score_type}' with '${score_value}'"
                                sudo -u "${SERVER_USER}" sed -i "$a${score_type} ${score_value}" "${spamfilter_score_file}"
                            fi
                        ;;
                    esac
                done
                sudo -u "${SERVER_USER}" sort -d -u "${spamfilter_score_file}" -o "${spamfilter_score_file}"
            fi

            if [ -n "${SPAMFILTER_SPAMTRAP}" ]; then
                ## SPAMTrap
                for spamtrap_entry in $(echo "${SPAMFILTER_SPAMTRAP}" | tr ',' '\n') ; do
                    spamtrap_value=$(echo "${spamtrap_entry}" | awk '{ print $1 }')

                    if [ -f "${DATA_PATH}"/spamfilter/maps/spam_trap.list ] ; then
                        spamfilter_spamtrap_file="${DATA_PATH}/spamfilter/maps/spam_trap.list"
                    elif [ -f "/assets/stalwart/config/spamfilter/maps/spam_trap.list" ]; then
                        spamfilter_spamtrap_file="/assets/stalwart/config/spamfilter/maps/spam_trap.list"
                    else
                        print_error "Can't configure SPAM Filter  spamtrap as I don't know what the  spamtrap file is"
                    fi

                    if [[ "${spamtrap_value,,}" == -* ]]; then
                        print_debug "[spamfilter] [spamtrap] Removing '${spamtrap_value}' from '${spamfilter_spamtrap_file}'"
                        sudo -u "${SERVER_USER}" sed -i "/^${spamtrap_value}/d" "${spamfilter_spamtrap_file}"
                    else
                        if ! grep -Pq "^${spamtrap_value}" "${spamfilter_spamtrap_file}"; then
                            print_debug "[spamfilter] [spamtrap] '${spamtrap_value}' already exists in '${spamfilter_spamtrap_file}'"
                        else
                            print_debug "[spamfilter] [spamtrap] Adding '${spamtrap_value}' to '${spamfilter_spamtrap_file}'"
                            sudo -u "${SERVER_USER}" sed -i "$a${spamtrap_value}" "${spamfilter_spamtrap_file}"
                        fi
                    fi
                done
                sudo -u "${SERVER_USER}" sort -d -u "${spamfilter_spamtrap_file}" -o "${spamfilter_spamtrap_file}"
            fi
        else
            :
        fi
    }

    ## WARN Keep in this order
    if var_true ${SMTP_ENABLE_LISTENER} ; then smtp_configure_listener; fi      ## Enable SMTP daemon services
    if var_true ${SMTP_ENABLE_REMOTE} ; then smtp_configure_remote; fi          ## Enable remote message processing
    if var_true ${SMTP_ENABLE_SIGNATURE} ; then smtp_configure_signature; fi    ## Enable DKIM, ARC Signing of messages
    if var_true ${SMTP_ENABLE_AUTH} ; then smtp_configure_auth; fi              ## Define what this is for
    if var_true ${SMTP_ENABLE_MILTER} ; then smtp_configure_milter; fi          ## Enable Mail Filtering through external means
    if var_true ${SMTP_ENABLE_REPORT} ; then smtp_configure_report; fi          ## Enable Reports for offending messages
    if var_true ${SMTP_ENABLE_RESOLVER} ; then smtp_configure_resolver; fi      ## Define what this is for
    if var_true ${SMTP_ENABLE_SPAMFILTER} ; then smtp_configure_spamfilter; fi  ## Enable Spam filter
    if var_true ${SMTP_ENABLE_SESSION} ; then smtp_configure_session; fi        ## Define what this is for
    if var_true ${SMTP_ENABLE_QUEUE} ; then smtp_configure_queue; fi            ## Define what this is for
}

configure_store() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/store"
    if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
    if [ "$(stat -c %U "${config_dir}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${config_dir}" ; fi

    store_configure_instances() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            store_instances=$(set -o posix ; set | sort | grep -P "^STORE_([A-Z0-9]+)_TYPE=" | wc -l)
            if [ "${store_instances}" -eq 1 ]; then
                DEFAULT_STORE=${DEFAULT_STORE:-"$(set -o posix ; set | sort | grep -P "^STORE_([A-Z0-9]+)_TYPE=" | cut -d _ -f2 | tr '[A-Z]' '[a-z]')"}
            elif [ "${store_instances}" -lt 1 ]; then
                print_error "No Stores Found! - Setup some STORE_ variables"
                exit 9
            else
                if [ -z "${DEFAULT_STORE}" ]; then
                    print_error "Multiple stores detected - Set DEFAULT_STORE environment variable"
                    exit 9
                fi
            fi

            for store_instance in $(set -o posix; set | sort -u | grep -P "^STORE_([A-Z0-9]+)_TYPE=") ; do
                store_name="$(echo "${store_instance}" | cut -d _ -f2)"
                store_type="$(echo "${store_instance}" | cut -d = -f2)"

                populate_variable() {
                    if [ -v "STORE_${store_name^^}_${1^^}" ]; then
                        export store_${1,,}="$(set -o posix ; set | grep "^STORE_${store_name^^}_${1^^}=" | cut -d = -f2-)"
                    else
                        export store_${1,,}="$(set -o posix ; set | grep "^STORE_DEFAULT_${1^^}=" | cut -d = -f2-)"
                    fi
                }

                config_file="${store_type,,}_${store_name,,}.toml"
                config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

                case "${store_type,,}" in
                    elasticsearch* )
                        populate_variable elasticsearch_url
                        populate_variable elasticsearch_user
                        populate_variable elasticsearch_pass
                        populate_variable elasticsearch_cloudid
                        populate_variable elasticsearch_disable

                        populate_variable elasticsearch_tls_allow_invaid_certs
                        populate_variable elasticsearch_index_shards
                        populate_variable elasticsearch_index_replicas

                        toml_block add store.dynamic ${store_name,,} type quotes "elasticsearch"
                        toml_block add store.dynamic ${store_name,,} url quotes "${store_elasticsearch_url}"
                        toml_block add store.dynamic ${store_name,,} user quotes "${store_elasticsearch_user}"
                        toml_block add store.dynamic ${store_name,,} password quotes "${store_elasticsearch_pass}"
                        toml_block add store.dynamic ${store_name,,} cloud-id quotes "${store_elasticsearch_cloudid}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_elasticsearch_disable,,}"

                        toml_block add store.dynamic.tls ${store_name,,} allow-invalid-certs "${store_elasticsearch_tls_allow_invalid_certs,,}"

                        toml_block add store.dynamic.index ${store_name,,} replicas "${store_elasticsearch_index_replicas}"
                        toml_block add store.dynamic.index ${store_name,,} shards "${store_elasticsearch_index_shards}"

                        block_store_elasticsearch="block_store_${store_name,,}"
                        block_store_elasticsearch_tls="block_store_${store_name,,}_tls"
                        block_store_elasticsearch_index="block_store_${store_name,,}_index"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store '${store_name}' Type: '${store_type}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_elasticsearch}")

$(toml_block show "${!block_store_elasticsearch_tls}")

$(toml_block show "${!block_store_elasticsearch_index}")

EOF
                    ;;
                    filesystem* )
                        store_type=Filesystem

                        populate_variable filesystem_path
                        if [ ! -d "${store_filesystem_path}" ]; then mkdir -p "${store_filesystem_path}" ; fi
                        if [ "$(stat -c %U "${store_filesystem_path}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${store_filesystem_path}" ; fi

                        populate_variable filesystem_depth
                        populate_variable filesystem_disable
                        populate_variable filesystem_purge_frequency

                        toml_block add store.dynamic ${store_name,,} type quotes "fs"
                        toml_block add store.dynamic ${store_name,,} path quotes "${store_filesystem_path}"
                        toml_block add store.dynamic ${store_name,,} depth "${store_filesystem_depth,,}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_filesystem_disable,,}"

                        toml_block add store.dynamic.purge ${store_name,,} frequency quotes "${store_filesystem_purge_frequency}"

                        block_store_filesystem="block_store_${store_name,,}"
                        block_store_filesystem_timeout="block_store_${store_name,,}_timeout"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store '${store_name}' Type: '${store_type}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_filesystem}")

$(toml_block show "${!block_store_filesystem_timeout}")
EOF
                    ;;
                    foundation* )
                        store_type=FoundationDB

                        populate_variable foundationdb_path
                        ## TODO Is this already a full path+name - Should we dirname
                        if [ ! -d "${store_foundationdb_path}" ]; then mkdir -p "${store_foundationdb_path}" ; fi
                        if [ "$(stat -c %U "${store_foundationdb_path}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${store_foundationdb_path}" ; fi

                        populate_variable foundationdb_disable
                        populate_variable foundationdb_transaction_timeout
                        populate_variable foundationdb_transaction_retry_limit
                        populate_variable foundationdb_transaction_max_retry_delay
                        populate_variable foundationdb_transaction_machine_id
                        populate_variable foundationdb_transaction_datacenter_id
                        populate_variable foundationdb_purge_frequency

                        toml_block add store.dynamic ${store_name,,} type quotes "foundationdb"
                        toml_block add store.dynamic ${store_name,,} path quotes "${store_foundationdb_path}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_foundationdb_disable,,}"

                        toml_block add store.dynamic.transaction ${store_name,,} timeout quotes "${store_foundationdb_transaction_timeout}"
                        toml_block add store.dynamic.transaction ${store_name,,} retry-limit "${store_foundationdb_transaction_retry_limit}"
                        toml_block add store.dynamic.transaction ${store_name,,} max-retry-delay quotes "${store_foundationdb_transaction_max_retry_delay}"
                        toml_block add store.dynamic.transaction ${store_name,,} machine-id quotes "${store_foundationdb_transaction_machine_id}"
                        toml_block add store.dynamic.transaction ${store_name,,} data-center-id quotes "${store_foundationdb_transaction_datacenter_id}"

                        toml_block add store.dynamic.purge ${store_name,,} frequency quotes "${store_foundationdb_purge_frequency}"

                        block_store_foundationdb="block_store_${store_name,,}"
                        block_store_foundationdb_transaction="block_store_${store_name,,}_transaction"
                        block_store_foundationdb_purge="block_store_${store_name,,}_purge"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store '${store_name}' Type: '${store_type}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_foundationdb}")

$(toml_block show "${!block_store_foundationdb_transaction}")

$(toml_block show "${!block_store_foundationdb_purge}")
EOF
                    ;;
                    maria* | mysql )
                        store_type=MySQL

                        populate_variable mysql_host
                        populate_variable mysql_port
                        populate_variable mysql_name
                        populate_variable mysql_user
                        populate_variable mysql_pass
                        populate_variable mysql_disable

                        populate_variable mysql_max_allowed_packet
                        populate_variable mysql_timeout_wait

                        populate_variable mysql_pool_max_connections
                        populate_variable mysql_pool_min_connections

                        populate_variable mysql_init_execute
                        populate_variable mysql_query_name
                        populate_variable mysql_query_members
                        populate_variable mysql_query_recipients
                        populate_variable mysql_query_emails
                        populate_variable mysql_query_verify
                        populate_variable mysql_query_domains

                        populate_variable mysql_purge_frequency

                        toml_block add store.dynamic ${store_name,,} type quotes "mysql"
                        toml_block add store.dynamic ${store_name,,} host quotes "${store_mysql_host}"
                        toml_block add store.dynamic ${store_name,,} port "${store_mysql_port}"
                        toml_block add store.dynamic ${store_name,,} name quotes "${store_mysql_name}"
                        toml_block add store.dynamic ${store_name,,} user quotes "${store_mysql_user}"
                        toml_block add store.dynamic ${store_name,,} pass quotes "${store_mysql_pass}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_mysql_disable,,}"
                        toml_block add store.dynamic ${store_name,,} max-allowed-packet "${store_mysql_max_allowed_packet}"

                        toml_block add store.dynamic.timeout ${store_name,,} wait quotes "${store_mysql_timeout_wait}"

                        toml_block add store.dynamic.pool ${store_name,,} max-connections "${store_mysql_pool_max_connections}"
                        toml_block add store.dynamic.pool ${store_name,,} min-connections "${store_mysql_init_min_connections}"

                        toml_block add store.dynamic.init ${store_name,,} execute quotes "${store_mysql_init_execute}"
                        toml_block add store.dynamic.query ${store_name,,} name quotes "${store_mysql_query_name}"
                        toml_block add store.dynamic.query ${store_name,,} recipients quotes "${store_mysql_query_recipients}"
                        toml_block add store.dynamic.query ${store_name,,} emails quotes "${store_mysql_query_emails}"
                        toml_block add store.dynamic.query ${store_name,,} verify quotes "${store_mysql_query_verify}"
                        toml_block add store.dynamic.query ${store_name,,} expand quotes "${store_mysql_query_expand}"
                        toml_block add store.dynamic.query ${store_name,,} domains quotes "${store_mysql_query_domains}"

                        toml_block add store.dynamic.purge ${store_name,,} frequency quotes "${store_mysql_purge_frequency}"

                        block_store_mysql="block_store_${store_name,,}"
                        block_store_mysql_timeout="block_store_${store_name,,}_timeout"
                        block_store_mysql_pool="block_store_${store_name,,}_pool"
                        block_store_mysql_init="block_store_${store_name,,}_init"
                        block_store_mysql_query="block_store_${store_name,,}_query"
                        block_store_mysql_purge="block_store_${store_name,,}_purge"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store: '${store_name}' Type: '${store_type^}' configuration: '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_mysql}")

$(toml_block show "${!block_store_mysql_timeout}")

$(toml_block show "${!block_store_mysql_pool}")

$(toml_block show "${!block_store_mysql_init}")

$(toml_block show "${!block_store_mysql_query}")

$(toml_block show "${!block_store_mysql_purge}")
EOF
                    ;;
                    pgsql | postgres* )
                        store_type=Postgres

                        populate_variable pgsql_host
                        populate_variable pgsql_port
                        populate_variable pgsql_name
                        populate_variable pgsql_user
                        populate_variable pgsql_pass
                        populate_variable pgsql_disable

                        populate_variable pgsql_timeout_connect

                        populate_variable pgsql_pool_max_connections

                        populate_variable pgsql_tls_enable
                        populate_variable pgsql_tls_allow_invalid_certs

                        populate_variable pgsql_init_execute
                        populate_variable pgsql_query_name
                        populate_variable pgsql_query_members
                        populate_variable pgsql_query_recipients
                        populate_variable pgsql_query_emails
                        populate_variable pgsql_query_verify
                        populate_variable pgsql_query_domains

                        populate_variable pgsql_purge_frequency

                        toml_block add store.dynamic ${store_name,,} type quotes "postgresql"
                        toml_block add store.dynamic ${store_name,,} host quotes "${store_pgsql_host}"
                        toml_block add store.dynamic ${store_name,,} port "${store_pgsql_port}"
                        toml_block add store.dynamic ${store_name,,} name quotes "${store_pgsql_name}"
                        toml_block add store.dynamic ${store_name,,} user quotes "${store_pgsql_user}"
                        toml_block add store.dynamic ${store_name,,} pass quotes "${store_pgsql_pass}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_pgsql_disable,,}"

                        toml_block add store.dynamic.timeout ${store_name,,} connect quotes "${store_pgsql_timeout_connect}"

                        toml_block add store.dynamic.pool ${store_name,,} max-connections "${store_pgsql_pool_max_connections}"

                        toml_block add store.dynamic.tls ${store_name,,} enable "${store_pgsql_tls_enable,,}"
                        toml_block add store.dynamic.tls ${store_name,,} allow-invalid-certs "${store_pgsql_tls_allow_invalid_certs,,}"

                        toml_block add store.dynamic.init ${store_name,,} execute quotes "${store_pgsql_init_execute}"
                        toml_block add store.dynamic.query ${store_name,,} name quotes "${store_pgsql_query_name}"
                        toml_block add store.dynamic.query ${store_name,,} recipients quotes "${store_pgsql_query_recipients}"
                        toml_block add store.dynamic.query ${store_name,,} emails quotes "${store_pgsql_query_emails}"
                        toml_block add store.dynamic.query ${store_name,,} verify quotes "${store_pgsql_query_verify}"
                        toml_block add store.dynamic.query ${store_name,,} expand quotes "${store_pgsql_query_expand}"
                        toml_block add store.dynamic.query ${store_name,,} domains quotes "${store_pgsql_query_domains}"

                        toml_block add store.dynamic.purge ${store_name,,} frequency quotes "${store_pgsql_purge_frequency}"

                        block_store_mysql="block_store_${store_name,,}"
                        block_store_pgsql_timeout="block_store_${store_name,,}_timeout"
                        block_store_pgsql_pool="block_store_${store_name,,}_pool"
                        block_store_pgsql_tls="block_store_${store_name,,}_tls"
                        block_store_pgsql_init="block_store_${store_name,,}_init"
                        block_store_pgsql_query="block_store_${store_name,,}_query"
                        block_store_pgsql_purge="block_store_${store_name,,}_purge"
                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store '${store_name}' Type: '${store_type}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_pgsql}")

$(toml_block show "${!block_store_pgsql_timeout}")

$(toml_block show "${!block_store_pgsql_pool}")

$(toml_block show "${!block_store_pgsql_tls}")

$(toml_block show "${!block_store_pgsql_init}")

$(toml_block show "${!block_store_pgsql_query}")

$(toml_block show "${!block_store_pgsql_purge}")
EOF
                    ;;
                    redis )
                        store_type=Redis
                        populate_variable redis_url
                        populate_variable redis_user
                        populate_variable redis_pass
                        populate_variable redis_timeout
                        populate_variable redis_retries
                        populate_variable redis_max_retry_wait
                        populate_variable redis_min_retry_wait
                        populate_variable redis_read_from_replicas
                        populate_variable redis_diable

                        toml_block add store.dynamic ${store_name,,} type quotes "redis"
                        toml_block add directory.dynamic.lookup ${directory_name,,} domains array "$(array_tools quote comma directory_imap_lookup_domains)"

                        toml_block add store.dynamic ${store_name,,} urls array "$(array_tools quote comma store_redis_url)"
                        toml_block add store.dynamic ${store_name,,} user quotes "${store_redis_user}"
                        toml_block add store.dynamic ${store_name,,} pass quotes "${store_redis_pass}"
                        toml_block add store.dynamic ${store_name,,} timeout quotes "${store_redis_timeout}"
                        toml_block add store.dynamic ${store_name,,} retries "${store_redis_retries}"
                        toml_block add store.dynamic ${store_name,,} max-retry-wait quotes "${store_redis_max_retry_wait}"
                        toml_block add store.dynamic ${store_name,,} min-retry-wait quotes "${store_redis_min_retry_wait}"
                        toml_block add store.dynamic ${store_name,,} read-from-replicas quotes "${store_redis_read_from_replicas,,}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_redis_disable,,}"

                        block_store_redis="block_store_${store_name,,}"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store '${store_name}' Type: '${store_type}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_redis}")

EOF
                    ;;
                    rocks* )
                        store_type=RocksDB
                        populate_variable rocksdb_path
                        ## Is this a full path and we need to dirname?
                        if [ ! -d "${store_rocksdb_path}" ]; then mkdir -p "${store_rocksdb_path}" ; fi
                        if [ "$(stat -c %U "${store_rocksdb_path}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${store_rocksdb_path}" ; fi

                        populate_variable rocksdb_disable

                        populate_variable rocksdb_settings_min_blob_size
                        populate_variable rocksdb_settings_write_buffer_size

                        populate_variable rocksdb_pool_workers

                        populate_variable rocksdb_purge_frequency

                        toml_block add store.dynamic ${store_name,,} type quotes "rocksdb"
                        toml_block add store.dynamic ${store_name,,} path quotes "${store_rocksdb_path}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_rocksdb_disable,,}"

                        toml_block add store.dynamic.settings ${store_name,,} min-blob-size "${store_rocksdb_settings_min_blob_size}"
                        toml_block add store.dynamic.settings ${store_name,,} write-buffer-size "${store_rocksdb_settings_write_buffer_size}"

                        toml_block add store.dynamic.pool ${store_name,,} workers "${store_rocksdb_pool_workers}"

                        toml_block add store.dynamic.purge ${store_name,,} frequency "${store_rocksdb_purge_frequency}"

                        block_store_rocksdb="block_store_${store_name,,}"
                        block_store_rocksdb_settings="block_store_${store_name,,}_settings"
                        block_store_rocksdb_pool="block_store_${store_name,,}_pool"
                        block_store_rocksdb_purge="block_store_${store_name,,}_purge"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store '${store_name}' Type: '${store_type}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_rocksdb}")

$(toml_block show "${!block_store_rocksdb_settings}")

$(toml_block show "${!block_store_rocksdb_pool}")

$(toml_block show "${!block_store_rocksdb_purge}")

EOF
                    ;;
                    s3 )
                        store_type=S3
                        populate_variable s3_bucket
                        populate_variable s3_region
                        populate_variable s3_access_key
                        populate_variable s3_seccret_key
                        populate_variable s3_endpoint
                        populate_variable s3_security_token
                        populate_variable s3_profile
                        populate_variable s3_timeout
                        populate_variable s3_disable
                        populate_variable s3_purge_frequency

                        toml_block add store.dynamic ${store_name,,} type quotes "s3"
                        toml_block add store.dynamic ${store_name,,} bucket quotes "${store_s3_bucket}"
                        toml_block add store.dynamic ${store_name,,} region quotes "${store_s3_region}"
                        toml_block add store.dynamic ${store_name,,} access-key quotes "${store_s3_access_key}"
                        toml_block add store.dynamic ${store_name,,} secret-key quotes "${store_s3_secret_key}"
                        toml_block add store.dynamic ${store_name,,} endpoint quotes "${store_s3_endpoint}"
                        toml_block add store.dynamic ${store_name,,} security-token quotes "${store_s3_security_token}"
                        toml_block add store.dynamic ${store_name,,} profile quotes "${store_s3_profile}"
                        toml_block add store.dynamic ${store_name,,} timeout quotes "${store_s3_timeout}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_s3_disable,,}"
                        toml_block add store.dynamic.purge ${store_name,,} frequency quotes "${store_s3_purge_frequency}"

                        block_store_s3="block_store_${store_name,,}"
                        block_store_s3_purge="block_store_${store_name,,}_purge"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store '${store_name}' Type: '${store_type}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_s3}")

$(toml_block show "${!block_store_s3_purge}")

EOF
                    ;;
                    sqlite*)
                        store_type=SQLite
                        populate_variable sqlite_path
                        if [ ! -d "${store_sqlite_path}" ]; then mkdir -p "${store_sqlite_path}" ; fi
                        if [ "$(stat -c %U "${store_sqlite_path}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${store_sqlite_path}" ; fi

                        populate_variable sqlite_disable

                        populate_variable sqlite_pool_max_connections
                        populate_variable sqlite_pool_workers

                        populate_variable sqlite_init

                        populate_variable sqlite_query_domains
                        populate_variable sqlite_query_emails
                        populate_variable sqlite_query_expand
                        populate_variable sqlite_query_members
                        populate_variable sqlite_query_name
                        populate_variable sqlite_query_recipients
                        populate_variable sqlite_query_verify

                        populate_variable sqlite_purge_frequency

                        toml_block add store.dynamic ${store_name,,} type quotes "sqlite"
                        toml_block add store.dynamic ${store_name,,} path quotes "${store_sqlite_path}"
                        toml_block add store.dynamic ${store_name,,} disable "${store_sqlite_disable}"

                        toml_block add store.dynamic.pool ${store_name,,} max_connections "${store_sqlite_pool_max_connections}"
                        toml_block add store.dynamic.pool ${store_name,,} workers "${store_sqlite_pool_workers}"

                        toml_block add store.dynamic.init ${store_name,,} execute quotes "${store_sqlite_pool_max_connections}"

                        toml_block add store.dynamic.query ${store_name,,} name quotes "${store_sqlite_query_name}"
                        toml_block add store.dynamic.query ${store_name,,} recipients quotes "${store_sqlite_query_recipients}"
                        toml_block add store.dynamic.query ${store_name,,} members quotes "${store_sqlite_query_members}"
                        toml_block add store.dynamic.query ${store_name,,} emails quotes "${store_sqlite_query_emails}"
                        toml_block add store.dynamic.query ${store_name,,} verify quotes "${store_sqlite_query_verify}"
                        toml_block add store.dynamic.query ${store_name,,} expand quotes "${store_sqlite_query_expand}"
                        toml_block add store.dynamic.query ${store_name,,} domains quotes "${store_sqlite_query_domains}"

                        toml_block add store.dynamic.purge ${store_name,,} frequency quotes "${store_sqlite_purge_frequency}"

                        block_store_sqlite="block_store_${store_name,,}"
                        block_store_sqlite_pool="block_store_${store_name,,}_pool"
                        block_store_sqlite_init="block_store_${store_name,,}_init"
                        block_store_sqlite_query="block_store_${store_name,,}_query"
                        block_store_sqlite_purge="block_store_${store_name,,}_purge"

                        cat <<EOF | silent sudo -u "${SERVER_USER}" tee "${config_dir}"/"${config_file}"
##########################################################################
# Store '${store_name}' Type: '${store_type}' configuration '${config_file}'
# Automatically Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S')
##########################################################################

$(toml_block show "${!block_store_sqlite}")

$(toml_block show "${!block_store_sqlite_pool}")

$(toml_block show "${!block_store_sqlite_init}")

$(toml_block show "${!block_store_sqlite_query}")

$(toml_block show "${!block_store_sqlite_purge}")
EOF
                    ;;
                    * )
                        print_error "[configure_store] Don't know what to do with store type '${store_type,,}'"
                    ;;
                esac
            done
        fi
    }

    store_configure_instances
}

dkim() {
    case "${1,,}" in
        "generate" )
            ## Usage generate <selector> <domainname> <type> <rsa_keysize>
            if [ -z "${4}" ] ; then return 3; fi
            if [ ! -d "${DKIM_PATH}" ]; then mkdir -p "${DKIM_PATH}" ; fi
            if [ "$(stat -c %U "${DKIM_PATH}")" != "${SERVER_USER}" ] ; then chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${DKIM_PATH}" ; fi

            local _dkim_selector=${2}
            local _dkim_domain=${3}
            local _dkim_type=${4:-"${SMTP_SIGNATURE_DEFAULT_KEY_TYPE}"}
            local _dkim_key_size=${5:-"${SMTP_SIGNATURE_DEFAULT_KEY_SIZE}"}

            if [ -f "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".key ] || [ -f "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".cert ] || [ -f "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".readme ] ; then
                return 99
            fi

            case "${_dkim_type,,}" in
                ed25519 )
                    sudo -u "${SERVER_USER}" openssl genpkey -algorithm ed25519 -out "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".key
                    sudo -u "${SERVER_USER}" openssl pkey -in "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".key -pubout -outform der | tail -c +13 | openssl base64 -A > "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".cert
                ;;
                rsa* )
                    sudo -u "${SERVER_USER}" openssl genrsa -out "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".key ${_dkim_key_size}
                    sudo -u "${SERVER_USER}" openssl rsa -in "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".key -pubout -outform der | openssl base64 -A > "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".cert
                ;;
            esac

            cat <<EOF > "${DKIM_PATH}"/"${_dkim_selector}"-"${_dkim_domain/./_}".readme
DKIM Selector: ${_dkim_selector}
Domain: ${_dkim_domain/./_}

This record was generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
Add the following DNS records to your domain in order to enable DKIM, SPF and DMARC:

${_dkim_selector}._domainkey.${_dkim_domain/./_}. IN TXT "v=DKIM1; k=${_dkim_type,,}; p=$(cat "${DKIM_PATH}"/"${_dkim_selector}"_"${_dkim_domain/./_}".cert)"
${_dkim_domain/./_}. IN TXT "v=spf1 a:${SERVER_NAME}.${_dkim_domain/./_} mx -all ra=postmaster"
${SERVER_NAME}.${_dkim_domain/./_}. IN TXT "v=spf1 a -all ra=postmaster"
_dmarc.${_dkim_domain/./_}. IN TXT "v=DMARC1; p=none; rua=mailto:postmaster@${_dkim_domain/_/.}; ruf=mailto:postmaster@${_dkim_domain/_/.}"
EOF
        ;;
        parse_environment )
            dkim_domains=$(set -o posix ; set | sort | grep -c "^DKIM.*_DOMAIN=")
            for (( dkim_pair = 01; dkim_pair <= dkim_domains; dkim_pair++ )); do
                dkim_domain=DKIM${dkim_pair}_DOMAIN
                dkim_selector=DKIM${dkim_pair}_SELECTOR
                dkim_type=DKIM${dkim_pair}_TYPE
                dkim_keysize=DKIM${dkim_pair}_KEY_SIZE
                dkim generate "${!dkim_selector}" "${!dkim_domain}" "${!dkim_type}" ${!dkim_keysize}
            done
        ;;
    esac
}

null_file() {
    if [ -s "${1}" ]; then
        sudo -u "${SERVER_USER}" truncate -s 0 "${1}"
    fi
}

setup_container_mode() {
    if [ -f "/tmp/.container/stalwart/.mode-env" ]; then
        print_debug "[setup_container_mode] Importing MODE environment generated variables"
        source /tmp/.container/stalwart/.mode-env
    else
        mkdir -p /tmp/.container/stalwart/
        if [ "${MODE,,}" = "aio" ] || [ "${MODE,,}" = "all" ] ; then
            print_debug "[setup_container_mode] Container Mode: AIO"
            print_debug "[setup_container_mode] Creating MODE environment generated variables"
            echo "ENABLE_IMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
            echo "ENABLE_JMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
            echo "ENABLE_SMTP=TRUE" >> /tmp/.container/stalwart/.mode-env
            if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
            fi
        else
            modes=$(echo "${MODE,,}" | tr "," "\n")
            for mode in $modes; do
                case "${mode,,}" in
                    "imap" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_IMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi

                        IMAP_ENABLE_LISTENER=TRUE
                        IMAP_ENABLE_SETTINGS=TRUE
                    ;;
                    "jmap" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_JMAP=TRUE" >> /tmp/.container/stalwart/.mode-env

                        JMAP_ENABLE_AUTH=TRUE
                        JMAP_ENABLE_LISTENER=TRUE
                        JMAP_ENABLE_OAUTH=TRUE
                        JMAP_ENABLE_PROTOCOL=TRUE
                        JMAP_ENABLE_PUSH=TRUE
                        JMAP_ENABLE_RATELIMIT=TRUE
                        JMAP_ENABLE_WEBSOCKETS=TRUE

                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi
                    ;;
                    "smtp" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_SMTP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        echo "ENABLE_JMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi

                        if [ "${SMTP_MODE,,}" = "forward" ]; then
                            JMAP_ENABLE_AUTH=TRUE
                        fi
                    ;;
                    *)
                        print_error "[setup_container_mode] Unknown 'MODE' environment variable - exitting.."
                        exit 1
                    ;;
                esac
            done
        fi
        source /tmp/.container/stalwart/.mode-env
    fi
}

toml_block() {
    ## Usage toml_block <operation> <block> <key> <value>
    ## Operation:         'add' to block
    ##
    ## Options for value: blank to make "" as value
    ##                    quote to make 'value' as value
    ##                    doublequote to make "value" as value
    ## Access resulting toml block with 'echo $block_<block>'
    ##
    ## Examples:
    ## toml_block add blockname blockkey1 blockvalue
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey2 blockvalue blockextra
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey3 singlequote blockvalue3
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey4 doublequote blockvalue4
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey5 blank
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey6 multi word value
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey7 quotes multi word value
    ## echo "${block_blockname}"
    ## toml_block add blockname.dynamic.foobar test blockkey9 blockvalue9
    ## echo "${block_blockname_test_foobar}"
    ## toml_block add blockname.dynamic.foobar10.dynamic2 test1 test2 blockkey10 blockvalue10
    ## echo "${block_blockname_test1_foobar10_test2}"
    ##  cat <<EOF > /tmp/foo.txt
    #$(toml_block show "${block_blockname}")
    #EOF
    ##
    ## Any periods or hyphens auto converted to underscore
    case "${1}" in
        add )
            shift 1
            local block_name
            local block_name_sanitized
            local block_data
            local shift_val=1

            if [ -z "${1}" ]; then return 1; fi

            block_name=${1}
            if [[ "${block_name}" =~ \.dynamic3 ]]; then
                block_name="$(echo ${block_name} | sed "s|.dynamic3|.\"$4\"|g")"
                shift_val=3
            fi

            if [[ "${block_name}" =~ \.dynamic2 ]]; then
                block_name="$(echo ${block_name} | sed "s|.dynamic2|.\"$3\"|g")"
                if [ "${shift_val}" -eq 3 ]; then
                    shift_val=3
                else
                    shift_val=2
                fi
            fi

            if [[ "${block_name}" =~ \.dynamic ]]; then
                block_name="$(echo ${block_name} | sed "s|.dynamic|.\"$2\"|g")"
                if [ "${shift_val}" -eq 3 ]; then
                    shift_val=3
                elif [ "${shift_val}" -eq 2 ]; then
                    shift_val=2
                else
                    shift_val=1
                fi

                shift ${shift_val}
            fi

            block_name_sanitized=$(echo "${block_name}" | sed -e "s|\.|_|g" -e "s|-|_|g" -e 's|"||g')

            if [ -n "${2}" ]; then
                local block_key
                local block_value
                block_key=${2}
                block_value=${3}
                local block_value_blanket
                case "${block_value}" in
                    array | brackets)
                        block_value_blanket_pre="["
                        block_value_blanket_post="]"
                        shift 3
                        block_value=$@
                    ;;
                    blank )
                        block_value_blanket_pre=\"
                        block_value_blanket_post=\"
                        block_value=
                    ;;
                    doublearray | doublebrackets)
                        block_value_blanket_pre="[["
                        block_value_blanket_post="]]"
                        shift 3
                        block_value=$@
                    ;;
                    doublequote | double | quotes )
                        block_value_blanket_pre=\"
                        block_value_blanket_post=\"
                        shift 3
                        block_value=$@
                    ;;
                    null )
                        return 99
                    ;;
                    singlequote | quote )
                        block_value_blanket_pre=\'
                        block_value_blanket_post=\'
                        shift 3
                        block_value=$@
                    ;;
                    triplequote | triple )
                        block_value_blanket_pre=\'\'\'
                        block_value_blanket_post=\'\'\'
                        shift 3
                        block_value=$@
                    ;;
                    * )
                        shift 2
                        block_value=$@
                    ;;
                esac

                if ! [ -v block_$block_name_sanitized ]; then
                    block_data="[$(echo $block_name)]\n"
                fi

                if [ -n "${block_value}" ]; then
                    block_data+="$(echo -e "${block_key} = ${block_value_blanket_pre}${block_value}${block_value_blanket_post}\n")"
                fi
                unset block_value_blanket_pre
                unset block_value_blanket_post

                #block_data=$(echo "${block_data}" | sed "/\[.*\]/d" | sed "1s/^/\[${block_name}\]\\n/" | sed "/^$/d")
                #block_data=$(echo "${block_data}" | sed "/\[.*\]/d" | sed "1s/^/ \\n/" | sed "/^$/d")
                #block_data=$(echo "${block_data}" |  sed "1s/^/\\n/" | sed "/^$/d")

            fi
            export block_$block_name_sanitized+="${block_data}\n"

            #echo "$block_$block_name_sanitized - $block_data"
            #block_contents=block_$block_name_sanitized
            #echo ${!block_contents}
        ;;
        show )
            echo -e "${2}" | sed -e '/^[[:space:]]*$/d' -e "s|''|'|g"
        ;;
    esac
}
