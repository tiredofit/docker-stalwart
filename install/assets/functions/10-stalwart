#!/command/with-contenv bash

bootstrap_filesystem() {
    if [ ! -d "${CONFIG_PATH}" ]; then
        mkdir -p "${CONFIG_PATH}"
    fi
    if [ $(stat -c %U "${CONFIG_PATH}") != "stalwart" ] ; then chown -R stalwart:stalwart "${CONFIG_PATH}" ; fi
    # Only necessary if you want to map some legacy directories
    #if [ ! -d "/etc/randomconfig" ] ; then
    #    ln -sf "${CONFIG_PATH}" /etc/randomconfig
    #fi

    if [ ! -d "${DATA_PATH}" ]; then
        mkdir -p "${DATA_PATH}"
    fi
    if [ $(stat -c %U "") != "stalwart" ] ; then chown stalwart:stalwart "${DATA_PATH}" ; fi

    if [ ! -d "${LOG_PATH}" ]; then
        mkdir -p "${LOG_PATH}"
    fi
    if [ $(stat -c %U "${LOG_PATH}") != "stalwart" ] ; then chown -R stalwart:stalwart "${LOG_PATH}" ; fi

    case "${LOG_TYPE,,}" in
        file )
            create_logrotate stalwart "${LOG_PATH}"/"${LOG_FILE}" stalwart stalwart
        ;;
    esac
}

configure_common() {

    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/common"

    common_configure_server() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
            config_file="server.toml"

            toml_block add server hostname ""server_name""

            toml_block add server.run-as user stalwart
            toml_block add server.run-as group stalwart

            toml_block add server.socket nodelay true
            toml_block add server.socket reuse-addr true
            toml_block add server.socket backlog 1024
            toml_block add global shared-map "{shard = 32, capacity = 10}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# Server configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

${block_server}

${block_server_run_as}

${block_server_socket}

${block_global}

EOF
            sed -i 'N;/^\n$/D;P;D;' "${config_dir}"/"${config_file}"
        else
            :
        fi


    }

    common_configure_sieve() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    common_configure_tls() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    common_configure_tracing() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    common_configure_server
}

configure_directory() {
    directory_configure_imap() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
:
    }

    directory_configure_ldap() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    directory_configure_lmtp() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    directory_configure_memory() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    directory_configure_sql() {
        ## TODO - Future version to support SQLite, MariaDB, and Postgres
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

}

configure_imap() {
    imap_configure_listener() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    imap_configure_settings() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }
}

configure_jmap() {
    jmap_configure_auth() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_listener() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_oauth() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_protocol() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_push() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_ratelimit() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_store() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_websockets() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }
}

configure_spamfilter() {
    ## TODO - Future version
    :
}

configure_smtp() {
    smtp_configure_auth() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_dkim() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_listener() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_milter() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_queue() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_remote() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_report() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_resolver() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_session() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_signature() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    smtp_configure_spamfilter() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }
}

setup_container_mode() {
    if [ -f "/tmp/.container/stalwart/.mode-env" ]; then
        print_debug "[setup_container_mode] Importing MODE environment generated variables"
        source /tmp/.container/stalwart/.mode-env
    else
        mkdir -p /tmp/.container/stalwart/
        if [ "${MODE,,}" = "aio" ] || [ "${MODE,,}" = "all" ] ; then
            print_debug "[setup_container_mode] Container Mode: AIO"
            print_debug "[setup_container_mode] Creating MODE environment generated variables"
            echo "ENABLE_IMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
            echo "ENABLE_JMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
            echo "ENABLE_SMTP=TRUE" >> /tmp/.container/stalwart/.mode-env
            if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
            fi
        else
            modes=$(echo "${MODE,,}" | tr "," "\n")
            for mode in $modes; do
                case "${mode,,}" in
                    "imap" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_IMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi
                    ;;
                    "jmap" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_JMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi
                    ;;
                    "smtp" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_SMTP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi
                    ;;
                    *)
                        print_error "[setup_container_mode] Unknown 'MODE' environment variable - exitting.."
                        exit 1
                    ;;
                esac
            done
        fi
        source /tmp/.container/stalwart/.mode-env
    fi
}

toml_block() {
    ## Usage toml_block <operation> <block> <key> <value>
    ## Access resulting toml block with 'echo $block_<block>'
    ## Any periods or hyphens auto converted to underscore
    case "${1}" in
        add )
            local block_name
            local block_name_sanitized
            if [ -z "${2}" ]; then exit 1; fi
            block_name=${2}
            block_name_sanitized=$(echo "${block_name}" | sed -e "s|\.|_|g" -e "s|-|_|g")
            if [ -n "${4}" ]; then
                block_data=$(echo "${block_data}"; cat<<EOF
${3} = ${4}
EOF
                )
                block_data=$(echo "${block_data}" | sed "/\[.*\]/d" | sed "1s/^/\[${block_name}\]\\n/" | sed "/^$/d")
            fi

            export "block_$block_name_sanitized=$block_data"
            #block_contents=block_$block_name_sanitized
            #echo ${!block_contents}
        ;;
    esac
}
