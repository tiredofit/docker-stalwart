#!/command/with-contenv bash

bootstrap_filesystem() {

    if [ ! -d "${CONFIG_PATH}" ]; then mkdir -p "${CONFIG_PATH}"; fi
    if [ "$(stat -c %U "${CONFIG_PATH}")" != "stalwart" ] ; then chown -R ${SERVER_USER}:${SERVER_GROUP} "${CONFIG_PATH}" ; fi

    if [ ! -d "${DATA_PATH}" ]; then mkdir -p "${DATA_PATH}"; fi
    if [ "$(stat -c %U "${DATA_PATH}")" != "stalwart" ] ; then chown ${SERVER_USER}:${SERVER_GROUP} "${DATA_PATH}" ; fi

    if [ ! -d "${LOG_PATH}" ]; then mkdir -p "${LOG_PATH}" ; fi
    if [ "$(stat -c %U "${LOG_PATH}")" != "stalwart" ] ; then chown -R ${SERVER_USER}:${SERVER_GROUP} "${LOG_PATH}" ; fi

    case "${LOG_TYPE,,}" in
        file )
            create_logrotate stalwart "${LOG_PATH}"/"${LOG_FILE}" ${SERVER_USER} ${SERVER_GROUP}
        ;;
    esac
}

certificates() {
    TLS_CA_NAME=${TLS_CA_NAME:-"ca-selfsigned-stalwart"}
    TLS_CA_SUBJECT=${TLS_CA_SUBJECT:-"/C=ca/ST=tiredofit/L=docker/O=stalwart/CN="}
    TLS_CA_CERT_SUBJECT=${TLS_CA_CERT_SUBJECT:-${TLS_CA_SUBJECT}${TLS_CA_NAME}}
    TLS_CA_CERT_FILE=${TLS_CA_CERT_FILE:-"/certs/${TLS_CA_NAME}/${TLS_CA_NAME}.crt"}
    TLS_CA_KEY_FILE=${TLS_CA_KEY_FILE:-"$(dirname "${TLS_CA_CERT_FILE}")/${TLS_CA_NAME}.key"}
    TLS_CREATE_CA=${TLS_CREATE_CA:-"TRUE"}

    create_certificate_authority() {
        if [ ! -f "${TLS_CA_CERT_FILE}" ] ; then

            print_debug "[certificates | create_certificate_authority] Creating Self Signed Certificate Authority"
            mkdir -p "$(dirname "${TLS_CA_CERT_FILE}")"
            echo "000a" > "$(dirname "${TLS_CA_CERT_FILE}")"/serial
            touch "$(dirname "${TLS_CA_CERT_FILE}")"/certindex

            silent eval "${ssl_exec} req \
                  -newkey rsa:4096 -keyout ${TLS_CA_KEY_FILE} \
                  -x509 -days 3650 -nodes -out ${TLS_CA_CERT_FILE} \
                  -subj \"${TLS_CA_CERT_SUBJECT}\""

            cat > "$(dirname "${TLS_CA_CERT_FILE}")"/"${TLS_CA_NAME}".conf << EOF
            [ ca ]
            default_ca = ${TLS_CA_NAME}

            [ ${TLS_CA_NAME} ]
            unique_subject = no
            new_certs_dir = .
            certificate = ${TLS_CA_CERT_FILE}
            database = "$(dirname "${TLS_CA_CERT_FILE}")"/certindex
            private_key = ${TLS_CA_KEY_FILE}
            serial = "$(dirname "${TLS_CA_CERT_FILE}")"/serial
            default_days = 3650
            default_md = default
            policy = ${TLS_CA_NAME}_policy
            x509_extensions = ${TLS_CA_NAME}_extensions

            [ ${TLS_CA_NAME}_policy ]
            commonName = supplied
            stateOrProvinceName = supplied
            countryName = supplied
            emailAddress = optional
            organizationName = supplied
            organizationalUnitName = optional

            [ ${TLS_CA_NAME}_extensions ]
            basicConstraints = CA:false
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always
            keyUsage = digitalSignature,keyEncipherment
            extendedKeyUsage = serverAuth,clientAuth

            [ req ]
            default_bits = 2048

            [default_conf]
            ssl_conf = ssl_sect

            [ssl_sect]
            system_default = system_default_sect

            [system_default_sect]
            MinProtocol = TLSv1.2
            MaxProtocol = TLSv1.3
            CipherString = DEFAULT
EOF
        else
            print_debug "[certificates | create_certificate_authority] CA Already Exists"
        fi
    }

    create_certificate() {
        if [ "$1" != "" ] ; then
            if var_true "${TLS_CREATE_CA}" ; then
                if [ ! -f "${TLS_CA_CERT_FILE}" ] || [ ! -f "${TLS_CA_KEY_FILE}" ] ; then
                    print_debug "[certificates | create_certificate] No CA Found - Creating before generating certificates"
                    create_certificate_authority
                fi
            fi
            TLS_CERT_SUBJECT="${TLS_CA_SUBJECT}$(basename "${1%%.*}")"

            if var_true "${TLS_CREATE_CA}" ; then
                if [ ! -f "${1%%.*}".key ] ; then
                    print_debug "[certificates | create_certificate] Creating Certificate: ${1}"
                    silent eval "${ssl_exec} req \
                          -newkey rsa:2048 -keyout ${1%%.*}.key \
                          -nodes -out ${1%%.*}.csr \
                          -subj \"${TLS_CERT_SUBJECT}\""
                fi
            else
                if [ ! -f "${1%%.*}".key ] ; then
                    print_debug "[certificates | create_certificate] Creating Certificate: ${1}"
                    silent eval "${ssl_exec} req \
                          -new -x509 -nodes -days 3650
                          -config /tmp/openssl.cnf
                          -out ${1%%.*}.crt \
                          -keyout ${1%%.*}.key"
                fi
            fi

            if var_true "${TLS_CREATE_CA}" ; then
                if [ ! -f "${1%%.*}".crt ] ; then
                    print_debug "[certificates | create_certificate] Signing Certificate: ${1}"
                    silent eval "${ssl_exec} ca -batch -config $(dirname "${TLS_CA_CERT_FILE}")/${TLS_CA_NAME}.conf -notext -in ${1%%.*}.csr -out ${1%%.*}.crt"
                    rm -rf "$(tail -n 1 "$(dirname "${TLS_CA_CERT_FILE}")"/certindex | awk '{print $3}').pem"
                    rm -rf "${1%%.*}".csr
                fi
            fi

            if [ -f "${1%%.*}".crt ] && [ -f "${1%%.*}".key ] ; then
                print_debug "[certificates | create_certificate] Merging Certificate and Key for: ${1}"
                   cat "${1%%.*}".crt "${1%%.*}".key > "${1%%.*}".pem
            fi

            if [ ! -f "${1%%.*}"-public.pem ] ; then
                print_debug "[certificates | create_certificate] Creating Public Key for: ${1}"
                silent ${ssl_exec} rsa -in "${1%%.*}".pem -out "${1%%.*}"-public.pem -outform PEM -pubout
            fi
        fi
    }

    check_permissions() {
        if sudo -u ${SERVER_USER} [ ! -r "${1}" ] ; then
            print_debug "[certificates | check_permissions] Setting Read Permissions on ${1}"
            chmod 444 "${1}"
        fi
    }

    check_certificates() {
        print_debug "[certificates | check_certificates] Checking Existence of ${1}"
        if [ ! -f "${1}" ] ; then
                mkdir -p "$(dirname "${1}")"
                create_certificate "${1}"
        fi
    }

    check_dhparam() {
        print_debug "[certificates | check_dhparam] Checking Existence of ${TLS_SERVER_DH_PARAM_FILE}"
        if [ ! -f "${TLS_SERVER_DH_PARAM_FILE}" ] ; then
                create_dhparam
        fi
    }

    create_dhparam() {
        print_notice "[certificates | create_dhparam] Creating ${TLS_SERVER_DH_PARAM_FILE}"
        mkdir -p "$(dirname "${TLS_SERVER_DH_PARAM_FILE}")"
        silent ${ssl_exec} dhparam -out "${TLS_SERVER_DH_PARAM_FILE}" "${TLS_SERVER_DH_PARAM_KEYSIZE}"
    }

    trust_ca() {
        if var_true "${TLS_CREATE_CA}" ; then
            if [ -f "${TLS_CA_CERT_FILE}" ]; then
                if [ ! -f /usr/local/share/ca-certificates/"$(basename "${TLS_CA_CERT_FILE}")" ] ; then
                    print_debug "[certificates | trust_ca] Trusting CA ${TLS_CA_NAME}"
                    ln -sf "${TLS_CA_CERT_FILE}" /usr/local/share/ca-certificates/
                    silent update-ca-certificates
                fi
            fi
        fi
    }

    if ! command -v openssl &> /dev/null && ! command -v libressl &> /dev/null ; then
        print_error "[certificates] Can't find a suitable SSL engine - Exiting.."
        exit 1
    fi

    if command -v libressl &> /dev/null ; then
        ssl_exec="libressl"
    fi

    if command -v openssl &> /dev/null ; then
        ssl_exec="openssl"
    fi

    if command -v openssl &> /dev/null &&  command -v libressl &> /dev/null ; then
        ssl_exec="openssl"
    fi

    case "${1,,}" in
        "dhparam" )
            check_dhparam
        ;;
        *)
            check_certificates "${1}"
            check_permissions "${1}"
            trust_ca
        ;;
    esac
}

configure_common() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/common"

    if [ "${SETUP_TYPE,,}" = "auto" ]; then sudo -u "${SERVER_USER}" mkdir -p "${config_dir}" ; fi

    common_configure_server() {
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            if [ ! -d "${config_dir}" ]; then mkdir -p "${config_dir}" ; fi
            config_file="server.toml"
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")

            toml_block add server hostname quotes "${SERVER_NAME}"

            toml_block add server.run-as user ${SERVER_USER}
            toml_block add server.run-as group ${SERVER_GROUP}

            toml_block add server.socket nodelay ${SERVER_SOCKET_NODELAY,,}
            toml_block add server.socket reuse-addr ${SERVER_SOCKET_REUSE_ADDR,,}
            toml_block add server.socket backlog ${SERVER_SOCKET_BACKLOG}
            toml_block add global shared-map quotes "${GLOBAL_SHARED_MAP}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# Server configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_server}")

$(toml_block show "${block_server_run_as}")

$(toml_block show "${block_server_socket}")

$(toml_block show "${block_global}")

EOF
            sed -i 'N;/^\n$/D;P;D;' "${config_dir}"/"${config_file}"
        else
            :
        fi
    }

    common_configure_sieve() {
        config_file="sieve.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
            toml_block add sieve.untrusted disable-capabilities array "${SIEVE_UNTRUSTED_DISABLE_CAPABILITIES}"
            toml_block add sieve.untrusted notification-uris array "${SIEVE_UNTRUSTED_NOTIFICATION_URIS}"
            toml_block add sieve.untrusted protected-headers array "${SIEVE_UNTRUSTED_PROTECTED_HEADERS}"

            toml_block add sieve.untrusted.limits name-length "${SIEVE_UNTRUSTED_LIMITS_NAME_LENGTH}"
            toml_block add sieve.untrusted.limits max-scripts "${SIEVE_UNTRUSTED_LIMITS_MAX_SCRIPTS}"
            toml_block add sieve.untrusted.limits script-size "${SIEVE_UNTRUSTED_LIMITS_SCRIPT_SIZE}"
            toml_block add sieve.untrusted.limits string-length "${SIEVE_UNTRUSTED_LIMITS_STRING_LENGTH}"
            toml_block add sieve.untrusted.limits variable-name-length "${SIEVE_UNTRUSTED_LIMITS_VARIABLE_NAME_LENGTH}"
            toml_block add sieve.untrusted.limits variable-size "${SIEVE_UNTRUSTED_LIMITS_VARIABLE_SIZE}"
            toml_block add sieve.untrusted.limits nested-blocks "${SIEVE_UNTRUSTED_LIMITS_NESTED_BLOCKS}"
            toml_block add sieve.untrusted.limits nested-tests "${SIEVE_UNTRUSTED_LIMITS_NESTED_TESTS}"
            toml_block add sieve.untrusted.limits nested-foreverypart "${SIEVE_UNTRUSTED_LIMITS_NESTED_FOREVERYPART}"
            toml_block add sieve.untrusted.limits match-variables "${SIEVE_UNTRUSTED_LIMITS_MATCH_VARIABLES}"
            toml_block add sieve.untrusted.limits local-variables "${SIEVE_UNTRUSTED_LIMITS_LOCAL_VARIABLES}"
            toml_block add sieve.untrusted.limits header-size "${SIEVE_UNTRUSTED_LIMITS_HEADER_SIZE}"
            toml_block add sieve.untrusted.limits includes "${SIEVE_UNTRUSTED_LIMITS_INCLUDES}"
            toml_block add sieve.untrusted.limits nested-includes "${SIEVE_UNTRUSTED_LIMITS_NESTED_INCLUDES}"
            toml_block add sieve.untrusted.limits cpu "${SIEVE_UNTRUSTED_LIMITS_CPU}"
            toml_block add sieve.untrusted.limits redirects "${SIEVE_UNTRUSTED_LIMITS_REDIRECTS}"
            toml_block add sieve.untrusted.limits received-headers "${SIEVE_UNTRUSTED_LIMITS_RECEIVED_HEADERS}"
            toml_block add sieve.untrusted.limits outgoing-messages "${SIEVE_UNTRUSTED_LIMITS_OUTGOING_MESSAGES}"

            toml_block add sieve.untrusted.vacation default-subject quotes "${SIEVE_UNTRUSTED_VACATION_DEFAULT_SUBJECT}"
            toml_block add sieve.untrusted.vacation subject-prefix quotes "${SIEVE_UNTRUSTED_VACATION_SUBJECT_PREFIX}"

            toml_block add sieve.untrusted.default-expiry vacation quotes "${SIEVE_UNTRUSTED_DEFAULT_EXPIRY_VACATION}"
            toml_block add sieve.untrusted.default-expiry duplicate quotes "${SIEVE_UNTRUSTED_DEFAULT_EXPIRY_DUPLICATE}"

            toml_block add sieve.trusted from-name quotes "${SIEVE_TRUSTED_FROM_NAME}"
            toml_block add sieve.trusted from-addr quotes "${SIEVE_TRUSTED_FROM_ADDR}"
            toml_block add sieve.trusted return-path quotes "${SIEVE_TRUSTED_RETURN_PATH}"
            toml_block add sieve.trusted hostname quotes "${SIEVE_TRUSTED_HOSTNAME}"
            toml_block add sieve.trusted no-capability-check "${SIEVE_TRUSTED_NO_CAPABILITY_CHECK}"
            toml_block add sieve.trusted sign array "${SIEVE_TRUSTED_SIGN}"

            toml_block add sieve.trusted.limits redirects "${SIEVE_TRUSTED_LIMITS_REDIRECTS}"
            toml_block add sieve.trusted.limits out-messages "${SIEVE_TRUSTED_LIMITS_OUT_MESSAGES}"
            toml_block add sieve.trusted.limits received-headers "${SIEVE_TRUSTED_LIMITS_RECEIVED_HEADERS}"
            toml_block add sieve.trusted.limits cpu "${SIEVE_TRUSTED_LIMITS_CPU}"
            toml_block add sieve.trusted.limits nested-includes "${SIEVE_TRUSTED_LIMITS_NESTED_INCLUDES}"
            toml_block add sieve.trusted.limits duplicate-expiry quotes "${SIEVE_TRUSTED_LIMITS_DUPLICATE_EXPIRY}"

            toml_block add sieve.trusted.scripts connect triple "${SIEVE_TRUSTED_SCRIPTS_CONNECT}"
            toml_block add sieve.trusted.scripts ehlo triple "${SIEVE_TRUSTED_SCRIPTS_EHLO}"
            toml_block add sieve.trusted.scripts mail triple "${SIEVE_TRUSTED_SCRIPTS_MAIL}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# Sieve configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

#############################################
# Sieve untrusted runtime configuration
#############################################

$(toml_block show "${block_sieve_untrusted}")

$(toml_block show "${block_sieve_untrusted_limits}")

$(toml_block show "${block_sieve_untrusted_vacation}")

$(toml_block show "${block_sieve_untrusted_default_expiry}")

#############################################
# Sieve trusted runtime configuration
#############################################

$(toml_block show "${block_sieve_trusted}")

$(toml_block show "${block_sieve_trusted_limits}")

$(toml_block show "${block_sieve_trusted_scripts}")

EOF
        else
            :
        fi
    }

    common_configure_tls() {
        config_file="tls.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            certificates "${TLS_DEFAULT_CERT_FILE}"
            chown "${SERVER_USER}":"${SERVER_GROUP}" "${TLS_DEFAULT_CERT_FILE}"
            #chown "${SERVER_USER}":"${SERVER_GROUP}" "${TLS_DEFAULT_KEY_FILE}"  ## TODO - Refactor function


            ## Todo need variables
            toml_block add server.tls enable "${TLS_ENABLE,,}"
            toml_block add server.tls implicit "${TLS_IMPLICIT,,}"
            toml_block add server.tls timeout quotes "${TLS_TIMEOUT}"
            toml_block add server.tls certificate quotes "${TLS_CERTIFICATE}"
            toml_block add server.tls ignore-client-order "${TLS_IGNORE_CLIENT_ORDER,,}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# Common configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_server_tls}")

[certificate."default"]
cert = "file:///${TLS_DEFAULT_CERT_FILE}"
private-key = "file:///${TLS_DEFAULT_KEY_FILE}"
EOF
        else
            :
        fi
    }

    common_configure_tracing() {
        config_file="tracing.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then

            case "${LOG_TYPE,,}" in
                ## TODO Allow for comma seperated and allow for multiple blocks with same name
                "console" )
                    toml_block add global.tracing method quotes stdout
                    toml_block add global.tracing level quotes ${LOG_LEVEL,,}
                ;;
                "file" )
                    toml_block add global.tracing method log
                    toml_block add global.tracing path quotes "${LOG_PATH}"
                    toml_block add global.tracing prefix quotes "${LOG_FILE}"
                    toml_block add global.tracing level quotes "${LOG_LEVEL,,}"
                    toml_block add global.tracing rotate quotes "never"
                    toml_block add global.tracing ansi false
                ;;
            esac
            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# Logging and Tracing configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_global_tracing}")

EOF
        else
            :
        fi
    }

    if var_true "${ENABLE_SIEVE}" ; then common_configure_sieve; fi
    common_configure_server
    if var_true "${ENABLE_TLS}" ; then common_configure_tls; fi
    common_configure_tracing
}

configure_directory() {
    ## TODO Parse multiple values of DIRECTORY_<name>_TYPE and dynamically generate configuration
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/directory"
    sudo -u "${SERVER_USER}" mkdir -p "${config_dir}"

    directory_configure_imap() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    directory_configure_ldap() {
        config_file="ldap.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            ## TODO Be able to handle multiple directories
            toml_block add directory.default type quotes "${DIRECTORY_DEFAULT_LDAP_TYPE}"
            toml_block add directory.default address quotes "${DIRECTORY_DEFAULT_LDAP_ADDRESS}"
            toml_block add directory.default base-dn quotes "${DIRECTORY_DEFAULT_LDAP_BASE_DN}"

            toml_block add directory.default.bind dn quotes "${DIRECTORY_DEFAULT_LDAP_BIND_DN}"
            toml_block add directory.default.bind secret quotes "${DIRECTORY_DEFAULT_LDAP_BIND_SECRET}"

            toml_block add directory.default.cache entries "${DIRECTORY_DEFAULT_LDAP_CACHE_ENTRIES}"
            toml_block add directory.default.cache ttl "${DIRECTORY_DEFAULT_LDAP_CACHE_TTL}"

            toml_block add directory.default.filter name quotes "${DIRECTORY_DEFAULT_LDAP_FILTER_NAME}"
            toml_block add directory.default.filter email quotes "${DIRECTORY_DEFAULT_LDAP_FILTER_NAME}"
            toml_block add directory.default.filter verify quotes "${DIRECTORY_DEFAULT_LDAP_FILTER_NAME}"
            toml_block add directory.default.filter expand quotes "${DIRECTORY_DEFAULT_LDAP_FILTER_NAME}"
            toml_block add directory.default.filter domains quotes "${DIRECTORY_DEFAULT_LDAP_FILTER_DOMAINS}"

            toml_block add directory.default.options catch-all "${DIRECTORY_DEFAULT_LDAP_OPTIONS_CATCH_ALL,,}"
            toml_block add directory.default.options subaddressing "${DIRECTORY_DEFAULT_LDAP_OPTIONS_SUBADDRESSING,,}"
            toml_block add directory.default.options superuser-group quotes "${DIRECTORY_DEFAULT_LDAP_OPTIONS_SUPERUSER_GROUP}"

            toml_block add directory.default.pool max-connections ${DIRECTORY_DEFAULT_LDAP_POOL_MAX_CONNECTIONS}
            toml_block add directory.default.pool min-connections ${DIRECTORY_DEFAULT_LDAP_POOL_MIN_CONNECTIONS}
            toml_block add directory.default.pool max-lifetime quotes "${DIRECTORY_DEFAULT_LDAP_POOL_MAX_LIFETIME}"
            toml_block add directory.default.pool idle-timeout quotes "${DIRECTORY_DEFAULT_LDAP_POOL_IDLE_TIMEOUT}"
            toml_block add directory.default.pool conenct-timeout quotes "${DIRECTORY_DEFAULT_LDAP_POOL_CONNECT_TIMEOUT}"

            toml_block add directory.default.object-classes user quotes "${DIRECTORY_DEFAULT_LDAP_OBJECT_CLASSES_USER}"
            toml_block add directory.default.object-classes group quotes "${DIRECTORY_DEFAULT_LDAP_OBJECT_CLASSES_GROUP}"

            toml_block add directory.default.attributes uid quotes "${DIRECTORY_DEFAULT_LDAP_ATTRIBUTES_UID}"
            toml_block add directory.default.attributes description array "${DIRECTORY_DEFAULT_LDAP_ATTRIBUTES_DESCRIPTION}"
            toml_block add directory.default.attributes secret quotes "${DIRECTORY_DEFAULT_LDAP_ATTRIBUTES_SECRET}"
            toml_block add directory.default.attributes groups array "${DIRECTORY_DEFAULT_LDAP_ATTRIBUTES_GROUPS}"
            toml_block add directory.default.attributes email quotes "${DIRECTORY_DEFAULT_LDAP_ATTRIBUTES_EMAIL}"
            toml_block add directory.default.attributes email-alias quotes "${DIRECTORY_DEFAULT_LDAP_ATTRIBUTES_EMAIL_ALIAS}"
            toml_block add directory.default.attributes quota quotes "${DIRECTORY_DEFAULT_LDAP_ATTRIBUTES_QUOTA}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# Directory LDAP configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_directory_default}")

$(toml_block show "${block_directory_default_bind}")

$(toml_block show "${block_directory_default_cache}")

$(toml_block show "${block_directory_default_options}")

$(toml_block show "${block_directory_default_pool}")

$(toml_block show "${block_directory_default_filter}")

$(toml_block show "${block_directory_default_object_classes}")

$(toml_block show "${block_directory_default_attributes}")

EOF
        else
            :
        fi
    }

    directory_configure_lmtp() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    directory_configure_memory() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    directory_configure_sql() {
        ## TODO - Future version to support SQLite, MariaDB, and Postgres
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    if var_true "${DIRECTORY_ENABLE_LDAP}" ; then directory_configure_ldap ; fi
    #if var_true "${DIRECTORY_ENABLE_MEMORY}" ; then directory_configure_memory ; fi
}

configure_imap() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/imap"
    sudo -u "${SERVER_USER}" mkdir -p "${config_dir}"

    imap_configure_listener() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    imap_configure_settings() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }
}

configure_jmap() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/jmap"
    sudo -u "${SERVER_USER}" mkdir -p "${config_dir}"

    jmap_configure_auth() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_listener() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_oauth() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_protocol() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_push() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_ratelimit() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_store() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }

    jmap_configure_websockets() {
        ## TODO - Future version
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            :
        else
            :
        fi
    }
}

configure_server() {
   local config_dir
   local config_file
   config_dir="${CONFIG_PATH}"
   config_file="${CONFIG_FILE}"

    if [ "${SETUP_TYPE,,}" = "auto" ]; then
        ## TODO Add ability to take environment variable for custom additions
        ## TODO Check to see if newer files override older files configuration
        cat <<EOF > "${config_dir}"/"${config_file}"
##################################################
# Stalwart configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##################################################

[include]
files = [
$(for config_file in $(echo ${config_files} | tr "," "\",\n") ; do echo "          \"${config_file}," ; done)
        ]

EOF
    else
        :
    fi
}

configure_spamfilter() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/spamfilter"

    ## TODO - Future version
    :
}

configure_smtp() {
    local config_dir
    local config_file

    config_dir="${CONFIG_PATH}/smtp"
    sudo -u "${SERVER_USER}" mkdir -p "${config_dir}"

    smtp_configure_auth() {
        config_file="auth.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            ## TODO Add ENABLE switches
            toml_block add auth.iprev verify array "${SMTP_AUTH_IPREV_VERIFY}"

            toml_block add auth.dkim verify quotes "${SMTP_AUTH_DKIM_VERIFY}"
            toml_block add auth.dkim sign array "${SMTP_AUTH_DKIM_SIGN}"

            toml_block add auth.spf.ehlo array "${SMTP_AUTH_SPF_VERIFY_EHLO}"
            toml_block add auth.spf.mail-from array "${SMTP_AUTH_SPF_VERIFY_MAIL_FROM}"

            toml_block add auth.arc verify quotes "${SMTP_AUTH_ARC_SEAL}"
            toml_block add auth.arc seal array "${SMTP_AUTH_ARC_SEAL}"

            toml_block add auth.dmarc verify array "${SMTP_AUTH_DMARC_VERIFY}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP configuration ${config_file}
# DMARC, DKIM, SPF, ARC & IpRev
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_auth_iprev}")

$(toml_block show "${block_auth_dkim}")

$(toml_block show "${block_auth_spf_verify}")

$(toml_block show "${block_auth_arc}")

$(toml_block show "${block_auth_dmarc}")

EOF
        else
            :
        fi
    }

    smtp_configure_dkim() {
        config_file="dkim.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            print_debug "Configuring DKIM"

            dkim_domains=$(set -o posix ; set | printenv | sort | grep -c "^DKIM.*_DOMAIN=")
            for (( dkim_pair = 01; dkim_pair <= dkim_domains; dkim_pair++ )); do
                dkim_domain=DKIM${dkim_pair}_DOMAIN
                dkim_selector=DKIM${dkim_pair}_SELECTOR
                dkim_type=DKIM${dkim_pair}_TYPE
                dkim_keysize=DKIM${dkim_pair}_KEY_SIZE
                dkim generate "${!dkim_selector}" "${!dkim_domain}" "${!dkim_type}" ${!dkim_keysize}
            done

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

EOF
        else
            :
        fi
    }

    smtp_configure_listener() {
        config_file="listener.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then

            toml_block add server.listener.dynamic smtp bind array "${SMTP_LISTENER_SMTP_BIND}"
            toml_block add server.listener.dynamic smtp greeting quotes "${SMTP_LISTENER_SMTP_GREETING}"
            toml_block add server.listener.dynamic smtp protocol quotes "${SMTP_LISTENER_SMTP_PROTOCOL}"

            toml_block add server.listener.dynamic submission bind array "${SMTP_LISTENER_SUBMISSION_BIND}"
            toml_block add server.listener.dynamic submission greeting quotes "${SMTP_LISTENER_SUBMISSION_GREETING}"
            toml_block add server.listener.dynamic submission protocol quotes "${SMTP_LISTENER_SUBMISSION_PROTOCOL}"

            toml_block add server.listener.dynamic submissions bind array "${SMTP_LISTENER_SUBMISSIONS_BIND}"
            toml_block add server.listener.dynamic submissions greeting quotes "${SMTP_LISTENER_SUBMISSIONS_GREETING}"
            toml_block add server.listener.dynamic submissions protocol quotes "${SMTP_LISTENER_SUBMISSIONS_PROTOCOL,,}"
            toml_block add server.listener.dynamic submissions tls.implicit "${SMTP_LISTENER_SUBMISSIONS_TLS_IMPLICIT,,}"

            toml_block add server.listener.dynamic management bind array "${SMTP_LISTENER_MANAGEMENT_BIND}"
            toml_block add server.listener.dynamic management protocol quotes "${SMTP_LISTENER_MANAGEMENT_PROTOCOL,,}"

            toml_block add management directory quotes "${SMTP_MANAGEMENT_DIRECTORY}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP listener configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_server_listener_smtp}")

$(toml_block show "${block_server_listener_submission}")

$(toml_block show "${block_server_listener_submissions}")

$(toml_block show "${block_server_listener_management}")

$(toml_block show "${block_managemnet}")

#[server.listener."smtp"]
#bind = ["[::]:25"]
##greeting = "Stalwart SMTP at your service"
#protocol = "smtp"
#
#[server.listener."submission"]
#bind = ["[::]:587"]
#protocol = "smtp"
#
#[server.listener."submissions"]
#bind = ["[::]:465"]
#protocol = "smtp"
#tls.implicit = true
#
#[server.listener."management"]
#bind = ["127.0.0.1:8080"]
#protocol = "http"
#
#[management]
#directory = "default"

EOF
        else
            :
        fi
    }

    smtp_configure_milter() {
        config_file="milter.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then

            ## TODO Create ENABLE Blocks
            toml_block add session.data.milter.dynamic rspamd enable array "${SMTP_SESSION_DATA_MILTER_RSPAMD_ENABLE}"
            toml_block add session.data.milter.dynamic rspamd hostname quotes "${SMTP_SESSION_DATA_MILTER_RSPAMD_HOSTNAME}"
            toml_block add session.data.milter.dynamic rspamd port "${SMTP_SESSION_DATA_MILTER_RSPAMD_PORT}"
            toml_block add session.data.milter.dynamic rspamd tls "${SMTP_SESSION_DATA_MILTER_RSPAMD_TLS}"
            toml_block add session.data.milter.dynamic rspamd allow-invalid-certs "${SMTP_SESSION_DATA_MILTER_RSPAMD_ALLOW_INVALID_CERTS}"

            toml_block add session.data.milter.dynamic.timeout rspamd connect quotes "${SMTP_SESSION_DATA_MILTER_RSPAMD_TIMEOUT_CONNECT}"
            toml_block add session.data.milter.dynamic.timeout rspamd command quotes"${SMTP_SESSION_DATA_MILTER_RSPAMD_TIMEOUT_COMMAND}"
            toml_block add session.data.milter.dynamic.timeout rspamd data quotes "${SMTP_SESSION_DATA_MILTER_RSPAMD_TIMEOUT_DATA}"

            toml_block add session.data.milter.dynamic.options rspamd tempfail-on-error "${SMTP_SESSION_DATA_MILTER_RSPAMD_TEMPFAIL_ON_ERROR}"
            toml_block add session.data.milter.dynamic.options rspamd max-response-size "${SMTP_SESSION_DATA_MILTER_RSPAMD_MAX_RESPONSE_SIZE}"
            toml_block add session.data.milter.dynamic.options rspamd version "${SMTP_SESSION_DATA_MILTER_RSPAMD_VERSION}"

            toml_block add session.data.pipe.dynamic spam-assassin command quotes "${SMTP_SESSION_PIPE_SPAM_ASSASSIN_COMMAND}"
            toml_block add session.data.pipe.dynamic spam-assassin arguments array "${SMTP_SESSION_PIPE_SPAM_ASSASSIN_ARGUMENTS}"
            toml_block add session.data.pipe.dynamic spam-assassin timeout quotes "${SMTP_SESSION_PIPE_SPAM_ASSASSIN_TIMEOUT}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP inbound milter configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_data_milter_rspamd}")

$(toml_block show "${block_data_milter_rspamd_timeout}")

$(toml_block show "${block_data_milter_rspamd_options}")

$(toml_block show "${block_data_pipe_spam_assassin}")

#[session.data.milter."rspamd"]
#enable = [ { if = "listener", eq = "smtp", then = true },
#           { else = false } ]
#hostname = "127.0.0.1"
#port = 11332
#tls = false
#allow-invalid-certs = false

#[session.data.milter."rspamd".timeout]
#connect = "30s"
#command = "30s"
#data = "60s"

#[session.data.milter."rspamd".options]
#tempfail-on-error = true
#max-response-size = 52428800 # 50mb
#version = 6

#[session.data.pipe."spam-assassin"]
#command = "spamc"
#arguments = []
#timeout = "10s"

EOF
        else
            :
        fi
    }

    smtp_configure_queue() {
        config_file="queue.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            toml_block add queue path quotes "${SMTP_QUEUE_PATH}"
            toml_block add queue hash ${SMTP_QUEUE_HASH}

            toml_block add queue.schedule retry array "${SMTP_QUEUE_SCHEDULE_RETRY}"
            toml_block add queue.schedule notify array "${SMTP_QUEUE_SCHEDULE_NOTIFY}"
            toml_block add queue.schedule expire quotes "${SMTP_QUEUE_SCHEDULE_EXPIRE}"

            toml_block add queue.outbound hostname quotes "${SMTP_QUEUE_OUTBOUND_HOSTNAME}"
            toml_block add queue.outbound next-hop array "${SMTP_QUEUE_OUTBOUND_NEXT_HOP}"
            toml_block add queue.outbound ip-strategy "${SMTP_QUEUE_OUTBOUND_IP_STRATEGY}"

            toml_block add queue.outbound.tls dane quotes "${SMTP_QUEUE_OUTBOUND_TLS_DANE,,}"
            toml_block add queue.outbound.tls mta-sts quotes "${SMTP_QUEUE_OUTBOUND_TLS_MTA_STS,,}"
            toml_block add queue.outbound.tls starttls quotes "${SMTP_QUEUE_OUTBOUND_TLS_STARTTLS,,}"
            toml_block add queue.outbound.tls allow-invalid-certs "${SMTP_QUEUE_OUTBOUND_TLS_ALLOW_INVALID_CERTS,,}"

            toml_block add queue.outbound.source-ip v4 array "${SMTP_QUEUE_OUTBOUND_SOURCE_IP_V4}"
            toml_block add queue.outbound.source-ip v6 array "${SMTP_QUEUE_OUTBOUND_SOURCE_IP_V6}"

            toml_block add queue.outbound.limits mx "${SMTP_QUEUE_OUTBOUND_LIMITS_MX}"
            toml_block add queue.outbound.limits multihomed "${SMTP_QUEUE_OUTBOUND_LIMITS_MULTIHOMED}"

            toml_block add queue.outbound.timeouts connect quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_CONNECT}"
            toml_block add queue.outbound.timeouts greeting quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_GREETING}"
            toml_block add queue.outbound.timeouts tls quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_TLS}"
            toml_block add queue.outbound.timeouts ehlo quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_EHLO}"
            toml_block add queue.outbound.timeouts mail-from quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_MAIL_FROM}"
            toml_block add queue.outbound.timeouts rcpt-to quotes"${SMTP_QUEUE_OUTBOUND_TIMEOUTS_RCPT_TO}"
            toml_block add queue.outbound.timeouts data quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_DATA}"
            toml_block add queue.outbound.timeouts mta-sts quotes "${SMTP_QUEUE_OUTBOUND_TIMEOUTS_MTA_STS}"

            ## TODO DOUBLE BRACKETS
            toml_block add queue.quota match "${SMTP_QUEUE_QUOTA_MATCH}"
            toml_block add queue.quota key array "${SMTP_QUEUE_QUOTA_KEY}"
            toml_block add queue.quota messages "${SMTP_QUEUE_QUOTA_MESSAGES}"
            toml_block add queue.quota size "${SMTP_QUEUE_QUOTA_SIZE}"

            toml_block add queue.throttle key array "${SMTP_QUEUE_QUOTA_}"
            toml_block add queue.throttle rate quotes "${SMTP_QUEUE_QUOTA_RATE}"
            toml_block add queue.throttle concurrency "${SMTP_QUEUE_QUOTA_CONCURRENCY}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP server queue configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_queue}")

$(toml_block show "${block_queue_schedule}")

$(toml_block show "${block_queue_outbound}")

$(toml_block show "${block_queue_outbound_tls}")

$(toml_block show "${block_queue_outbound_source_ip}")

$(toml_block show "${block_queue_outbound_limits}")

$(toml_block show "${block_queue_outbound_timeouts}")

### TODO Double Brackets
$(toml_block show "${block_queue_quota}")

### TODO Double Brackets
$(toml_block show "${block_queue_throttle}")


#[queue]
#path = "%{BASE_PATH}%/queue"
#hash = 64
#
#[queue.schedule]
#retry = ["2m", "5m", "10m", "15m", "30m", "1h", "2h"]
#notify = ["1d", "3d"]
#expire = "5d"
#
#[queue.outbound]
##hostname = "%{HOST}%"
#next-hop = [ { if = "rcpt-domain", in-list = "default/domains", then = "local" },
#             { else = false } ]
#ip-strategy = "ipv4-then-ipv6"
#
#[queue.outbound.tls]
#dane = "optional"
#mta-sts = "optional"
#starttls = "require"
#allow-invalid-certs = false
#
##[queue.outbound.source-ip]
##v4 = ["10.0.0.10", "10.0.0.11"]
##v6 = ["a::b", "a::c"]
#
#[queue.outbound.limits]
#mx = 7
#multihomed = 2
#
#[queue.outbound.timeouts]
#connect = "3m"
#greeting = "3m"
#tls = "2m"
#ehlo = "3m"
#mail-from = "3m"
#rcpt-to = "3m"
#data = "10m"
#mta-sts = "2m"
#
[[queue.quota]]
##match = {if = "sender-domain", eq = "foobar.org"}
##key = ["rcpt"]
messages = 100000
size = 10737418240 # 10gb

[[queue.throttle]]
#key = ["rcpt-domain"]
#rate = "100/1h"
concurrency = 5

EOF
        else
            :
        fi
    }

    smtp_configure_remote() {
        config_file="remote.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            toml_block add remote.dynamic local address quotes "${SMTP_REMOTE_LOCAL_ADDRESS}"
            toml_block add remote.dynamic local port "${SMTP_REMOTE_LOCAL_PORT}"
            toml_block add remote.dynamic local protocol quotes "${SMTP_REMOTE_LOCAL_PROTOCOL}"
            toml_block add remote.dynamic local concurrency "${SMTP_REMOTE_LOCAL_CONCURRENCY}"
            toml_block add remote.dynamic local timeout quotes "${SMTP_REMOTE_LOCAL_TIMEOUT}"

            toml_block add remote.dynamic.tls local implicit ${SMTP_REMOTE_LOCAL_TLS_IMPLICIT,,}
            toml_block add remote.dynamic.tls local allow-invalid-certs ${SMTP_REMOTE_LOCAL_TLS_ALLOW_INVALID_CERTS,,}

            toml_block add remote.dynamic.auth local username quotes "${SMTP_REMOTE_LOCAL_AUTH_USERNAME}"
            toml_block add remote.dynamic.auth local secret quotes "${SMTP_REMOTE_LOCAL_AUTH_SECRET}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP remote servers configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_remote_local}")

$(toml_block show "${block_remote_local_tls}")

$(toml_block show "${block_remote_local_auth}")

##address = "127.0.0.1"
##port = 11200
##protocol = "lmtp"
##concurrency = 10
##timeout = "1m"
##
##[remote."local".tls]
##implicit = false
##allow-invalid-certs = true
##
###[remote."local".auth]
###username = ""
###secret = ""
EOF
        else
            :
        fi
    }

    smtp_configure_report() {
        config_file="report.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            toml_block add report path quotes "${REPORTS_PATH}"
            toml_block add report hash ${REPORTS_HASH}

            toml_block add report.analysis addresses array "${SMTP_REPORT_ANALYSIS_ADDRESSES}"
            toml_block add report.analysis forward "${SMTP_REPORT_ANALYSIS_FORWARD}"
            toml_block add report.analysis store quotes "${SMTP_REPORT_ANALYSIS_STORE}"

            toml_block add report "${SMTP_REPORT_DSN_}"
            toml_block add report "${SMTP_REPORT_DSN_}"
            toml_block add report "${SMTP_REPORT_DSN_}"

            toml_block add report "${SMTP_REPORT_DKIM_}"
            toml_block add report "${SMTP_REPORT_DKIM_}"
            toml_block add report "${SMTP_REPORT_DKIM_}"
            toml_block add report "${SMTP_REPORT_DKIM_}"
            toml_block add report "${SMTP_REPORT_DKIM_}"

            toml_block add report "${SMTP_REPORT_SPF_}"
            toml_block add report "${SMTP_REPORT_SPF_}"
            toml_block add report "${SMTP_REPORT_SPF_}"
            toml_block add report "${SMTP_REPORT_SPF_}"
            toml_block add report "${SMTP_REPORT_SPF_}"

            toml_block add report "${SMTP_REPORT_DMARC_}"
            toml_block add report "${SMTP_REPORT_DMARC_}"
            toml_block add report "${SMTP_REPORT_DMARC_}"
            toml_block add report "${SMTP_REPORT_DMARC_}"
            toml_block add report "${SMTP_REPORT_DMARC_}"

            toml_block add report "${SMTP_REPORT_DMARC_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_DMARC_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_DMARC_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_DMARC_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_DMARC_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_DMARC_AGGREGATE}"

            toml_block add report "${SMTP_REPORT_TLS_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_TLS_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_TLS_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_TLS_AGGREGATE}"
            toml_block add report "${SMTP_REPORT_TLS_AGGREGATE}"


            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP Reporting configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_report_analysis}")

$(toml_block show "${block_report_dsn}")

$(toml_block show "${block_report_dkim}")

$(toml_block show "${block_report_spf}")

$(toml_block show "${block_report_dmarc}")

$(toml_block show "${block_report_dmarc_aggregate}")

$(toml_block show "${block_report_tls_aggregate}")

##[report.analysis]
##addresses = ["dmarc@*", "abuse@*", "postmaster@*"]
##forward = true
###store = "%{BASE_PATH}%/incoming"
#
#[report.dsn]
#from-name = "Mail Delivery Subsystem"
#from-address = "MAILER-DAEMON@%{DEFAULT_DOMAIN}%"
#sign = ["rsa"]
#
#[report.dkim]
#from-name = "Report Subsystem"
#from-address = "noreply-dkim@%{DEFAULT_DOMAIN}%"
#subject = "DKIM Authentication Failure Report"
#sign = ["rsa"]
#send = "1/1d"
#
#[report.spf]
#from-name = "Report Subsystem"
#from-address = "noreply-spf@%{DEFAULT_DOMAIN}%"
#subject = "SPF Authentication Failure Report"
#send = "1/1d"
#sign = ["rsa"]
#
#[report.dmarc]
#from-name = "Report Subsystem"
#from-address = "noreply-dmarc@%{DEFAULT_DOMAIN}%"
#subject = "DMARC Authentication Failure Report"
#send = "1/1d"
#sign = ["rsa"]
#
#[report.dmarc.aggregate]
#from-name = "DMARC Report"
#from-address = "noreply-dmarc@%{DEFAULT_DOMAIN}%"
#org-name = "%{DEFAULT_DOMAIN}%"
##contact-info = ""
#send = "daily"
#max-size = 26214400 # 25mb
#sign = ["rsa"]
#
#[report.tls.aggregate]
#from-name = "TLS Report"
#from-address = "noreply-tls@%{DEFAULT_DOMAIN}%"
#org-name = "%{DEFAULT_DOMAIN}%"
##contact-info = ""
#send = "daily"
#max-size = 26214400 # 25 mb
#sign = ["rsa"]

EOF
        else
            :
        fi
    }

    smtp_configure_resolver() {
        config_file="resolver.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then

            toml_block add resolver type quotes "${SMTP_RESOLVER_TYPE}"
            toml_block add resolver preserve-intermediates ${SMTP_RESOLVER_PRESERVE_INTERMEDIATES,,}
            toml_block add resolver concurrency ${SMTP_RESOLVER_CONCURRENCY}
            toml_block add resolver timeout quotes "${SMTP_RESOLVER_TIMEOUT}"
            toml_block add resolver attempts ${SMTP_RESOLVER_ATTEMPTS}
            toml_block add resolver try-tcp-on-error ${SMTP_RESOLVER_TRY_TCP_ON_ERROR,,}
            ## Todo Public Suffix is bad and needs to support multiple values / array
            toml_block add resolver public-suffix array "${SMTP_RESOLVER_PUBLIC_SUFFIX}"

            toml_block add resolver.cache txt ${SMTP_RESOLVER_CACHE_TXT}
            toml_block add resolver.cache mx ${SMTP_RESOLVER_CACHE_MX}
            toml_block add resolver.cache ipv4 ${SMTP_RESOLVER_CACHE_IPV4}
            toml_block add resolver.cache ipv6 ${SMTP_RESOLVER_CACHE_IPV6}
            toml_block add resolver.cache ptr ${SMTP_RESOLVER_CACHE_PTR}
            toml_block add resolver.cache tlsa ${SMTP_RESOLVER_CACHE_TLSA}
            toml_block add resolver.cache mta-sts ${SMTP_RESOLVER_CACHE_MTS_STS}

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP Resolver configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

${block_resolver}

${block_resolver_cache}

EOF
        else
            :
        fi
    }

    smtp_configure_session() {
        config_file="session.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            toml_block add session timeout quotes "${SMTP_SESSION_TIMEOUT}"
            toml_block add session transfer-limit "${SMTP_SESSION_TRANSFER_LIMIT}"
            toml_block add session duration quotes "${SMTP_SESSION_DURATION}"

            toml_block add session.connect script quotes "${SMTP_SESSION_CONNECT_SCRIPT}"

            toml_block add session.ehlo require "${SMTP_SESSION_EHLO_REQUIRE,,}"
            toml_block add session.ehlo reject-non-fqdn array "${SMTP_SESSION_EHLO_REJECT_NON_FQDN}"
            toml_block add session.ehlo script quotes "${SMTP_SESSION_EHLO_SCRIPT}"

            toml_block add session.extensions pipelining "${SMTP_SESSION_EXTENSIONS_PIPELINING,,}"
            toml_block add session.extensions chunking "${SMTP_SESSION_EXTENSIONS_CHUNKING,,}"
            toml_block add session.extensions requiretls "${SMTP_SESSION_EXTENSIONS_REQUIRETLS,,}"
            toml_block add session.extensions nosoliciting quotes "${SMTP_SESSION_EXTENSIONS_NO_SOLICITING}"
            toml_block add session.extensions dsn array "${SMTP_SESSION_EXTENSIONS_DSN}"
            toml_block add session.extensions expn array "${SMTP_SESSION_EXTENSIONS_EXPN}"
            toml_block add session.extensions vrfy array "${SMTP_SESSION_EXTENSIONS_VRFY}" ## BLANK - Are we allowed to stay blank
            toml_block add session.extensions future-release array "${SMTP_SESSION_EXTENSIONS_FUTURE_RELEASE}"
            toml_block add session.extensions delivery-by array "${SMTP_SESSION_EXTENSIONS_DELIVER_BY}"
            toml_block add session.extensions mt-priority array "${SMTP_SESSION_EXTENSIONS_MT_PRIORITY}"

            toml_block add session.auth mechanisms array "${SMTP_SESSION_AUTH_MECHANISMS}"
            toml_block add session.auth directory array "${SMTP_SESSION_AUTH_DIRECTORY}"
            toml_block add session.auth require array "${SMTP_SESSION_AUTH_REQUIRE}"
            toml_block add session.auth allow-plain-text "${SMTP_SESSION_AUTH_ALLOW_PLAIN_TEXT,,}"

            toml_block add session.auth.errors total "${SMTP_SESSION_AUTH_ERRORS_TOTAL}"
            toml_block add session.auth.errors wait quotes "${SMTP_SESSION_AUTH_ERRORS_WAIT}"

            toml_block add session.mail script quotes "${SMTP_SESSION_MAIL_SCRIPT}"
            toml_block add session.mail rewrite "${SMTP_SESSION_MAIL_REWRITE}"

            toml_block add session.rcpt script quotes "${SMTP_SESSION_RCPT_SCRIPT}"
            toml_block add session.rcpt relay array "${SMTP_SESSION_RCPT_RELAY}"  ## BLANK
            toml_block add session.rcpt rewrite "${SMTP_SESSION_RCPT_REWRITE}"
            toml_block add session.rcpt max-recipients "${SMTP_SESSION_RCPT_MAX_RECIPIENTS}"  ## BLANK
            toml_block add session.rcpt directory quotes "${SMTP_SESSION_RCPT_DIRECTORY}"  ## BLANK

            toml_block add session.rcpt.errors total "${SMTP_SESSION_RCPT_ERRORS_TOTAL}" ## BLANK
            toml_block add session.rcpt.errors wait quotes "${SMTP_SESSION_RCPT_ERRORS_WAIT}" ##BLANK

            ## TODO Look these over these 1 look off.
            toml_block add session.data script array "${SMTP_SESSION_DATA_SCRIPT}" ## Check To see if populated

            ## TODO Look these over these 3 look off.
            toml_block add session.data.limits messages ${SMTP_SESSION_DATA_LIMITS_MESSAGES} ## BLANK
            toml_block add session.data.limits size ${SMTP_SESSION_DATA_LIMITS_SIZE} ## BLANK
            toml_block add session.data.limits received-headers ${SMTP_SESSION_DATA_LIMITS_RECEIVED_HEADERS} ##BLANK

            ## TODO Need to support multiple blocks with same name
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"
            #toml_block add session.throttle quotes "${SMTP_SESSION_THROTTLE_}"


            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

#############################################
# SMTP inbound session configuration
#############################################

$(toml_block show "${block_session}")

$(toml_block show "${block_session_connect}")

$(toml_block show "${block_session_ehlo}")

$(toml_block show "${block_session_extensions}")

$(toml_block show "${block_session_auth}")

$(toml_block show "${block_session_auth_errors}")

$(toml_block show "${block_session_mail}")

$(toml_block show "${block_session_rcpt}")

$(toml_block show "${block_session_rcpt_errors}")

$(toml_block show "${block_session_data}")

$(toml_block show "${block_session_data_limits}")

$(toml_block show "${block_session_data_add_headers}")

## TODO Support multiple blocks
[[session.throttle]]
#match = {if = "remote-ip", eq = "10.0.0.1"}
key = ["remote-ip"]
concurrency = 5
#rate = "5/1h"

[[session.throttle]]
key = ["sender-domain", "rcpt"]
rate = "25/1h"

EOF
        else
            :
        fi
    }

    smtp_configure_signature() {
        config_file="signature.toml"

        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
            dkim create_default

            toml_block add signature.dynamic rsa public-key quotes "${SMTP_SIGNATURE_RSA_PUBLIC_KEY:-${DEFAULT_DKIM_CERT_FILE}}"
            toml_block add signature.dynamic rsa private-key quotes "${SMTP_SIGNATURE_RSA_PRIVATE_KEY:-${DEFAULT_DKIM_KEY_FILE}}"
            toml_block add signature.dynamic rsa domain quotes "${SMTP_SIGNATURE_RSA_DOMAIN:-${DEFAULT_DOMAIN}}"
            toml_block add signature.dynamic rsa selector quotes "${SMTP_SIGNATURE_RSA_SELECTOR:-${DEFAULT_DKIM_SELECTOR}}"
            toml_block add signature.dynamic rsa headers array "${SMTP_SIGNATURE_RSA_HEADERS}"
            toml_block add signature.dynamic rsa algorithm quotes "${SMTP_SIGNATURE_RSA_ALGORITHM}"
            toml_block add signature.dynamic rsa canonicalization quotes "${SMTP_SIGNATURE_RSA_CANONICALIZATION}"
            toml_block add signature.dynamic rsa expire quotes "${SMTP_SIGNATURE_RSA_EXPIRE}"
            toml_block add signature.dynamic rsa third-party quotes "${THIRD_PARTY}"
            toml_block add signature.dynamic rsa third-party-algo quotes "${SMTP_SIGNATURE_RSA_THIRD_PARTY_ALGO}"
            toml_block add signature.dynamic rsa auid quotes "${SMTP_SIGNATURE_RSA_AUID}"
            toml_block add signature.dynamic rsa set-body-length "${SMTP_SIGNATURE_RSA_SET_BODY_LENGTH,,}"
            toml_block add signature.dynamic rsa report "${SMTP_SIGNATURE_RSA_REPORT,,}"

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP DKIM & ARC signatures configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_signature_rsa}")

#[signature."rsa"]
##public-key = "file://%{BASE_PATH}%/etc/dkim/%{DEFAULT_DOMAIN}%.cert"
#private-key = "file://%{BASE_PATH}%/etc/dkim/%{DEFAULT_DOMAIN}%.key"
#domain = "%{DEFAULT_DOMAIN}%"
#selector = "stalwart"
#headers = ["From", "To", "Date", "Subject", "Message-ID"]
#algorithm = "rsa-sha256"
#canonicalization = "relaxed/relaxed"
##expire = "10d"
##third-party = ""
##third-party-algo = ""
##auid = ""
#set-body-length = false
#report = true

EOF
        else
            :
        fi
    }

    smtp_configure_spamfilter() {
        config_file="spamfilter.toml"
        config_files=$(echo ${config_files} ; echo "${config_dir}/${config_file},")
        if [ "${SETUP_TYPE,,}" = "auto" ]; then
            mkdir -p "${DATA_PATH}"/spamfilter
            if [ ! -d "${DATA_PATH}"/spamfilter/maps ]; then cp -aR /assets/stalwart/config/spamfilter/maps "${DATA_PATH}"/spamfilter/ ; fi
            if [ ! -d "${DATA_PATH}"/spamfilter/scripts ]; then cp -aR /assets/stalwart/config/spamfilter/scripts "${DATA_PATH}"/spamfilter/ ; fi
            chown "${SERVER_USER}":"${SERVER_GROUP}" "${DATA_PATH}"/spamfilter

            toml_block add directory.dynamic spamdb type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_TYPE}"
            toml_block add directory.dynamic spamdb address quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_ADDRESS}"

            toml_block add directory.dynamic.pool spamdb max-connections "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_POOL_MAX_CONNECTIONS}"
            toml_block add directory.dynamic.pool spamdb min-connections "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_POOL_MIN_CONNECTIONS}"
            toml_block add directory.dynamic.pool spamdb idle-timeout quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_POOL_IDLE_TIMEOUT}"

            toml_block add directory.dynamic.lookup spamdb token-insert quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_LOOKUP_TOKEN_INSERT}"
            toml_block add directory.dynamic.lookup spamdb token-lookup quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_LOOKUP_TOKEN_LOOKUP}"
            toml_block add directory.dynamic.lookup spamdb id-insert quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_LOOKUP_ID_INSERT}"
            toml_block add directory.dynamic.lookup spamdb id-lookup quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_LOOKUP_ID_LOOKUP}"
            toml_block add directory.dynamic.lookup spamdb reputation-insert quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_LOOKUP_REPUTATION_INSERT}"
            toml_block add directory.dynamic.lookup spamdb reputation-lookup quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_LOOKUP_REPUTATION_LOOKUP}"

            toml_block add directory.dynamic.schedule spamdb query array "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_SCHEDULE_QUERY}"
            toml_block add directory.dynamic.schedule spamdb frequency quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAMDB_SCHEDULE_FREQUENCY}"

            toml_block add directory.dynamic spam type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_TYPE}"

            toml_block add directory.dynamic.lookup.dynamic2 spam free-domains type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_FREEDOMAINS_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam free-domains comment quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_FREEDOMAINS_COMMENT}"
            toml_block add directory.dynamic.lookup.dynamic2 spam free-domains values array "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_FREEDOMAINS_VALUES}"

            toml_block add directory.dynamic.lookup.dynamic2 spam disposable-domains type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DISPOSABLEDOMAINS_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam disposable-domains comment quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DISPOSABLEDOMAINS_COMMENT}"
            toml_block add directory.dynamic.lookup.dynamic2 spam disposable-domains values array "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DISPPSABLEDOMAINS_VALUES}"

            toml_block add directory.dynamic.lookup.dynamic2 spam redirectors type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_REDIRECTORS_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam redirectors comment quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_REDIRECTORS_COMMENT}"
            toml_block add directory.dynamic.lookup.dynamic2 spam redirectors values array "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_REDIRECTORS_VALUES}"

            toml_block add directory.dynamic.lookup.dynamic2 spam domains-allow type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DOMAINSALLOW_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam domains-allow comment quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DOMAINSALLOW_COMMENT}"
            toml_block add directory.dynamic.lookup.dynamic2 spam domains-allow values array "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DOMAINSALLOW_VALUES}"

            toml_block add directory.dynamic.lookup.dynamic2 spam dmarc-allow type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DMARCALLOW_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam dmarc-allow comment quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DMARCALLOW_COMMENT}"
            toml_block add directory.dynamic.lookup.dynamic2 spam dmarc-allow values array "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_DMARCALLOW_VALUES}"

            toml_block add directory.dynamic.lookup.dynamic2 spam spf-dkim-allow type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_SPFDKIMALLOW_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam spf-dkim-allow comment quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_SPFDKIMALLOW_COMMENT}"
            toml_block add directory.dynamic.lookup.dynamic2 spam spf-dkim-allow values array "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_SPFDKIMALLOW_VALUES}"

            toml_block add directory.dynamic.lookup.dynamic2 spam mime-types type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_MIMETYPES_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam mime-types comment quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_MIMETYPES_COMMENT}"
            toml_block add directory.dynamic.lookup.dynamic2 spam mime-types values array "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_MIMETYPES_VALUES}" # TODO Parse an array properly

            toml_block add directory.dynamic.lookup.dynamic2 spam trap-address type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_TRAPADDRESS_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam trap-address comment quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_TRAPADDRESS_COMMENT}"
            toml_block add directory.dynamic.lookup.dynamic2 spam trap-address values quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_TRAPADDRESS_VALUES}" ## TODO Turn into Array

            toml_block add directory.dynamic.lookup.dynamic2 spam scores type quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_SCORES_TYPE}"
            toml_block add directory.dynamic.lookup.dynamic2 spam scores values quotes "${SMTP_SPAMFILTER_DIRECTORY_SPAM_LOOKUP_SCORES_VALUES}"

            if var_true "${ENABLE_SIEVE}" ; then
                toml_block add sieve.trusted.scripts spam-filter array "${SIEVE_TRUSTED_SCRIPTS_SPAMFILTER}"
                toml_block add sieve.trusted.scripts track-replies array "${SIEVE_TRUSTED_SCRIPTS_TRACK_REPLIES}"
                toml_block add sieve.trusted.scripts greylist array "${SIEVE_TRUSTED_SCRIPTS_GREYLIST}"
            fi

            cat <<EOF > "${config_dir}"/"${config_file}"
##########################################################
# SMTP configuration ${config_file}
# Automatically Generated on  $(date +'%Y-%m-%d %H:%M:%S')
##########################################################

$(toml_block show "${block_directory_spamdb}")

$(toml_block show "${block_directory_spamdb_pool}")

$(toml_block show "${block_directory_spamdb_lookup}")

$(toml_block show "${block_directory_spamdb_schedule}")

$(toml_block show "${block_directory_spam}")

$(toml_block show "${block_directory_spam_lookup_free_domains}")

$(toml_block show "${block_directory_spam_lookup_disposable_domains}")

$(toml_block show "${block_directory_spam_lookup_redirectors}")

$(toml_block show "${block_directory_spam_lookup_domains_allow}")

$(toml_block show "${block_directory_spam_lookup_dmarc_allow}")

$(toml_block show "${block_directory_spam_lookup_spf_dkim_allow}")

$(toml_block show "${block_directory_spam_lookup_mime_types}")

$(toml_block show "${block_directory_spam_lookup_trap_address}")

$(toml_block show "${block_directory_spam_lookup_scores}")

$(toml_block show "${block_sieve_trusted_scripts}")
## TODO TRUSTED SCRIPTS MIGHT BE CARRYING FORWARD FROM ANOTHER FUNCTION!

##############################################
## SMTP Spam & Phishing filter configuration
##############################################
#
#[directory."spamdb"]
#type = "sql"
#address = "sqlite://%{BASE_PATH}%/data/spamfilter.sqlite3?mode=rwc"
#
#[directory."spamdb".pool]
#max-connections = 10
#min-connections = 0
#idle-timeout = "5m"
#
#[directory."spamdb".lookup]
#token-insert = "INSERT INTO bayes_tokens (h1, h2, ws, wh) VALUES (?, ?, ?, ?)
#                ON CONFLICT(h1, h2)
#                DO UPDATE SET ws = ws + excluded.ws, wh = wh + excluded.wh"
#token-lookup = "SELECT ws, wh FROM bayes_tokens WHERE h1 = ? AND h2 = ?"
#id-insert = "INSERT INTO seen_ids (id, ttl) VALUES (?, datetime('now', ? || ' seconds'))"
#id-lookup = "SELECT 1 FROM seen_ids WHERE id = ? AND ttl > CURRENT_TIMESTAMP"
#reputation-insert = "INSERT INTO reputation (token, score, count, ttl) VALUES (?, ?, 1, datetime('now', '30 days'))
#                     ON CONFLICT(token)
#                     DO UPDATE SET score = (count + 1) * (excluded.score + 0.98 * score) / (0.98 * count + 1), count = count + 1, ttl = excluded.ttl"
#reputation-lookup = "SELECT score, count FROM reputation WHERE token = ?"
#
#[directory."spamdb".schedule]
#query = ["DELETE FROM seen_ids WHERE ttl < CURRENT_TIMESTAMP",
#         "DELETE FROM reputation WHERE ttl < CURRENT_TIMESTAMP"]
#frequency = "0 3 *"
#
#[directory."spam"]
#type = "memory"
#
#[directory."spam".lookup."free-domains"]
#type = "glob"
#comment = '#'
#values = ["https://get.stalw.art/resources/config/spamfilter/maps/domains_free.list",
#          "file+fallback://%{BASE_PATH}%/etc/spamfilter/maps/domains_free.list"]
#
#[directory."spam".lookup."disposable-domains"]
#type = "glob"
#comment = '#'
#values = ["https://get.stalw.art/resources/config/spamfilter/maps/domains_disposable.list",
#          "file+fallback://%{BASE_PATH}%/etc/spamfilter/maps/domains_disposable.list"]
#
#[directory."spam".lookup."redirectors"]
#type = "glob"
#comment = '#'
#values = ["https://get.stalw.art/resources/config/spamfilter/maps/url_redirectors.list",
#          "file+fallback://%{BASE_PATH}%/etc/spamfilter/maps/url_redirectors.list"]
#
#[directory."spam".lookup."domains-allow"]
#type = "glob"
#comment = '#'
#values = ["https://get.stalw.art/resources/config/spamfilter/maps/allow_domains.list",
#          "file+fallback://%{BASE_PATH}%/etc/spamfilter/maps/allow_domains.list"]
#
#[directory."spam".lookup."dmarc-allow"]
#type = "glob"
#comment = '#'
#values = ["https://get.stalw.art/resources/config/spamfilter/maps/allow_dmarc.list",
#          "file+fallback://%{BASE_PATH}%/etc/spamfilter/maps/allow_dmarc.list"]
#
#[directory."spam".lookup."spf-dkim-allow"]
#type = "glob"
#comment = '#'
#values = ["https://get.stalw.art/resources/config/spamfilter/maps/allow_spf_dkim.list",
#          "file+fallback://%{BASE_PATH}%/etc/spamfilter/maps/allow_spf_dkim.list"]
#
#[directory."spam".lookup."mime-types"]
#type = "map"
#comment = '#'
#values = ["https://get.stalw.art/resources/config/spamfilter/maps/mime_types.map",
#          "file+fallback://%{BASE_PATH}%/etc/spamfilter/maps/mime_types.map"]
#
#[directory."spam".lookup."trap-address"]
#type = "glob"
#comment = '#'
#values = "file://%{BASE_PATH}%/etc/spamfilter/maps/spam_trap.list"
#
#[directory."spam".lookup."scores"]
#type = "map"
#values = "file://%{BASE_PATH}%/etc/spamfilter/maps/scores.map"
#
#[sieve.trusted.scripts]
#spam-filter = ["file://%{BASE_PATH}%/etc/spamfilter/scripts/config.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/prelude.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/from.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/recipient.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/subject.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/replyto.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/date.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/messageid.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/received.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/headers.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/bounce.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/html.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/mime.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/dmarc.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/ip.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/helo.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/replies_in.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/spamtrap.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/bayes_classify.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/url.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/rbl.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/pyzor.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/composites.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/scores.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/reputation.sieve",
#               "file://%{BASE_PATH}%/etc/spamfilter/scripts/epilogue.sieve"]
#
#track-replies = ["file://%{BASE_PATH}%/etc/spamfilter/scripts/config.sieve",
#                 "file://%{BASE_PATH}%/etc/spamfilter/scripts/replies_out.sieve"]
#
#greylist = "file://%{BASE_PATH}%/etc/spamfilter/scripts/greylist.sieve"

EOF
        else
            :
        fi
    }

    if var_true ${SMTP_ENABLE_AUTH} ; then smtp_configure_auth; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_DKIM} ; then smtp_configure_dkim; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_LISTENER} ; then smtp_configure_listener; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_MILTER} ; then smtp_configure_milter; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_QUEUE} ; then smtp_configure_queue; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_REMOTE} ; then smtp_configure_remote; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_REPORT} ; then smtp_configure_report; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_RESOLVER} ; then smtp_configure_resolver; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_SESSION} ; then smtp_configure_session; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_SIGNATURE} ; then smtp_configure_signature; fi ## Define what this is for
    if var_true ${SMTP_ENABLE_SPAMFILTER} ; then smtp_configure_spamfilter; fi ## Define what this is for
}

dkim() {
    case "${1,,}" in
        "create_default" )
            dkim generate "${DEFAULT_DKIM_SELECTOR}" "${DEFAULT_DOMAIN}" "${DEFAULT_DKIM_TYPE}" "${DEFAULT_DKIM_RSA_KEY_SIZE}"
        ;;
        "generate" )
            ## Usage generate <selector> <domainname> <type> <rsa_keysize>
            if [ -z "${4}" ] ; then return 3; fi
            mkdir -p "${DATA_PATH}"/dkim ## TODO - maybe bootstrap_filesystem function
            chown -R "${SERVER_USER}":"${SERVER_GROUP}" "${DATA_PATH}"/dkim ## TODO - maybe bootstrap_filesystem function

            local _dkim_selector=${2}
            local _dkim_domain=${3}
            local _dkim_type=${4:-"${DEFAULT_DKIM_TYPE}"}
            local _dkim_key_size=${5:-"${DEFAULT_DKIM_RSA_KEY_SIZE}"}

            if [ -f "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".key ] || [ -f "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".cert ] || [ -f "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".readme ] ; then
                return 99
            fi

            case "${_dkim_type,,}" in
                ed25519 )
                    sudo -u "${SERVER_USER}" openssl genpkey -algorithm ed25519 -out "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".key
                    sudo -u "${SERVER_USER}" openssl pkey -in "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".key -pubout -outform der | tail -c +13 | openssl base64 -A > "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".cert
                ;;
                rsa )
                    sudo -u "${SERVER_USER}" openssl genrsa -out "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".key ${_dkim_key_size}
                    sudo -u "${SERVER_USER}" openssl rsa -in "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".key -pubout -outform der | openssl base64 -A > "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".cert
                ;;
            esac

            cat <<EOF > "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".readme
DKIM Selector: ${_dkim_selector}
Domain: ${_dkim_domain/./_}

This record was generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
Add the following DNS records to your domain in order to enable DKIM, SPF and DMARC:

${_dkim_selector}._domainkey.${_dkim_domain/./_}. IN TXT "v=DKIM1; k=${DKIM_TYPE,,}; p=$(cat "${DATA_PATH}"/dkim/"${_dkim_selector}"_"${_dkim_domain/./_}".cert)"
${_dkim_domain/./_}. IN TXT "v=spf1 a:${SERVER_NAME}.${_dkim_domain/./_} mx -all ra=postmaster"
${SERVER_NAME}.${_dkim_domain/./_}. IN TXT "v=spf1 a -all ra=postmaster"
_dmarc.${_dkim_domain/./_}. IN TXT "v=DMARC1; p=none; rua=mailto:postmaster@${_dkim_domain/./_}; ruf=mailto:postmaster@${_dkim_domain/./_}"
EOF
        ;;
        parse_environment )
            dkim_domains=$(set -o posix ; set | printenv | sort | grep -c "^DKIM.*_DOMAIN=")
            for (( dkim_pair = 01; dkim_pair <= dkim_domains; dkim_pair++ )); do
                dkim_domain=DKIM${dkim_pair}_DOMAIN
                dkim_selector=DKIM${dkim_pair}_SELECTOR
                dkim_type=DKIM${dkim_pair}_TYPE
                dkim_keysize=DKIM${dkim_pair}_KEY_SIZE
                dkim generate "${!dkim_selector}" "${!dkim_domain}" "${!dkim_type}" ${!dkim_keysize}
            done
        ;;
    esac
}

setup_container_mode() {
    if [ -f "/tmp/.container/stalwart/.mode-env" ]; then
        print_debug "[setup_container_mode] Importing MODE environment generated variables"
        source /tmp/.container/stalwart/.mode-env
    else
        mkdir -p /tmp/.container/stalwart/
        if [ "${MODE,,}" = "aio" ] || [ "${MODE,,}" = "all" ] ; then
            print_debug "[setup_container_mode] Container Mode: AIO"
            print_debug "[setup_container_mode] Creating MODE environment generated variables"
            echo "ENABLE_IMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
            echo "ENABLE_JMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
            echo "ENABLE_SMTP=TRUE" >> /tmp/.container/stalwart/.mode-env
            if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
            fi
        else
            modes=$(echo "${MODE,,}" | tr "," "\n")
            for mode in $modes; do
                case "${mode,,}" in
                    "imap" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_IMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi
                    ;;
                    "jmap" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_JMAP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi
                    ;;
                    "smtp" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SMTP"
                        echo "ENABLE_SMTP=TRUE" >> /tmp/.container/stalwart/.mode-env
                        if [[ "$(grep -cq 'create_log_stalwart=TRUE' /tmp/.container/stalwart/.mode-env)" -eq 0 ]] ; then
                            echo "create_log_stalwart=TRUE" >> /tmp/.container/stalwart/.mode-env
                        fi
                    ;;
                    *)
                        print_error "[setup_container_mode] Unknown 'MODE' environment variable - exitting.."
                        exit 1
                    ;;
                esac
            done
        fi
        source /tmp/.container/stalwart/.mode-env
    fi
}

toml_block() {
    ## Usage toml_block <operation> <block> <key> <value>
    ## Operation:         'add' to block
    ##
    ## Options for value: blank to make "" as value
    ##                    quote to make 'value' as value
    ##                    doublequote to make "value" as value
    ## Access resulting toml block with 'echo $block_<block>'
    ##
    ## Examples:
    ## toml_block add blockname blockkey1 blockvalue
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey2 blockvalue blockextra
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey3 singlequote blockvalue3
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey4 doublequote blockvalue4
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey5 blank
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey6 multi word value
    ## echo "${block_blockname}"
    ## toml_block add blockname blockkey7 quotes multi word value
    ## echo "${block_blockname}"
    ## toml_block add blockname.dynamic.foobar test blockkey9 blockvalue9
    ## echo "${block_blockname_test_foobar}"
    ## toml_block add blockname.dynamic.foobar10.dynamic2 test1 test2 blockkey10 blockvalue10
    ## echo "${block_blockname_test1_foobar10_test2}"
    ##  cat <<EOF > /tmp/foo.txt
    #$(toml_block show "${block_blockname}")
    #EOF
    ##
    ## Any periods or hyphens auto converted to underscore
    case "${1}" in
        add )
            shift 1
            local block_name
            local block_name_sanitized
            local block_data
            local shift_val=1

            if [ -z "${1}" ]; then return 1; fi

            block_name=${1}
            if [[ "${block_name}" =~ \.dynamic3 ]]; then
                block_name="$(echo ${block_name} | sed "s|.dynamic3|.\"$4\"|g")"
                shift_val=3
            fi

            if [[ "${block_name}" =~ \.dynamic2 ]]; then
                block_name="$(echo ${block_name} | sed "s|.dynamic2|.\"$3\"|g")"
                if [ "${shift_val}" -eq 3 ]; then
                    shift_val=3
                else
                    shift_val=2
                fi
            fi

            if [[ "${block_name}" =~ \.dynamic ]]; then
                block_name="$(echo ${block_name} | sed "s|.dynamic|.\"$2\"|g")"
                if [ "${shift_val}" -eq 3 ]; then
                    shift_val=3
                elif [ "${shift_val}" -eq 2 ]; then
                    shift_val=2
                else
                    shift_val=1
                fi

                shift ${shift_val}
            fi

            block_name_sanitized=$(echo "${block_name}" | sed -e "s|\.|_|g" -e "s|-|_|g" -e 's|"||g')

            if [ -n "${2}" ]; then
                local block_key
                local block_value
                block_key=${2}
                block_value=${3}
                local block_value_blanket
                case "${block_value}" in
                    array | brackets)
                        block_value_blanket_pre="["
                        block_value_blanket_post="]"
                        shift 3
                        block_value=$@
                    ;;
                    blank )
                        block_value_blanket_pre=\"
                        block_value_blanket_post=\"
                        block_value=
                    ;;
                    doublearray | doublebrackets)
                        block_value_blanket_pre="[["
                        block_value_blanket_post="]]"
                        shift 3
                        block_value=$@
                    ;;
                    doublequote | double | quotes )
                        block_value_blanket_pre=\"
                        block_value_blanket_post=\"
                        shift 3
                        block_value=$@
                    ;;
                    singlequote | quote )
                        block_value_blanket_pre=\'
                        block_value_blanket_post=\'
                        shift 3
                        block_value=$@
                    ;;
                    triplequote | triple )
                        block_value_blanket_pre=\'\'\'
                        block_value_blanket_post=\'\'\'
                        shift 3
                        block_value=$@
                    ;;
                    * )
                        shift 2
                        block_value=$@
                    ;;
                esac

                if ! [ -v block_$block_name_sanitized ]; then
                    block_data="[$(echo $block_name)]\n"
                fi

                if [ -n "${block_value}" ]; then
                    block_data+="$(echo -e "${block_key} = ${block_value_blanket_pre}${block_value}${block_value_blanket_post}\n")"
                fi
                unset block_value_blanket_pre
                unset block_value_blanket_post

                #block_data=$(echo "${block_data}" | sed "/\[.*\]/d" | sed "1s/^/\[${block_name}\]\\n/" | sed "/^$/d")
                #block_data=$(echo "${block_data}" | sed "/\[.*\]/d" | sed "1s/^/ \\n/" | sed "/^$/d")
                #block_data=$(echo "${block_data}" |  sed "1s/^/\\n/" | sed "/^$/d")

            fi
            export block_$block_name_sanitized+="$block_data\n"

            #block_contents=block_$block_name_sanitized
            #echo ${!block_contents}
        ;;
        show )
            echo -e "${2}" | sed '/^[[:space:]]*$/d'
        ;;
    esac
}
